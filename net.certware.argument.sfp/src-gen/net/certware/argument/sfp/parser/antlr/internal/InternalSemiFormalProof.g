/*
* generated by Xtext
*/
grammar InternalSemiFormalProof;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package net.certware.argument.sfp.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package net.certware.argument.sfp.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import net.certware.argument.sfp.services.SemiFormalProofGrammarAccess;

}

@parser::members {

 	private SemiFormalProofGrammarAccess grammarAccess;
 	
    public InternalSemiFormalProofParser(TokenStream input, IAstFactory factory, SemiFormalProofGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("net/certware/argument/sfp/parser/antlr/internal/InternalSemiFormalProof.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Proof";	
   	}
   	
   	@Override
   	protected SemiFormalProofGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProof
entryRuleProof returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getProofRule(), currentNode); }
	 iv_ruleProof=ruleProof 
	 { $current=$iv_ruleProof.current; } 
	 EOF 
;

// Rule Proof
ruleProof returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'Theorem' 
    {
        createLeafNode(grammarAccess.getProofAccess().getTheoremKeyword_0(), null); 
    }
	':' 
    {
        createLeafNode(grammarAccess.getProofAccess().getColonKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProofAccess().getTitleTextParserRuleCall_2_0(), currentNode); 
	    }
		lv_title_2_0=ruleText		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProofRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"title",
	        		lv_title_2_0, 
	        		"Text", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getProofAccess().getLeftParenthesisKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProofAccess().getJustificationsJustificationsParserRuleCall_4_0(), currentNode); 
	    }
		lv_justifications_4_0=ruleJustifications		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProofRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"justifications",
	        		lv_justifications_4_0, 
	        		"Justifications", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getProofAccess().getRightParenthesisKeyword_5(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProofAccess().getProofStepsProofStepsParserRuleCall_6_0(), currentNode); 
	    }
		lv_proofSteps_6_0=ruleProofSteps		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProofRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"proofSteps",
	        		lv_proofSteps_6_0, 
	        		"ProofSteps", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleText
entryRuleText returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTextRule(), currentNode); } 
	 iv_ruleText=ruleText 
	 { $current=$iv_ruleText.current.getText(); }  
	 EOF 
;

// Rule Text
ruleText returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    createLeafNode(grammarAccess.getTextAccess().getSTRINGTerminalRuleCall(), null); 
    }

    ;





// Entry rule entryRuleJustifications
entryRuleJustifications returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getJustificationsRule(), currentNode); }
	 iv_ruleJustifications=ruleJustifications 
	 { $current=$iv_ruleJustifications.current; } 
	 EOF 
;

// Rule Justifications
ruleJustifications returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
    { 
        temp=factory.create(grammarAccess.getJustificationsAccess().getJustificationsAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getJustificationsAccess().getJustificationsAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getJustificationsAccess().getJustificationsJustificationParserRuleCall_0_1_0_0(), currentNode); 
	    }
		lv_justifications_1_0=ruleJustification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJustificationsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"justifications",
	        		lv_justifications_1_0, 
	        		"Justification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getJustificationsAccess().getCommaKeyword_0_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getJustificationsAccess().getJustificationsJustificationParserRuleCall_0_1_1_1_0(), currentNode); 
	    }
		lv_justifications_3_0=ruleJustification		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJustificationsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"justifications",
	        		lv_justifications_3_0, 
	        		"Justification", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?)
    |(
(
		lv_hypothesis_4_0=	'hypothesis' 
    {
        createLeafNode(grammarAccess.getJustificationsAccess().getHypothesisHypothesisKeyword_1_0(), "hypothesis"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJustificationsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "hypothesis", lv_hypothesis_4_0, "hypothesis", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_epsilon_5_0=	'epsilon' 
    {
        createLeafNode(grammarAccess.getJustificationsAccess().getEpsilonEpsilonKeyword_2_0(), "epsilon"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJustificationsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "epsilon", lv_epsilon_5_0, "epsilon", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleJustification
entryRuleJustification returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getJustificationRule(), currentNode); }
	 iv_ruleJustification=ruleJustification 
	 { $current=$iv_ruleJustification.current; } 
	 EOF 
;

// Rule Justification
ruleJustification returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
    { 
        temp=factory.create(grammarAccess.getJustificationAccess().getJustificationAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getJustificationAccess().getJustificationAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getJustificationAccess().getNumeralNumeralParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_numeral_1_0=ruleNumeral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJustificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"numeral",
	        		lv_numeral_1_0, 
	        		"Numeral", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getJustificationAccess().getAssertionQuotedAssertionParserRuleCall_1_0(), currentNode); 
	    }
		lv_assertion_2_0=ruleQuotedAssertion		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJustificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"assertion",
	        		lv_assertion_2_0, 
	        		"QuotedAssertion", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getJustificationAccess().getEntailmentEntailmentParserRuleCall_2_0(), currentNode); 
	    }
		lv_entailment_3_0=ruleEntailment		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getJustificationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"entailment",
	        		lv_entailment_3_0, 
	        		"Entailment", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleQuotedAssertion
entryRuleQuotedAssertion returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getQuotedAssertionRule(), currentNode); }
	 iv_ruleQuotedAssertion=ruleQuotedAssertion 
	 { $current=$iv_ruleQuotedAssertion.current; } 
	 EOF 
;

// Rule QuotedAssertion
ruleQuotedAssertion returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getQuotedAssertionAccess().getQuotedAssertionAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getQuotedAssertionAccess().getQuotedAssertionAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getQuotedAssertionAccess().getTextTextParserRuleCall_1_0(), currentNode); 
	    }
		lv_text_1_0=ruleText		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQuotedAssertionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"text",
	        		lv_text_1_0, 
	        		"Text", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleEntailment
entryRuleEntailment returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getEntailmentRule(), currentNode); }
	 iv_ruleEntailment=ruleEntailment 
	 { $current=$iv_ruleEntailment.current; } 
	 EOF 
;

// Rule Entailment
ruleEntailment returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getEntailmentAccess().getEntailmentAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getEntailmentAccess().getEntailmentAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEntailmentAccess().getHeadConjunctionParserRuleCall_1_0(), currentNode); 
	    }
		lv_head_1_0=ruleConjunction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEntailmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"head",
	        		lv_head_1_0, 
	        		"Conjunction", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'->' 
    {
        createLeafNode(grammarAccess.getEntailmentAccess().getHyphenMinusGreaterThanSignKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getEntailmentAccess().getTailNumeralParserRuleCall_3_0(), currentNode); 
	    }
		lv_tail_3_0=ruleNumeral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getEntailmentRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"tail",
	        		lv_tail_3_0, 
	        		"Numeral", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleConjunction
entryRuleConjunction returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getConjunctionRule(), currentNode); }
	 iv_ruleConjunction=ruleConjunction 
	 { $current=$iv_ruleConjunction.current; } 
	 EOF 
;

// Rule Conjunction
ruleConjunction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
    { 
        temp=factory.create(grammarAccess.getConjunctionAccess().getConjunctionAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getConjunctionAccess().getConjunctionAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConjunctionAccess().getLhsNumeralParserRuleCall_0_1_0(), currentNode); 
	    }
		lv_lhs_1_0=ruleNumeral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConjunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lhs",
	        		lv_lhs_1_0, 
	        		"Numeral", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'^' 
    {
        createLeafNode(grammarAccess.getConjunctionAccess().getCircumflexAccentKeyword_0_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConjunctionAccess().getRhsConjunctionParserRuleCall_0_3_0(), currentNode); 
	    }
		lv_rhs_3_0=ruleConjunction		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConjunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rhs",
	        		lv_rhs_3_0, 
	        		"Conjunction", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getConjunctionAccess().getLhsNumeralParserRuleCall_1_0(), currentNode); 
	    }
		lv_lhs_4_0=ruleNumeral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getConjunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lhs",
	        		lv_lhs_4_0, 
	        		"Numeral", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleNumeral
entryRuleNumeral returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNumeralRule(), currentNode); } 
	 iv_ruleNumeral=ruleNumeral 
	 { $current=$iv_ruleNumeral.current.getText(); }  
	 EOF 
;

// Rule Numeral
ruleNumeral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(grammarAccess.getNumeralAccess().getINTTerminalRuleCall(), null); 
    }

    ;





// Entry rule entryRuleProofSteps
entryRuleProofSteps returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getProofStepsRule(), currentNode); }
	 iv_ruleProofSteps=ruleProofSteps 
	 { $current=$iv_ruleProofSteps.current; } 
	 EOF 
;

// Rule ProofSteps
ruleProofSteps returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
    { 
        temp=factory.create(grammarAccess.getProofStepsAccess().getProofStepsAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getProofStepsAccess().getProofStepsAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProofStepsAccess().getStatementsStatementParserRuleCall_0_1_0_0(), currentNode); 
	    }
		lv_statements_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProofStepsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"statements",
	        		lv_statements_1_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getProofStepsAccess().getStatementsStatementParserRuleCall_0_1_1_0(), currentNode); 
	    }
		lv_statements_2_0=ruleStatement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProofStepsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"statements",
	        		lv_statements_2_0, 
	        		"Statement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)?)
    |(
(
		lv_epsilon_3_0=	'epsilon' 
    {
        createLeafNode(grammarAccess.getProofStepsAccess().getEpsilonEpsilonKeyword_1_0(), "epsilon"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getProofStepsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "epsilon", lv_epsilon_3_0, "epsilon", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStatementRule(), currentNode); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getStatementAccess().getStatementAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getStatementAccess().getStatementAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getIdNumeralParserRuleCall_1_0(), currentNode); 
	    }
		lv_id_1_0=ruleNumeral		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"id",
	        		lv_id_1_0, 
	        		"Numeral", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'.' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getFullStopKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getStatementTextParserRuleCall_3_0(), currentNode); 
	    }
		lv_statement_3_0=ruleText		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"statement",
	        		lv_statement_3_0, 
	        		"Text", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getLeftParenthesisKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStatementAccess().getJustificationJustificationsParserRuleCall_5_0(), currentNode); 
	    }
		lv_justification_5_0=ruleJustifications		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatementRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"justification",
	        		lv_justification_5_0, 
	        		"Justifications", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getStatementAccess().getRightParenthesisKeyword_6(), null); 
    }
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


