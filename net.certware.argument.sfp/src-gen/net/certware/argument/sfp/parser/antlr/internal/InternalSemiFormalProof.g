/*
* generated by Xtext
*/
grammar InternalSemiFormalProof;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package net.certware.argument.sfp.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package net.certware.argument.sfp.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import net.certware.argument.sfp.services.SemiFormalProofGrammarAccess;

}

@parser::members {

 	private SemiFormalProofGrammarAccess grammarAccess;
 	
    public InternalSemiFormalProofParser(TokenStream input, SemiFormalProofGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Proof";	
   	}
   	
   	@Override
   	protected SemiFormalProofGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProof
entryRuleProof returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProofRule()); }
	 iv_ruleProof=ruleProof 
	 { $current=$iv_ruleProof.current; } 
	 EOF 
;

// Rule Proof
ruleProof returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Theorem' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProofAccess().getTheoremKeyword_0());
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getProofAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProofAccess().getTitleTextParserRuleCall_2_0()); 
	    }
		lv_title_2_0=ruleText		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProofRule());
	        }
       		set(
       			$current, 
       			"title",
        		lv_title_2_0, 
        		"Text");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getProofAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProofAccess().getJustificationsJustificationsParserRuleCall_4_0()); 
	    }
		lv_justifications_4_0=ruleJustifications		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProofRule());
	        }
       		set(
       			$current, 
       			"justifications",
        		lv_justifications_4_0, 
        		"Justifications");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getProofAccess().getRightParenthesisKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProofAccess().getProofStepsProofStepsParserRuleCall_6_0()); 
	    }
		lv_proofSteps_6_0=ruleProofSteps		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProofRule());
	        }
       		set(
       			$current, 
       			"proofSteps",
        		lv_proofSteps_6_0, 
        		"ProofSteps");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleText
entryRuleText returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTextRule()); } 
	 iv_ruleText=ruleText 
	 { $current=$iv_ruleText.current.getText(); }  
	 EOF 
;

// Rule Text
ruleText returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getTextAccess().getSTRINGTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleJustifications
entryRuleJustifications returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJustificationsRule()); }
	 iv_ruleJustifications=ruleJustifications 
	 { $current=$iv_ruleJustifications.current; } 
	 EOF 
;

// Rule Justifications
ruleJustifications returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getJustificationsAccess().getJustificationsAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getJustificationsAccess().getJustificationsJustificationParserRuleCall_1_0_0()); 
	    }
		lv_justifications_1_0=ruleJustification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJustificationsRule());
	        }
       		add(
       			$current, 
       			"justifications",
        		lv_justifications_1_0, 
        		"Justification");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getJustificationsAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJustificationsAccess().getJustificationsJustificationParserRuleCall_1_1_1_0()); 
	    }
		lv_justifications_3_0=ruleJustification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJustificationsRule());
	        }
       		add(
       			$current, 
       			"justifications",
        		lv_justifications_3_0, 
        		"Justification");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleJustification
entryRuleJustification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJustificationRule()); }
	 iv_ruleJustification=ruleJustification 
	 { $current=$iv_ruleJustification.current; } 
	 EOF 
;

// Rule Justification
ruleJustification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getJustificationAccess().getJustificationAction_0_0(),
            $current);
    }
)(
(
		lv_hypothesis_1_0=	'hypothesis' 
    {
        newLeafNode(lv_hypothesis_1_0, grammarAccess.getJustificationAccess().getHypothesisHypothesisKeyword_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJustificationRule());
	        }
       		setWithLastConsumed($current, "hypothesis", true, "hypothesis");
	    }

)
))
    |(
(
		lv_epsilon_2_0=	'epsilon' 
    {
        newLeafNode(lv_epsilon_2_0, grammarAccess.getJustificationAccess().getEpsilonEpsilonKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getJustificationRule());
	        }
       		setWithLastConsumed($current, "epsilon", true, "epsilon");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getJustificationAccess().getNumeralNumeralParserRuleCall_2_0()); 
	    }
		lv_numeral_3_0=ruleNumeral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJustificationRule());
	        }
       		set(
       			$current, 
       			"numeral",
        		lv_numeral_3_0, 
        		"Numeral");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getJustificationAccess().getAssertionQuotedAssertionParserRuleCall_3_0()); 
	    }
		lv_assertion_4_0=ruleQuotedAssertion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJustificationRule());
	        }
       		set(
       			$current, 
       			"assertion",
        		lv_assertion_4_0, 
        		"QuotedAssertion");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getJustificationAccess().getEntailmentEntailmentParserRuleCall_4_0()); 
	    }
		lv_entailment_5_0=ruleEntailment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJustificationRule());
	        }
       		set(
       			$current, 
       			"entailment",
        		lv_entailment_5_0, 
        		"Entailment");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleQuotedAssertion
entryRuleQuotedAssertion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQuotedAssertionRule()); }
	 iv_ruleQuotedAssertion=ruleQuotedAssertion 
	 { $current=$iv_ruleQuotedAssertion.current; } 
	 EOF 
;

// Rule QuotedAssertion
ruleQuotedAssertion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getQuotedAssertionAccess().getQuotedAssertionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getQuotedAssertionAccess().getTextTextParserRuleCall_1_0()); 
	    }
		lv_text_1_0=ruleText		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQuotedAssertionRule());
	        }
       		set(
       			$current, 
       			"text",
        		lv_text_1_0, 
        		"Text");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEntailment
entryRuleEntailment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEntailmentRule()); }
	 iv_ruleEntailment=ruleEntailment 
	 { $current=$iv_ruleEntailment.current; } 
	 EOF 
;

// Rule Entailment
ruleEntailment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getEntailmentAccess().getEntailmentAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEntailmentAccess().getHeadConjunctionParserRuleCall_1_0()); 
	    }
		lv_head_1_0=ruleConjunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEntailmentRule());
	        }
       		set(
       			$current, 
       			"head",
        		lv_head_1_0, 
        		"Conjunction");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='->' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEntailmentAccess().getHyphenMinusGreaterThanSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEntailmentAccess().getTailNumeralParserRuleCall_3_0()); 
	    }
		lv_tail_3_0=ruleNumeral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEntailmentRule());
	        }
       		set(
       			$current, 
       			"tail",
        		lv_tail_3_0, 
        		"Numeral");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleConjunction
entryRuleConjunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConjunctionRule()); }
	 iv_ruleConjunction=ruleConjunction 
	 { $current=$iv_ruleConjunction.current; } 
	 EOF 
;

// Rule Conjunction
ruleConjunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getConjunctionAccess().getConjunctionAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConjunctionAccess().getLhsNumeralParserRuleCall_0_1_0()); 
	    }
		lv_lhs_1_0=ruleNumeral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConjunctionRule());
	        }
       		set(
       			$current, 
       			"lhs",
        		lv_lhs_1_0, 
        		"Numeral");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='^' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConjunctionAccess().getCircumflexAccentKeyword_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConjunctionAccess().getRhsConjunctionParserRuleCall_0_3_0()); 
	    }
		lv_rhs_3_0=ruleConjunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConjunctionRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_3_0, 
        		"Conjunction");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getConjunctionAccess().getLhsNumeralParserRuleCall_1_0()); 
	    }
		lv_lhs_4_0=ruleNumeral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConjunctionRule());
	        }
       		set(
       			$current, 
       			"lhs",
        		lv_lhs_4_0, 
        		"Numeral");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNumeral
entryRuleNumeral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumeralRule()); } 
	 iv_ruleNumeral=ruleNumeral 
	 { $current=$iv_ruleNumeral.current.getText(); }  
	 EOF 
;

// Rule Numeral
ruleNumeral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getNumeralAccess().getINTTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleProofSteps
entryRuleProofSteps returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProofStepsRule()); }
	 iv_ruleProofSteps=ruleProofSteps 
	 { $current=$iv_ruleProofSteps.current; } 
	 EOF 
;

// Rule ProofSteps
ruleProofSteps returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getProofStepsAccess().getProofStepsAction_0_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getProofStepsAccess().getStatementsStatementParserRuleCall_0_1_0_0()); 
	    }
		lv_statements_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProofStepsRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_1_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getProofStepsAccess().getStatementsStatementParserRuleCall_0_1_1_0()); 
	    }
		lv_statements_2_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProofStepsRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_2_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?)
    |(
(
		lv_epsilon_3_0=	'epsilon' 
    {
        newLeafNode(lv_epsilon_3_0, grammarAccess.getProofStepsAccess().getEpsilonEpsilonKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProofStepsRule());
	        }
       		setWithLastConsumed($current, "epsilon", true, "epsilon");
	    }

)
))
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatementAccess().getStatementAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getIdNumeralParserRuleCall_1_0()); 
	    }
		lv_id_1_0=ruleNumeral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_1_0, 
        		"Numeral");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStatementAccess().getFullStopKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getStatementTextParserRuleCall_3_0()); 
	    }
		lv_statement_3_0=ruleText		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_3_0, 
        		"Text");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStatementAccess().getLeftParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getJustificationJustificationsParserRuleCall_5_0()); 
	    }
		lv_justification_5_0=ruleJustifications		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"justification",
        		lv_justification_5_0, 
        		"Justifications");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStatementAccess().getRightParenthesisKeyword_6());
    }
(	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getStatementAccess().getLeftCurlyBracketKeyword_7_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getValidationValidationParserRuleCall_7_1_0()); 
	    }
		lv_validation_8_0=ruleValidation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"validation",
        		lv_validation_8_0, 
        		"Validation");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getStatementAccess().getRightCurlyBracketKeyword_7_2());
    }
)?)
;





// Entry rule entryRuleValidation
entryRuleValidation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValidationRule()); }
	 iv_ruleValidation=ruleValidation 
	 { $current=$iv_ruleValidation.current; } 
	 EOF 
;

// Rule Validation
ruleValidation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getValidationAccess().getValidationAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getValidationAccess().getAuthorTextParserRuleCall_1_0()); 
	    }
		lv_author_1_0=ruleText		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValidationRule());
	        }
       		set(
       			$current, 
       			"author",
        		lv_author_1_0, 
        		"Text");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getValidationAccess().getTimeStampTextParserRuleCall_2_0()); 
	    }
		lv_timeStamp_2_0=ruleText		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValidationRule());
	        }
       		set(
       			$current, 
       			"timeStamp",
        		lv_timeStamp_2_0, 
        		"Text");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getValidationAccess().getStateValidationKindEnumRuleCall_3_0()); 
	    }
		lv_state_3_0=ruleValidationKind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValidationRule());
	        }
       		set(
       			$current, 
       			"state",
        		lv_state_3_0, 
        		"ValidationKind");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Rule ValidationKind
ruleValidationKind returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='unknown' 
	{
        $current = grammarAccess.getValidationKindAccess().getUNKNOWNEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getValidationKindAccess().getUNKNOWNEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='valid' 
	{
        $current = grammarAccess.getValidationKindAccess().getVALIDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getValidationKindAccess().getVALIDEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='invalid' 
	{
        $current = grammarAccess.getValidationKindAccess().getINVALIDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getValidationKindAccess().getINVALIDEnumLiteralDeclaration_2()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


