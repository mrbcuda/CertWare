/*
* generated by Xtext
*/

package net.certware.argument.sfp.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SemiFormalProofGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProofElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Proof");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTheoremKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTitleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTitleTextParserRuleCall_2_0 = (RuleCall)cTitleAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cJustificationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cJustificationsJustificationsParserRuleCall_4_0 = (RuleCall)cJustificationsAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cProofStepsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cProofStepsProofStepsParserRuleCall_6_0 = (RuleCall)cProofStepsAssignment_6.eContents().get(0);
		
		//Proof:
		//	"Theorem" ":" title=Text "(" justifications=Justifications ")" proofSteps=ProofSteps;
		public ParserRule getRule() { return rule; }

		//"Theorem" ":" title=Text "(" justifications=Justifications ")" proofSteps=ProofSteps
		public Group getGroup() { return cGroup; }

		//"Theorem"
		public Keyword getTheoremKeyword_0() { return cTheoremKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//title=Text
		public Assignment getTitleAssignment_2() { return cTitleAssignment_2; }

		//Text
		public RuleCall getTitleTextParserRuleCall_2_0() { return cTitleTextParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//justifications=Justifications
		public Assignment getJustificationsAssignment_4() { return cJustificationsAssignment_4; }

		//Justifications
		public RuleCall getJustificationsJustificationsParserRuleCall_4_0() { return cJustificationsJustificationsParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//proofSteps=ProofSteps
		public Assignment getProofStepsAssignment_6() { return cProofStepsAssignment_6; }

		//ProofSteps
		public RuleCall getProofStepsProofStepsParserRuleCall_6_0() { return cProofStepsProofStepsParserRuleCall_6_0; }
	}

	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Text");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Text returns ecore::EString:
		//	STRING;
		public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class JustificationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Justifications");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJustificationsAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cJustificationsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cJustificationsJustificationParserRuleCall_1_0_0 = (RuleCall)cJustificationsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cJustificationsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cJustificationsJustificationParserRuleCall_1_1_1_0 = (RuleCall)cJustificationsAssignment_1_1_1.eContents().get(0);
		
		//Justifications:
		//	{Justifications} (justifications+=Justification ("," justifications+=Justification)*)?;
		public ParserRule getRule() { return rule; }

		//{Justifications} (justifications+=Justification ("," justifications+=Justification)*)?
		public Group getGroup() { return cGroup; }

		//{Justifications}
		public Action getJustificationsAction_0() { return cJustificationsAction_0; }

		//(justifications+=Justification ("," justifications+=Justification)*)?
		public Group getGroup_1() { return cGroup_1; }

		//justifications+=Justification
		public Assignment getJustificationsAssignment_1_0() { return cJustificationsAssignment_1_0; }

		//Justification
		public RuleCall getJustificationsJustificationParserRuleCall_1_0_0() { return cJustificationsJustificationParserRuleCall_1_0_0; }

		//("," justifications+=Justification)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//justifications+=Justification
		public Assignment getJustificationsAssignment_1_1_1() { return cJustificationsAssignment_1_1_1; }

		//Justification
		public RuleCall getJustificationsJustificationParserRuleCall_1_1_1_0() { return cJustificationsJustificationParserRuleCall_1_1_1_0; }
	}

	public class JustificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Justification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cJustificationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cHypothesisAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cHypothesisHypothesisKeyword_0_1_0 = (Keyword)cHypothesisAssignment_0_1.eContents().get(0);
		private final Assignment cEpsilonAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cEpsilonEpsilonKeyword_1_0 = (Keyword)cEpsilonAssignment_1.eContents().get(0);
		private final Assignment cNumeralAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNumeralNumeralParserRuleCall_2_0 = (RuleCall)cNumeralAssignment_2.eContents().get(0);
		private final Assignment cAssertionAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cAssertionQuotedAssertionParserRuleCall_3_0 = (RuleCall)cAssertionAssignment_3.eContents().get(0);
		private final Assignment cEntailmentAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cEntailmentEntailmentParserRuleCall_4_0 = (RuleCall)cEntailmentAssignment_4.eContents().get(0);
		
		//Justification:
		//	{Justification} hypothesis?="hypothesis" | epsilon?="epsilon" | numeral=Numeral | assertion=QuotedAssertion |
		//	entailment=Entailment;
		public ParserRule getRule() { return rule; }

		//{Justification} hypothesis?="hypothesis" | epsilon?="epsilon" | numeral=Numeral | assertion=QuotedAssertion |
		//entailment=Entailment
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Justification} hypothesis?="hypothesis"
		public Group getGroup_0() { return cGroup_0; }

		//{Justification}
		public Action getJustificationAction_0_0() { return cJustificationAction_0_0; }

		//hypothesis?="hypothesis"
		public Assignment getHypothesisAssignment_0_1() { return cHypothesisAssignment_0_1; }

		//"hypothesis"
		public Keyword getHypothesisHypothesisKeyword_0_1_0() { return cHypothesisHypothesisKeyword_0_1_0; }

		//epsilon?="epsilon"
		public Assignment getEpsilonAssignment_1() { return cEpsilonAssignment_1; }

		//"epsilon"
		public Keyword getEpsilonEpsilonKeyword_1_0() { return cEpsilonEpsilonKeyword_1_0; }

		//numeral=Numeral
		public Assignment getNumeralAssignment_2() { return cNumeralAssignment_2; }

		//Numeral
		public RuleCall getNumeralNumeralParserRuleCall_2_0() { return cNumeralNumeralParserRuleCall_2_0; }

		//assertion=QuotedAssertion
		public Assignment getAssertionAssignment_3() { return cAssertionAssignment_3; }

		//QuotedAssertion
		public RuleCall getAssertionQuotedAssertionParserRuleCall_3_0() { return cAssertionQuotedAssertionParserRuleCall_3_0; }

		//entailment=Entailment
		public Assignment getEntailmentAssignment_4() { return cEntailmentAssignment_4; }

		//Entailment
		public RuleCall getEntailmentEntailmentParserRuleCall_4_0() { return cEntailmentEntailmentParserRuleCall_4_0; }
	}

	public class QuotedAssertionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QuotedAssertion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQuotedAssertionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextTextParserRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		
		//QuotedAssertion:
		//	{QuotedAssertion} text=Text;
		public ParserRule getRule() { return rule; }

		//{QuotedAssertion} text=Text
		public Group getGroup() { return cGroup; }

		//{QuotedAssertion}
		public Action getQuotedAssertionAction_0() { return cQuotedAssertionAction_0; }

		//text=Text
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }

		//Text
		public RuleCall getTextTextParserRuleCall_1_0() { return cTextTextParserRuleCall_1_0; }
	}

	public class EntailmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entailment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntailmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cHeadAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHeadConjunctionParserRuleCall_1_0 = (RuleCall)cHeadAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTailAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTailNumeralParserRuleCall_3_0 = (RuleCall)cTailAssignment_3.eContents().get(0);
		
		//Entailment:
		//	{Entailment} head=Conjunction "->" tail=Numeral;
		public ParserRule getRule() { return rule; }

		//{Entailment} head=Conjunction "->" tail=Numeral
		public Group getGroup() { return cGroup; }

		//{Entailment}
		public Action getEntailmentAction_0() { return cEntailmentAction_0; }

		//head=Conjunction
		public Assignment getHeadAssignment_1() { return cHeadAssignment_1; }

		//Conjunction
		public RuleCall getHeadConjunctionParserRuleCall_1_0() { return cHeadConjunctionParserRuleCall_1_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }

		//tail=Numeral
		public Assignment getTailAssignment_3() { return cTailAssignment_3; }

		//Numeral
		public RuleCall getTailNumeralParserRuleCall_3_0() { return cTailNumeralParserRuleCall_3_0; }
	}

	public class ConjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Conjunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cConjunctionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cLhsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLhsNumeralParserRuleCall_0_1_0 = (RuleCall)cLhsAssignment_0_1.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cRhsAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cRhsConjunctionParserRuleCall_0_3_0 = (RuleCall)cRhsAssignment_0_3.eContents().get(0);
		private final Assignment cLhsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cLhsNumeralParserRuleCall_1_0 = (RuleCall)cLhsAssignment_1.eContents().get(0);
		
		//Conjunction:
		//	{Conjunction} lhs=Numeral "^" rhs=Conjunction | lhs=Numeral;
		public ParserRule getRule() { return rule; }

		//{Conjunction} lhs=Numeral "^" rhs=Conjunction | lhs=Numeral
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Conjunction} lhs=Numeral "^" rhs=Conjunction
		public Group getGroup_0() { return cGroup_0; }

		//{Conjunction}
		public Action getConjunctionAction_0_0() { return cConjunctionAction_0_0; }

		//lhs=Numeral
		public Assignment getLhsAssignment_0_1() { return cLhsAssignment_0_1; }

		//Numeral
		public RuleCall getLhsNumeralParserRuleCall_0_1_0() { return cLhsNumeralParserRuleCall_0_1_0; }

		//"^"
		public Keyword getCircumflexAccentKeyword_0_2() { return cCircumflexAccentKeyword_0_2; }

		//rhs=Conjunction
		public Assignment getRhsAssignment_0_3() { return cRhsAssignment_0_3; }

		//Conjunction
		public RuleCall getRhsConjunctionParserRuleCall_0_3_0() { return cRhsConjunctionParserRuleCall_0_3_0; }

		//lhs=Numeral
		public Assignment getLhsAssignment_1() { return cLhsAssignment_1; }

		//Numeral
		public RuleCall getLhsNumeralParserRuleCall_1_0() { return cLhsNumeralParserRuleCall_1_0; }
	}

	public class NumeralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Numeral");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Numeral returns ecore::EString:
		//	INT;
		public ParserRule getRule() { return rule; }

		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}

	public class ProofStepsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProofSteps");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cProofStepsAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cStatementsAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cStatementsStatementParserRuleCall_0_1_0_0 = (RuleCall)cStatementsAssignment_0_1_0.eContents().get(0);
		private final Assignment cStatementsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0_1_1_0 = (RuleCall)cStatementsAssignment_0_1_1.eContents().get(0);
		private final Assignment cEpsilonAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cEpsilonEpsilonKeyword_1_0 = (Keyword)cEpsilonAssignment_1.eContents().get(0);
		
		//ProofSteps:
		//	{ProofSteps} (statements+=Statement statements+=Statement*)? | epsilon?="epsilon";
		public ParserRule getRule() { return rule; }

		//{ProofSteps} (statements+=Statement statements+=Statement*)? | epsilon?="epsilon"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ProofSteps} (statements+=Statement statements+=Statement*)?
		public Group getGroup_0() { return cGroup_0; }

		//{ProofSteps}
		public Action getProofStepsAction_0_0() { return cProofStepsAction_0_0; }

		//(statements+=Statement statements+=Statement*)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//statements+=Statement
		public Assignment getStatementsAssignment_0_1_0() { return cStatementsAssignment_0_1_0; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0_1_0_0() { return cStatementsStatementParserRuleCall_0_1_0_0; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_0_1_1() { return cStatementsAssignment_0_1_1; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0_1_1_0() { return cStatementsStatementParserRuleCall_0_1_1_0; }

		//epsilon?="epsilon"
		public Assignment getEpsilonAssignment_1() { return cEpsilonAssignment_1; }

		//"epsilon"
		public Keyword getEpsilonEpsilonKeyword_1_0() { return cEpsilonEpsilonKeyword_1_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdNumeralParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementTextParserRuleCall_3_0 = (RuleCall)cStatementAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cJustificationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cJustificationJustificationsParserRuleCall_5_0 = (RuleCall)cJustificationAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cValidationAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cValidationValidationParserRuleCall_7_1_0 = (RuleCall)cValidationAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		
		//Statement:
		//	{Statement} id=Numeral "." statement=Text "(" justification=Justifications ")" ("{" validation=Validation "}")?;
		public ParserRule getRule() { return rule; }

		//{Statement} id=Numeral "." statement=Text "(" justification=Justifications ")" ("{" validation=Validation "}")?
		public Group getGroup() { return cGroup; }

		//{Statement}
		public Action getStatementAction_0() { return cStatementAction_0; }

		//id=Numeral
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//Numeral
		public RuleCall getIdNumeralParserRuleCall_1_0() { return cIdNumeralParserRuleCall_1_0; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//statement=Text
		public Assignment getStatementAssignment_3() { return cStatementAssignment_3; }

		//Text
		public RuleCall getStatementTextParserRuleCall_3_0() { return cStatementTextParserRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//justification=Justifications
		public Assignment getJustificationAssignment_5() { return cJustificationAssignment_5; }

		//Justifications
		public RuleCall getJustificationJustificationsParserRuleCall_5_0() { return cJustificationJustificationsParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//("{" validation=Validation "}")?
		public Group getGroup_7() { return cGroup_7; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_0() { return cLeftCurlyBracketKeyword_7_0; }

		//validation=Validation
		public Assignment getValidationAssignment_7_1() { return cValidationAssignment_7_1; }

		//Validation
		public RuleCall getValidationValidationParserRuleCall_7_1_0() { return cValidationValidationParserRuleCall_7_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_2() { return cRightCurlyBracketKeyword_7_2; }
	}

	public class ValidationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Validation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cValidationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAuthorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAuthorTextParserRuleCall_1_0 = (RuleCall)cAuthorAssignment_1.eContents().get(0);
		private final Assignment cTimeStampAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimeStampTextParserRuleCall_2_0 = (RuleCall)cTimeStampAssignment_2.eContents().get(0);
		private final Assignment cStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStateValidationKindEnumRuleCall_3_0 = (RuleCall)cStateAssignment_3.eContents().get(0);
		
		//Validation:
		//	{Validation} author=Text timeStamp=Text? state=ValidationKind;
		public ParserRule getRule() { return rule; }

		//{Validation} author=Text timeStamp=Text? state=ValidationKind
		public Group getGroup() { return cGroup; }

		//{Validation}
		public Action getValidationAction_0() { return cValidationAction_0; }

		//author=Text
		public Assignment getAuthorAssignment_1() { return cAuthorAssignment_1; }

		//Text
		public RuleCall getAuthorTextParserRuleCall_1_0() { return cAuthorTextParserRuleCall_1_0; }

		//timeStamp=Text?
		public Assignment getTimeStampAssignment_2() { return cTimeStampAssignment_2; }

		//Text
		public RuleCall getTimeStampTextParserRuleCall_2_0() { return cTimeStampTextParserRuleCall_2_0; }

		//state=ValidationKind
		public Assignment getStateAssignment_3() { return cStateAssignment_3; }

		//ValidationKind
		public RuleCall getStateValidationKindEnumRuleCall_3_0() { return cStateValidationKindEnumRuleCall_3_0; }
	}
	
	
	public class ValidationKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ValidationKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUNKNOWNEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUNKNOWNUnknownKeyword_0_0 = (Keyword)cUNKNOWNEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVALIDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVALIDValidKeyword_1_0 = (Keyword)cVALIDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cINVALIDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cINVALIDInvalidKeyword_2_0 = (Keyword)cINVALIDEnumLiteralDeclaration_2.eContents().get(0);
		
		//// enumeration ordered so that value 0 is unknown
		//// end enum ValidationKind:
		//	UNKNOWN="unknown" | VALID="valid" | INVALID="invalid";
		public EnumRule getRule() { return rule; }

		//UNKNOWN="unknown" | VALID="valid" | INVALID="invalid"
		public Alternatives getAlternatives() { return cAlternatives; }

		//UNKNOWN="unknown"
		public EnumLiteralDeclaration getUNKNOWNEnumLiteralDeclaration_0() { return cUNKNOWNEnumLiteralDeclaration_0; }

		//"unknown"
		public Keyword getUNKNOWNUnknownKeyword_0_0() { return cUNKNOWNUnknownKeyword_0_0; }

		//VALID="valid"
		public EnumLiteralDeclaration getVALIDEnumLiteralDeclaration_1() { return cVALIDEnumLiteralDeclaration_1; }

		//"valid"
		public Keyword getVALIDValidKeyword_1_0() { return cVALIDValidKeyword_1_0; }

		//INVALID="invalid"
		public EnumLiteralDeclaration getINVALIDEnumLiteralDeclaration_2() { return cINVALIDEnumLiteralDeclaration_2; }

		//"invalid"
		public Keyword getINVALIDInvalidKeyword_2_0() { return cINVALIDInvalidKeyword_2_0; }
	}
	
	private ProofElements pProof;
	private TextElements pText;
	private JustificationsElements pJustifications;
	private JustificationElements pJustification;
	private QuotedAssertionElements pQuotedAssertion;
	private EntailmentElements pEntailment;
	private ConjunctionElements pConjunction;
	private NumeralElements pNumeral;
	private ProofStepsElements pProofSteps;
	private StatementElements pStatement;
	private ValidationElements pValidation;
	private ValidationKindElements unknownRuleValidationKind;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SemiFormalProofGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Proof:
	//	"Theorem" ":" title=Text "(" justifications=Justifications ")" proofSteps=ProofSteps;
	public ProofElements getProofAccess() {
		return (pProof != null) ? pProof : (pProof = new ProofElements());
	}
	
	public ParserRule getProofRule() {
		return getProofAccess().getRule();
	}

	//Text returns ecore::EString:
	//	STRING;
	public TextElements getTextAccess() {
		return (pText != null) ? pText : (pText = new TextElements());
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}

	//Justifications:
	//	{Justifications} (justifications+=Justification ("," justifications+=Justification)*)?;
	public JustificationsElements getJustificationsAccess() {
		return (pJustifications != null) ? pJustifications : (pJustifications = new JustificationsElements());
	}
	
	public ParserRule getJustificationsRule() {
		return getJustificationsAccess().getRule();
	}

	//Justification:
	//	{Justification} hypothesis?="hypothesis" | epsilon?="epsilon" | numeral=Numeral | assertion=QuotedAssertion |
	//	entailment=Entailment;
	public JustificationElements getJustificationAccess() {
		return (pJustification != null) ? pJustification : (pJustification = new JustificationElements());
	}
	
	public ParserRule getJustificationRule() {
		return getJustificationAccess().getRule();
	}

	//QuotedAssertion:
	//	{QuotedAssertion} text=Text;
	public QuotedAssertionElements getQuotedAssertionAccess() {
		return (pQuotedAssertion != null) ? pQuotedAssertion : (pQuotedAssertion = new QuotedAssertionElements());
	}
	
	public ParserRule getQuotedAssertionRule() {
		return getQuotedAssertionAccess().getRule();
	}

	//Entailment:
	//	{Entailment} head=Conjunction "->" tail=Numeral;
	public EntailmentElements getEntailmentAccess() {
		return (pEntailment != null) ? pEntailment : (pEntailment = new EntailmentElements());
	}
	
	public ParserRule getEntailmentRule() {
		return getEntailmentAccess().getRule();
	}

	//Conjunction:
	//	{Conjunction} lhs=Numeral "^" rhs=Conjunction | lhs=Numeral;
	public ConjunctionElements getConjunctionAccess() {
		return (pConjunction != null) ? pConjunction : (pConjunction = new ConjunctionElements());
	}
	
	public ParserRule getConjunctionRule() {
		return getConjunctionAccess().getRule();
	}

	//Numeral returns ecore::EString:
	//	INT;
	public NumeralElements getNumeralAccess() {
		return (pNumeral != null) ? pNumeral : (pNumeral = new NumeralElements());
	}
	
	public ParserRule getNumeralRule() {
		return getNumeralAccess().getRule();
	}

	//ProofSteps:
	//	{ProofSteps} (statements+=Statement statements+=Statement*)? | epsilon?="epsilon";
	public ProofStepsElements getProofStepsAccess() {
		return (pProofSteps != null) ? pProofSteps : (pProofSteps = new ProofStepsElements());
	}
	
	public ParserRule getProofStepsRule() {
		return getProofStepsAccess().getRule();
	}

	//Statement:
	//	{Statement} id=Numeral "." statement=Text "(" justification=Justifications ")" ("{" validation=Validation "}")?;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//Validation:
	//	{Validation} author=Text timeStamp=Text? state=ValidationKind;
	public ValidationElements getValidationAccess() {
		return (pValidation != null) ? pValidation : (pValidation = new ValidationElements());
	}
	
	public ParserRule getValidationRule() {
		return getValidationAccess().getRule();
	}

	//// enumeration ordered so that value 0 is unknown
	//// end enum ValidationKind:
	//	UNKNOWN="unknown" | VALID="valid" | INVALID="invalid";
	public ValidationKindElements getValidationKindAccess() {
		return (unknownRuleValidationKind != null) ? unknownRuleValidationKind : (unknownRuleValidationKind = new ValidationKindElements());
	}
	
	public EnumRule getValidationKindRule() {
		return getValidationKindAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
