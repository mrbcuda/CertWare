/**
 * Copyright (c) 2011 Kestrel Technology LLC
 */
package net.certware.measurement.sco.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.certware.measurement.sco.util.ScoAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemColorProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITableItemColorProvider;
import org.eclipse.emf.edit.provider.ITableItemLabelProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ScoItemProviderAdapterFactory extends ScoAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ScoItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
		supportedTypes.add(ITableItemLabelProvider.class);
		supportedTypes.add(ITableItemColorProvider.class);
		supportedTypes.add(IItemColorProvider.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.measurement.sco.TotalChangeOrders} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TotalChangeOrdersItemProvider totalChangeOrdersItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.measurement.sco.TotalChangeOrders}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTotalChangeOrdersAdapter() {
		if (totalChangeOrdersItemProvider == null) {
			totalChangeOrdersItemProvider = new TotalChangeOrdersItemProvider(this);
		}

		return totalChangeOrdersItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.measurement.sco.CriticalDefectChangeOrders} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CriticalDefectChangeOrdersItemProvider criticalDefectChangeOrdersItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.measurement.sco.CriticalDefectChangeOrders}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCriticalDefectChangeOrdersAdapter() {
		if (criticalDefectChangeOrdersItemProvider == null) {
			criticalDefectChangeOrdersItemProvider = new CriticalDefectChangeOrdersItemProvider(this);
		}

		return criticalDefectChangeOrdersItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.measurement.sco.NormalDefectChangeOrders} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NormalDefectChangeOrdersItemProvider normalDefectChangeOrdersItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.measurement.sco.NormalDefectChangeOrders}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNormalDefectChangeOrdersAdapter() {
		if (normalDefectChangeOrdersItemProvider == null) {
			normalDefectChangeOrdersItemProvider = new NormalDefectChangeOrdersItemProvider(this);
		}

		return normalDefectChangeOrdersItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.measurement.sco.ImprovementChangeOrders} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImprovementChangeOrdersItemProvider improvementChangeOrdersItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.measurement.sco.ImprovementChangeOrders}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImprovementChangeOrdersAdapter() {
		if (improvementChangeOrdersItemProvider == null) {
			improvementChangeOrdersItemProvider = new ImprovementChangeOrdersItemProvider(this);
		}

		return improvementChangeOrdersItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.measurement.sco.NewFeatureChangeOrders} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NewFeatureChangeOrdersItemProvider newFeatureChangeOrdersItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.measurement.sco.NewFeatureChangeOrders}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNewFeatureChangeOrdersAdapter() {
		if (newFeatureChangeOrdersItemProvider == null) {
			newFeatureChangeOrdersItemProvider = new NewFeatureChangeOrdersItemProvider(this);
		}

		return newFeatureChangeOrdersItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.measurement.sco.ArtifactIdentifier} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArtifactIdentifierItemProvider artifactIdentifierItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.measurement.sco.ArtifactIdentifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArtifactIdentifierAdapter() {
		if (artifactIdentifierItemProvider == null) {
			artifactIdentifierItemProvider = new ArtifactIdentifierItemProvider(this);
		}

		return artifactIdentifierItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.measurement.sco.ArtifactList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArtifactListItemProvider artifactListItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.measurement.sco.ArtifactList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArtifactListAdapter() {
		if (artifactListItemProvider == null) {
			artifactListItemProvider = new ArtifactListItemProvider(this);
		}

		return artifactListItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (totalChangeOrdersItemProvider != null) totalChangeOrdersItemProvider.dispose();
		if (criticalDefectChangeOrdersItemProvider != null) criticalDefectChangeOrdersItemProvider.dispose();
		if (normalDefectChangeOrdersItemProvider != null) normalDefectChangeOrdersItemProvider.dispose();
		if (improvementChangeOrdersItemProvider != null) improvementChangeOrdersItemProvider.dispose();
		if (newFeatureChangeOrdersItemProvider != null) newFeatureChangeOrdersItemProvider.dispose();
		if (artifactIdentifierItemProvider != null) artifactIdentifierItemProvider.dispose();
		if (artifactListItemProvider != null) artifactListItemProvider.dispose();
	}

}
