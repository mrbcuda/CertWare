/*
* generated by Xtext
*/
grammar InternalNetDSL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package net.certware.evidence.hugin.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package net.certware.evidence.hugin.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import net.certware.evidence.hugin.services.NetDSLGrammarAccess;

}

@parser::members {

 	private NetDSLGrammarAccess grammarAccess;
 	
    public InternalNetDSLParser(TokenStream input, IAstFactory factory, NetDSLGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("net/certware/evidence/hugin/parser/antlr/internal/InternalNetDSL.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected NetDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModelRule(), currentNode); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelAccess().getDomainDomainDefinitionParserRuleCall_0(), currentNode); 
	    }
		lv_domain_0_0=ruleDomainDefinition		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"domain",
	        		lv_domain_0_0, 
	        		"DomainDefinition", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?
;





// Entry rule entryRuleDOUBLE
entryRuleDOUBLE returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDOUBLERule(), currentNode); } 
	 iv_ruleDOUBLE=ruleDOUBLE 
	 { $current=$iv_ruleDOUBLE.current.getText(); }  
	 EOF 
;

// Rule DOUBLE
ruleDOUBLE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    createLeafNode(grammarAccess.getDOUBLEAccess().getINTTerminalRuleCall_0(), null); 
    }

	kw='.' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getDOUBLEAccess().getFullStopKeyword_1(), null); 
    }
(    this_EXT_INT_2=RULE_EXT_INT    {
		$current.merge(this_EXT_INT_2);
    }

    { 
    createLeafNode(grammarAccess.getDOUBLEAccess().getEXT_INTTerminalRuleCall_2_0(), null); 
    }

    |    this_INT_3=RULE_INT    {
		$current.merge(this_INT_3);
    }

    { 
    createLeafNode(grammarAccess.getDOUBLEAccess().getINTTerminalRuleCall_2_1(), null); 
    }
))
    ;





// Entry rule entryRuleInteger
entryRuleInteger returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getIntegerRule(), currentNode); }
	 iv_ruleInteger=ruleInteger 
	 { $current=$iv_ruleInteger.current; } 
	 EOF 
;

// Rule Integer
ruleInteger returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		lv_i_0_0=RULE_INT
		{
			createLeafNode(grammarAccess.getIntegerAccess().getIINTTerminalRuleCall_0(), "i"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getIntegerRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"i",
	        		lv_i_0_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
;





// Entry rule entryRuleDomainDefinition
entryRuleDomainDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDomainDefinitionRule(), currentNode); }
	 iv_ruleDomainDefinition=ruleDomainDefinition 
	 { $current=$iv_ruleDomainDefinition.current; } 
	 EOF 
;

// Rule DomainDefinition
ruleDomainDefinition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDomainDefinitionAccess().getHeaderDomainHeaderParserRuleCall_0_0(), currentNode); 
	    }
		lv_header_0_0=ruleDomainHeader		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDomainDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"header",
	        		lv_header_0_0, 
	        		"DomainHeader", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDomainDefinitionAccess().getElementsDomainElementParserRuleCall_1_0(), currentNode); 
	    }
		lv_elements_1_0=ruleDomainElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDomainDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"elements",
	        		lv_elements_1_0, 
	        		"DomainElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleDomainHeader
entryRuleDomainHeader returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDomainHeaderRule(), currentNode); }
	 iv_ruleDomainHeader=ruleDomainHeader 
	 { $current=$iv_ruleDomainHeader.current; } 
	 EOF 
;

// Rule DomainHeader
ruleDomainHeader returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getDomainHeaderAccess().getDomainHeaderAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getDomainHeaderAccess().getDomainHeaderAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'net' 
    {
        createLeafNode(grammarAccess.getDomainHeaderAccess().getNetKeyword_1(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getDomainHeaderAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getDomainHeaderAccess().getAttributesAttributeParserRuleCall_3_0(), currentNode); 
	    }
		lv_attributes_3_0=ruleAttribute		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getDomainHeaderRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"attributes",
	        		lv_attributes_3_0, 
	        		"Attribute", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getDomainHeaderAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleDomainElement
entryRuleDomainElement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDomainElementRule(), currentNode); }
	 iv_ruleDomainElement=ruleDomainElement 
	 { $current=$iv_ruleDomainElement.current; } 
	 EOF 
;

// Rule DomainElement
ruleDomainElement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getDomainElementAccess().getBasicNodeParserRuleCall_0(), currentNode); 
    }
    this_BasicNode_0=ruleBasicNode
    { 
        $current = $this_BasicNode_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDomainElementAccess().getPotentialParserRuleCall_1(), currentNode); 
    }
    this_Potential_1=rulePotential
    { 
        $current = $this_Potential_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDomainElementAccess().getClassDefinitionParserRuleCall_2(), currentNode); 
    }
    this_ClassDefinition_2=ruleClassDefinition
    { 
        $current = $this_ClassDefinition_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAttributeRule(), currentNode); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAttributeAccess().getStatesAttributeParserRuleCall_0(), currentNode); 
    }
    this_StatesAttribute_0=ruleStatesAttribute
    { 
        $current = $this_StatesAttribute_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAttributeAccess().getLabelAttributeParserRuleCall_1(), currentNode); 
    }
    this_LabelAttribute_1=ruleLabelAttribute
    { 
        $current = $this_LabelAttribute_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAttributeAccess().getPositionAttributeParserRuleCall_2(), currentNode); 
    }
    this_PositionAttribute_2=rulePositionAttribute
    { 
        $current = $this_PositionAttribute_2.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAttributeAccess().getSubtypeAttributeParserRuleCall_3(), currentNode); 
    }
    this_SubtypeAttribute_3=ruleSubtypeAttribute
    { 
        $current = $this_SubtypeAttribute_3.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAttributeAccess().getStateValuesAttributeParserRuleCall_4(), currentNode); 
    }
    this_StateValuesAttribute_4=ruleStateValuesAttribute
    { 
        $current = $this_StateValuesAttribute_4.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAttributeAccess().getApplicationAttributeParserRuleCall_5(), currentNode); 
    }
    this_ApplicationAttribute_5=ruleApplicationAttribute
    { 
        $current = $this_ApplicationAttribute_5.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getAttributeAccess().getNodeSizeAttributeParserRuleCall_6(), currentNode); 
    }
    this_NodeSizeAttribute_6=ruleNodeSizeAttribute
    { 
        $current = $this_NodeSizeAttribute_6.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleBasicNode
entryRuleBasicNode returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBasicNodeRule(), currentNode); }
	 iv_ruleBasicNode=ruleBasicNode 
	 { $current=$iv_ruleBasicNode.current; } 
	 EOF 
;

// Rule BasicNode
ruleBasicNode returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBasicNodeAccess().getKeywordBasicNodeKeywordParserRuleCall_0_0(), currentNode); 
	    }
		lv_keyword_0_0=ruleBasicNodeKeyword		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBasicNodeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"keyword",
	        		lv_keyword_0_0, 
	        		"BasicNodeKeyword", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_id_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getBasicNodeAccess().getIdIDTerminalRuleCall_1_0(), "id"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBasicNodeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"id",
	        		lv_id_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)?	'{' 
    {
        createLeafNode(grammarAccess.getBasicNodeAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getBasicNodeAccess().getAttributesAttributeParserRuleCall_3_0(), currentNode); 
	    }
		lv_attributes_3_0=ruleAttribute		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getBasicNodeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"attributes",
	        		lv_attributes_3_0, 
	        		"Attribute", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getBasicNodeAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleBasicNodeKeyword
entryRuleBasicNodeKeyword returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getBasicNodeKeywordRule(), currentNode); } 
	 iv_ruleBasicNodeKeyword=ruleBasicNodeKeyword 
	 { $current=$iv_ruleBasicNodeKeyword.current.getText(); }  
	 EOF 
;

// Rule BasicNodeKeyword
ruleBasicNodeKeyword returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(((
	kw='discrete' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getBasicNodeKeywordAccess().getDiscreteKeyword_0_0_0(), null); 
    }

    |
	kw='continuous' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getBasicNodeKeywordAccess().getContinuousKeyword_0_0_1(), null); 
    }
)?
	kw='node' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getBasicNodeKeywordAccess().getNodeKeyword_0_1(), null); 
    }
)
    |
	kw='decision' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getBasicNodeKeywordAccess().getDecisionKeyword_1(), null); 
    }

    |
	kw='utility' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getBasicNodeKeywordAccess().getUtilityKeyword_2(), null); 
    }

    |
	kw='function' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getBasicNodeKeywordAccess().getFunctionKeyword_3(), null); 
    }
)
    ;





// Entry rule entryRuleStatesAttribute
entryRuleStatesAttribute returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStatesAttributeRule(), currentNode); }
	 iv_ruleStatesAttribute=ruleStatesAttribute 
	 { $current=$iv_ruleStatesAttribute.current; } 
	 EOF 
;

// Rule StatesAttribute
ruleStatesAttribute returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getStatesAttributeAccess().getStatesAttributeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getStatesAttributeAccess().getStatesAttributeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'states' 
    {
        createLeafNode(grammarAccess.getStatesAttributeAccess().getStatesKeyword_1(), null); 
    }
	'=' 
    {
        createLeafNode(grammarAccess.getStatesAttributeAccess().getEqualsSignKeyword_2(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getStatesAttributeAccess().getLeftParenthesisKeyword_3(), null); 
    }
(
(
		lv_states_4_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getStatesAttributeAccess().getStatesSTRINGTerminalRuleCall_4_0(), "states"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStatesAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"states",
	        		lv_states_4_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)*	')' 
    {
        createLeafNode(grammarAccess.getStatesAttributeAccess().getRightParenthesisKeyword_5(), null); 
    }
	';' 
    {
        createLeafNode(grammarAccess.getStatesAttributeAccess().getSemicolonKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleLabelAttribute
entryRuleLabelAttribute returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLabelAttributeRule(), currentNode); }
	 iv_ruleLabelAttribute=ruleLabelAttribute 
	 { $current=$iv_ruleLabelAttribute.current; } 
	 EOF 
;

// Rule LabelAttribute
ruleLabelAttribute returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'label' 
    {
        createLeafNode(grammarAccess.getLabelAttributeAccess().getLabelKeyword_0(), null); 
    }
	'=' 
    {
        createLeafNode(grammarAccess.getLabelAttributeAccess().getEqualsSignKeyword_1(), null); 
    }
(
(
		lv_value_2_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getLabelAttributeAccess().getValueSTRINGTerminalRuleCall_2_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLabelAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_2_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getLabelAttributeAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRulePositionAttribute
entryRulePositionAttribute returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPositionAttributeRule(), currentNode); }
	 iv_rulePositionAttribute=rulePositionAttribute 
	 { $current=$iv_rulePositionAttribute.current; } 
	 EOF 
;

// Rule PositionAttribute
rulePositionAttribute returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'position' 
    {
        createLeafNode(grammarAccess.getPositionAttributeAccess().getPositionKeyword_0(), null); 
    }
	'=' 
    {
        createLeafNode(grammarAccess.getPositionAttributeAccess().getEqualsSignKeyword_1(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getPositionAttributeAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
    { 
        temp=factory.create(grammarAccess.getPositionAttributeAccess().getIntegerLiteralAction_3().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPositionAttributeAccess().getIntegerLiteralAction_3(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPositionAttributeAccess().getXIntegerParserRuleCall_4_0(), currentNode); 
	    }
		lv_x_4_0=ruleInteger		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPositionAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"x",
	        		lv_x_4_0, 
	        		"Integer", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPositionAttributeAccess().getYIntegerParserRuleCall_5_0(), currentNode); 
	    }
		lv_y_5_0=ruleInteger		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPositionAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"y",
	        		lv_y_5_0, 
	        		"Integer", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getPositionAttributeAccess().getRightParenthesisKeyword_6(), null); 
    }
	';' 
    {
        createLeafNode(grammarAccess.getPositionAttributeAccess().getSemicolonKeyword_7(), null); 
    }
)
;





// Entry rule entryRuleSubtypeAttribute
entryRuleSubtypeAttribute returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSubtypeAttributeRule(), currentNode); }
	 iv_ruleSubtypeAttribute=ruleSubtypeAttribute 
	 { $current=$iv_ruleSubtypeAttribute.current; } 
	 EOF 
;

// Rule SubtypeAttribute
ruleSubtypeAttribute returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'subtype' 
    {
        createLeafNode(grammarAccess.getSubtypeAttributeAccess().getSubtypeKeyword_0(), null); 
    }
	'=' 
    {
        createLeafNode(grammarAccess.getSubtypeAttributeAccess().getEqualsSignKeyword_1(), null); 
    }
(
(
(
		lv_subtype_2_1=	'label' 
    {
        createLeafNode(grammarAccess.getSubtypeAttributeAccess().getSubtypeLabelKeyword_2_0_0(), "subtype"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSubtypeAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "subtype", lv_subtype_2_1, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_subtype_2_2=	'boolean' 
    {
        createLeafNode(grammarAccess.getSubtypeAttributeAccess().getSubtypeBooleanKeyword_2_0_1(), "subtype"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSubtypeAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "subtype", lv_subtype_2_2, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_subtype_2_3=	'number' 
    {
        createLeafNode(grammarAccess.getSubtypeAttributeAccess().getSubtypeNumberKeyword_2_0_2(), "subtype"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSubtypeAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "subtype", lv_subtype_2_3, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

    |		lv_subtype_2_4=	'interval' 
    {
        createLeafNode(grammarAccess.getSubtypeAttributeAccess().getSubtypeIntervalKeyword_2_0_3(), "subtype"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSubtypeAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "subtype", lv_subtype_2_4, null, lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)

)
)	';' 
    {
        createLeafNode(grammarAccess.getSubtypeAttributeAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleStateValuesAttribute
entryRuleStateValuesAttribute returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStateValuesAttributeRule(), currentNode); }
	 iv_ruleStateValuesAttribute=ruleStateValuesAttribute 
	 { $current=$iv_ruleStateValuesAttribute.current; } 
	 EOF 
;

// Rule StateValuesAttribute
ruleStateValuesAttribute returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'state_values' 
    {
        createLeafNode(grammarAccess.getStateValuesAttributeAccess().getState_valuesKeyword_0(), null); 
    }
	'=' 
    {
        createLeafNode(grammarAccess.getStateValuesAttributeAccess().getEqualsSignKeyword_1(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getStateValuesAttributeAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
(
		lv_numbers_3_0=RULE_INT
		{
			createLeafNode(grammarAccess.getStateValuesAttributeAccess().getNumbersINTTerminalRuleCall_3_0(), "numbers"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStateValuesAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"numbers",
	        		lv_numbers_3_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)+	')' 
    {
        createLeafNode(grammarAccess.getStateValuesAttributeAccess().getRightParenthesisKeyword_4(), null); 
    }
	';' 
    {
        createLeafNode(grammarAccess.getStateValuesAttributeAccess().getSemicolonKeyword_5(), null); 
    }
)
;





// Entry rule entryRuleApplicationAttribute
entryRuleApplicationAttribute returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getApplicationAttributeRule(), currentNode); }
	 iv_ruleApplicationAttribute=ruleApplicationAttribute 
	 { $current=$iv_ruleApplicationAttribute.current; } 
	 EOF 
;

// Rule ApplicationAttribute
ruleApplicationAttribute returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_key_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getApplicationAttributeAccess().getKeyIDTerminalRuleCall_0_0(), "key"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getApplicationAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"key",
	        		lv_key_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getApplicationAttributeAccess().getEqualsSignKeyword_1(), null); 
    }
(
(
		lv_value_2_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getApplicationAttributeAccess().getValueSTRINGTerminalRuleCall_2_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getApplicationAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_2_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getApplicationAttributeAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleNodeSizeAttribute
entryRuleNodeSizeAttribute returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNodeSizeAttributeRule(), currentNode); }
	 iv_ruleNodeSizeAttribute=ruleNodeSizeAttribute 
	 { $current=$iv_ruleNodeSizeAttribute.current; } 
	 EOF 
;

// Rule NodeSizeAttribute
ruleNodeSizeAttribute returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'node_size' 
    {
        createLeafNode(grammarAccess.getNodeSizeAttributeAccess().getNode_sizeKeyword_0(), null); 
    }
	'=' 
    {
        createLeafNode(grammarAccess.getNodeSizeAttributeAccess().getEqualsSignKeyword_1(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getNodeSizeAttributeAccess().getLeftParenthesisKeyword_2(), null); 
    }
(
(
		lv_width_3_0=RULE_INT
		{
			createLeafNode(grammarAccess.getNodeSizeAttributeAccess().getWidthINTTerminalRuleCall_3_0(), "width"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNodeSizeAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"width",
	        		lv_width_3_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		lv_height_4_0=RULE_INT
		{
			createLeafNode(grammarAccess.getNodeSizeAttributeAccess().getHeightINTTerminalRuleCall_4_0(), "height"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getNodeSizeAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"height",
	        		lv_height_4_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getNodeSizeAttributeAccess().getRightParenthesisKeyword_5(), null); 
    }
	';' 
    {
        createLeafNode(grammarAccess.getNodeSizeAttributeAccess().getSemicolonKeyword_6(), null); 
    }
)
;





// Entry rule entryRulePotential
entryRulePotential returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPotentialRule(), currentNode); }
	 iv_rulePotential=rulePotential 
	 { $current=$iv_rulePotential.current; } 
	 EOF 
;

// Rule Potential
rulePotential returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'potential' 
    {
        createLeafNode(grammarAccess.getPotentialAccess().getPotentialKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPotentialAccess().getGraphPotentialGraphParserRuleCall_1_0(), currentNode); 
	    }
		lv_graph_1_0=rulePotentialGraph		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPotentialRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"graph",
	        		lv_graph_1_0, 
	        		"PotentialGraph", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPotentialAccess().getModelPotentialModelParserRuleCall_2_0(), currentNode); 
	    }
		lv_model_2_0=rulePotentialModel		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPotentialRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"model",
	        		lv_model_2_0, 
	        		"PotentialModel", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRulePotentialGraph
entryRulePotentialGraph returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPotentialGraphRule(), currentNode); }
	 iv_rulePotentialGraph=rulePotentialGraph 
	 { $current=$iv_rulePotentialGraph.current; } 
	 EOF 
;

// Rule PotentialGraph
rulePotentialGraph returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getPotentialGraphAccess().getPotentialGraphAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPotentialGraphAccess().getPotentialGraphAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'(' 
    {
        createLeafNode(grammarAccess.getPotentialGraphAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		lv_children_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getPotentialGraphAccess().getChildrenIDTerminalRuleCall_2_0(), "children"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPotentialGraphRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"children",
	        		lv_children_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)*(	'|' 
    {
        createLeafNode(grammarAccess.getPotentialGraphAccess().getVerticalLineKeyword_3_0(), null); 
    }
(
(
		lv_parents_4_0=RULE_ID
		{
			createLeafNode(grammarAccess.getPotentialGraphAccess().getParentsIDTerminalRuleCall_3_1_0(), "parents"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPotentialGraphRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"parents",
	        		lv_parents_4_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)*)?	')' 
    {
        createLeafNode(grammarAccess.getPotentialGraphAccess().getRightParenthesisKeyword_4(), null); 
    }
)
;





// Entry rule entryRulePotentialModel
entryRulePotentialModel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPotentialModelRule(), currentNode); }
	 iv_rulePotentialModel=rulePotentialModel 
	 { $current=$iv_rulePotentialModel.current; } 
	 EOF 
;

// Rule PotentialModel
rulePotentialModel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getPotentialModelAccess().getPotentialModelAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPotentialModelAccess().getPotentialModelAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'{' 
    {
        createLeafNode(grammarAccess.getPotentialModelAccess().getLeftCurlyBracketKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPotentialModelAccess().getAttributesPotentialAttributeParserRuleCall_2_0(), currentNode); 
	    }
		lv_attributes_2_0=rulePotentialAttribute		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPotentialModelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"attributes",
	        		lv_attributes_2_0, 
	        		"PotentialAttribute", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getPotentialModelAccess().getRightCurlyBracketKeyword_3(), null); 
    }
)
;





// Entry rule entryRulePotentialAttribute
entryRulePotentialAttribute returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPotentialAttributeRule(), currentNode); }
	 iv_rulePotentialAttribute=rulePotentialAttribute 
	 { $current=$iv_rulePotentialAttribute.current; } 
	 EOF 
;

// Rule PotentialAttribute
rulePotentialAttribute returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:

    { 
        currentNode=createCompositeNode(grammarAccess.getPotentialAttributeAccess().getPotentialDataAttributeParserRuleCall(), currentNode); 
    }
    this_PotentialDataAttribute_0=rulePotentialDataAttribute
    { 
        $current = $this_PotentialDataAttribute_0.current; 
        currentNode = currentNode.getParent();
    }

;





// Entry rule entryRulePotentialDataAttribute
entryRulePotentialDataAttribute returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPotentialDataAttributeRule(), currentNode); }
	 iv_rulePotentialDataAttribute=rulePotentialDataAttribute 
	 { $current=$iv_rulePotentialDataAttribute.current; } 
	 EOF 
;

// Rule PotentialDataAttribute
rulePotentialDataAttribute returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getPotentialDataAttributeAccess().getPotentialDataAttributeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getPotentialDataAttributeAccess().getPotentialDataAttributeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'data' 
    {
        createLeafNode(grammarAccess.getPotentialDataAttributeAccess().getDataKeyword_1(), null); 
    }
	'=' 
    {
        createLeafNode(grammarAccess.getPotentialDataAttributeAccess().getEqualsSignKeyword_2(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getPotentialDataAttributeAccess().getLeftParenthesisKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPotentialDataAttributeAccess().getItemsDataItemListParserRuleCall_4_0(), currentNode); 
	    }
		lv_items_4_0=ruleDataItemList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPotentialDataAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"items",
	        		lv_items_4_0, 
	        		"DataItemList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getPotentialDataAttributeAccess().getRightParenthesisKeyword_5(), null); 
    }
	';' 
    {
        createLeafNode(grammarAccess.getPotentialDataAttributeAccess().getSemicolonKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleDataItemList
entryRuleDataItemList returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getDataItemListRule(), currentNode); }
	 iv_ruleDataItemList=ruleDataItemList 
	 { $current=$iv_ruleDataItemList.current; } 
	 EOF 
;

// Rule DataItemList
ruleDataItemList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getDataItemListAccess().getUnstructuredDataListParserRuleCall_0(), currentNode); 
    }
    this_UnstructuredDataList_0=ruleUnstructuredDataList
    { 
        $current = $this_UnstructuredDataList_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getDataItemListAccess().getStructuredDataListParserRuleCall_1(), currentNode); 
    }
    this_StructuredDataList_1=ruleStructuredDataList
    { 
        $current = $this_StructuredDataList_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleUnstructuredDataList
entryRuleUnstructuredDataList returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnstructuredDataListRule(), currentNode); }
	 iv_ruleUnstructuredDataList=ruleUnstructuredDataList 
	 { $current=$iv_ruleUnstructuredDataList.current; } 
	 EOF 
;

// Rule UnstructuredDataList
ruleUnstructuredDataList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getUnstructuredDataListAccess().getUnstructuredDataListAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getUnstructuredDataListAccess().getUnstructuredDataListAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnstructuredDataListAccess().getListFloatDataListParserRuleCall_1_0(), currentNode); 
	    }
		lv_list_1_0=ruleFloatDataList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnstructuredDataListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"list",
	        		lv_list_1_0, 
	        		"FloatDataList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleStructuredDataList
entryRuleStructuredDataList returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStructuredDataListRule(), currentNode); }
	 iv_ruleStructuredDataList=ruleStructuredDataList 
	 { $current=$iv_ruleStructuredDataList.current; } 
	 EOF 
;

// Rule StructuredDataList
ruleStructuredDataList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getStructuredDataListAccess().getStructuredDataListAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getStructuredDataListAccess().getStructuredDataListAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'(' 
    {
        createLeafNode(grammarAccess.getStructuredDataListAccess().getLeftParenthesisKeyword_1(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStructuredDataListAccess().getListFloatDataListParserRuleCall_2_0_0(), currentNode); 
	    }
		lv_list_2_0=ruleFloatDataList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStructuredDataListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"list",
	        		lv_list_2_0, 
	        		"FloatDataList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
    |(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getStructuredDataListAccess().getItemsStructuredDataListParserRuleCall_2_1_0(), currentNode); 
	    }
		lv_items_3_0=ruleStructuredDataList		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getStructuredDataListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"items",
	        		lv_items_3_0, 
	        		"StructuredDataList", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)+)	')' 
    {
        createLeafNode(grammarAccess.getStructuredDataListAccess().getRightParenthesisKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleFloatDataList
entryRuleFloatDataList returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFloatDataListRule(), currentNode); }
	 iv_ruleFloatDataList=ruleFloatDataList 
	 { $current=$iv_ruleFloatDataList.current; } 
	 EOF 
;

// Rule FloatDataList
ruleFloatDataList returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getFloatDataListAccess().getFloatDataListAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getFloatDataListAccess().getFloatDataListAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFloatDataListAccess().getItemsDOUBLEParserRuleCall_1_0(), currentNode); 
	    }
		lv_items_1_0=ruleDOUBLE		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFloatDataListRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"items",
	        		lv_items_1_0, 
	        		"DOUBLE", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;







// Entry rule entryRuleMeanExpression
entryRuleMeanExpression returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMeanExpressionRule(), currentNode); } 
	 iv_ruleMeanExpression=ruleMeanExpression 
	 { $current=$iv_ruleMeanExpression.current.getText(); }  
	 EOF 
;

// Rule MeanExpression
ruleMeanExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getMeanExpressionAccess().getMeanTermParserRuleCall_0(), currentNode); 
    }
    this_MeanTerm_0=ruleMeanTerm    {
		$current.merge(this_MeanTerm_0);
    }

    { 
        currentNode = currentNode.getParent();
    }
(
	kw='+' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getMeanExpressionAccess().getPlusSignKeyword_1_0(), null); 
    }

    { 
        currentNode=createCompositeNode(grammarAccess.getMeanExpressionAccess().getMeanTermParserRuleCall_1_1(), currentNode); 
    }
    this_MeanTerm_2=ruleMeanTerm    {
		$current.merge(this_MeanTerm_2);
    }

    { 
        currentNode = currentNode.getParent();
    }
)*)
    ;





// Entry rule entryRuleMeanTerm
entryRuleMeanTerm returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMeanTermRule(), currentNode); } 
	 iv_ruleMeanTerm=ruleMeanTerm 
	 { $current=$iv_ruleMeanTerm.current.getText(); }  
	 EOF 
;

// Rule MeanTerm
ruleMeanTerm returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getMeanTermAccess().getDOUBLEParserRuleCall_0(), currentNode); 
    }
    this_DOUBLE_0=ruleDOUBLE    {
		$current.merge(this_DOUBLE_0);
    }

    { 
        currentNode = currentNode.getParent();
    }

    |(
    { 
        currentNode=createCompositeNode(grammarAccess.getMeanTermAccess().getDOUBLEParserRuleCall_1_0(), currentNode); 
    }
    this_DOUBLE_1=ruleDOUBLE    {
		$current.merge(this_DOUBLE_1);
    }

    { 
        currentNode = currentNode.getParent();
    }

	kw='*' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getMeanTermAccess().getAsteriskKeyword_1_1(), null); 
    }
    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    createLeafNode(grammarAccess.getMeanTermAccess().getIDTerminalRuleCall_1_2(), null); 
    }
)
    |    this_ID_4=RULE_ID    {
		$current.merge(this_ID_4);
    }

    { 
    createLeafNode(grammarAccess.getMeanTermAccess().getIDTerminalRuleCall_2(), null); 
    }
)
    ;







// Entry rule entryRuleModelNodesAttribute
entryRuleModelNodesAttribute returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModelNodesAttributeRule(), currentNode); }
	 iv_ruleModelNodesAttribute=ruleModelNodesAttribute 
	 { $current=$iv_ruleModelNodesAttribute.current; } 
	 EOF 
;

// Rule ModelNodesAttribute
ruleModelNodesAttribute returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getModelNodesAttributeAccess().getModelNodesAttributeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getModelNodesAttributeAccess().getModelNodesAttributeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'model_nodes' 
    {
        createLeafNode(grammarAccess.getModelNodesAttributeAccess().getModel_nodesKeyword_1(), null); 
    }
	'=' 
    {
        createLeafNode(grammarAccess.getModelNodesAttributeAccess().getEqualsSignKeyword_2(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getModelNodesAttributeAccess().getLeftParenthesisKeyword_3(), null); 
    }
(
(
		lv_configurations_4_0=RULE_ID
		{
			createLeafNode(grammarAccess.getModelNodesAttributeAccess().getConfigurationsIDTerminalRuleCall_4_0(), "configurations"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelNodesAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"configurations",
	        		lv_configurations_4_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)*	')' 
    {
        createLeafNode(grammarAccess.getModelNodesAttributeAccess().getRightParenthesisKeyword_5(), null); 
    }
	';' 
    {
        createLeafNode(grammarAccess.getModelNodesAttributeAccess().getSemicolonKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleSamplesAttribute
entryRuleSamplesAttribute returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getSamplesAttributeRule(), currentNode); }
	 iv_ruleSamplesAttribute=ruleSamplesAttribute 
	 { $current=$iv_ruleSamplesAttribute.current; } 
	 EOF 
;

// Rule SamplesAttribute
ruleSamplesAttribute returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'samples_per_interval' 
    {
        createLeafNode(grammarAccess.getSamplesAttributeAccess().getSamples_per_intervalKeyword_0(), null); 
    }
	'=' 
    {
        createLeafNode(grammarAccess.getSamplesAttributeAccess().getEqualsSignKeyword_1(), null); 
    }
(
(
		lv_value_2_0=RULE_INT
		{
			createLeafNode(grammarAccess.getSamplesAttributeAccess().getValueINTTerminalRuleCall_2_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getSamplesAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_2_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getSamplesAttributeAccess().getSemicolonKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleModelDataAttribute
entryRuleModelDataAttribute returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModelDataAttributeRule(), currentNode); }
	 iv_ruleModelDataAttribute=ruleModelDataAttribute 
	 { $current=$iv_ruleModelDataAttribute.current; } 
	 EOF 
;

// Rule ModelDataAttribute
ruleModelDataAttribute returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getModelDataAttributeAccess().getModelDataAttributeAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getModelDataAttributeAccess().getModelDataAttributeAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)	'model_data' 
    {
        createLeafNode(grammarAccess.getModelDataAttributeAccess().getModel_dataKeyword_1(), null); 
    }
	'=' 
    {
        createLeafNode(grammarAccess.getModelDataAttributeAccess().getEqualsSignKeyword_2(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getModelDataAttributeAccess().getLeftParenthesisKeyword_3(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModelDataAttributeAccess().getSequenceExpressionSequenceParserRuleCall_4_0(), currentNode); 
	    }
		lv_sequence_4_0=ruleExpressionSequence		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModelDataAttributeRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"sequence",
	        		lv_sequence_4_0, 
	        		"ExpressionSequence", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getModelDataAttributeAccess().getRightParenthesisKeyword_5(), null); 
    }
	';' 
    {
        createLeafNode(grammarAccess.getModelDataAttributeAccess().getSemicolonKeyword_6(), null); 
    }
)
;





// Entry rule entryRuleClassDefinition
entryRuleClassDefinition returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getClassDefinitionRule(), currentNode); }
	 iv_ruleClassDefinition=ruleClassDefinition 
	 { $current=$iv_ruleClassDefinition.current; } 
	 EOF 
;

// Rule ClassDefinition
ruleClassDefinition returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'class' 
    {
        createLeafNode(grammarAccess.getClassDefinitionAccess().getClassKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getClassDefinitionAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getClassDefinitionAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassDefinitionAccess().getElementsClassElementParserRuleCall_3_0(), currentNode); 
	    }
		lv_elements_3_0=ruleClassElement		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassDefinitionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"elements",
	        		lv_elements_3_0, 
	        		"ClassElement", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	'}' 
    {
        createLeafNode(grammarAccess.getClassDefinitionAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleClassElement
entryRuleClassElement returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getClassElementRule(), currentNode); }
	 iv_ruleClassElement=ruleClassElement 
	 { $current=$iv_ruleClassElement.current; } 
	 EOF 
;

// Rule ClassElement
ruleClassElement returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getClassElementAccess().getDomainElementParserRuleCall_0(), currentNode); 
    }
    this_DomainElement_0=ruleDomainElement
    { 
        $current = $this_DomainElement_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getClassElementAccess().getAttributeParserRuleCall_1(), currentNode); 
    }
    this_Attribute_1=ruleAttribute
    { 
        $current = $this_Attribute_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getClassElementAccess().getClassInstanceParserRuleCall_2(), currentNode); 
    }
    this_ClassInstance_2=ruleClassInstance
    { 
        $current = $this_ClassInstance_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleClassInstance
entryRuleClassInstance returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getClassInstanceRule(), currentNode); }
	 iv_ruleClassInstance=ruleClassInstance 
	 { $current=$iv_ruleClassInstance.current; } 
	 EOF 
;

// Rule ClassInstance
ruleClassInstance returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'instance' 
    {
        createLeafNode(grammarAccess.getClassInstanceAccess().getInstanceKeyword_0(), null); 
    }
(
(
		lv_instanceName_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getClassInstanceAccess().getInstanceNameIDTerminalRuleCall_1_0(), "instanceName"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassInstanceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"instanceName",
	        		lv_instanceName_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	':' 
    {
        createLeafNode(grammarAccess.getClassInstanceAccess().getColonKeyword_2(), null); 
    }
(
(
		lv_className_3_0=RULE_ID
		{
			createLeafNode(grammarAccess.getClassInstanceAccess().getClassNameIDTerminalRuleCall_3_0(), "className"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassInstanceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"className",
	        		lv_className_3_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getClassInstanceAccess().getLeftParenthesisKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassInstanceAccess().getInputInputBindingsParserRuleCall_5_0(), currentNode); 
	    }
		lv_input_5_0=ruleInputBindings		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassInstanceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"input",
	        		lv_input_5_0, 
	        		"InputBindings", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)?(	';' 
    {
        createLeafNode(grammarAccess.getClassInstanceAccess().getSemicolonKeyword_6_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassInstanceAccess().getOutputOutputBindingsParserRuleCall_6_1_0(), currentNode); 
	    }
		lv_output_7_0=ruleOutputBindings		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassInstanceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"output",
	        		lv_output_7_0, 
	        		"OutputBindings", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?	')' 
    {
        createLeafNode(grammarAccess.getClassInstanceAccess().getRightParenthesisKeyword_7(), null); 
    }
	'{' 
    {
        createLeafNode(grammarAccess.getClassInstanceAccess().getLeftCurlyBracketKeyword_8(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getClassInstanceAccess().getAttributesNodeAttributesParserRuleCall_9_0(), currentNode); 
	    }
		lv_attributes_10_0=ruleNodeAttributes		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getClassInstanceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"attributes",
	        		lv_attributes_10_0, 
	        		"NodeAttributes", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'}' 
    {
        createLeafNode(grammarAccess.getClassInstanceAccess().getRightCurlyBracketKeyword_10(), null); 
    }
)
;





// Entry rule entryRuleInputBindings
entryRuleInputBindings returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInputBindingsRule(), currentNode); }
	 iv_ruleInputBindings=ruleInputBindings 
	 { $current=$iv_ruleInputBindings.current; } 
	 EOF 
;

// Rule InputBindings
ruleInputBindings returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInputBindingsAccess().getLhsInputBindingParserRuleCall_0_0(), currentNode); 
	    }
		lv_lhs_0_0=ruleInputBinding		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInputBindingsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lhs",
	        		lv_lhs_0_0, 
	        		"InputBinding", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	',' 
    {
        createLeafNode(grammarAccess.getInputBindingsAccess().getCommaKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInputBindingsAccess().getRhsInputBindingsParserRuleCall_2_0(), currentNode); 
	    }
		lv_rhs_2_0=ruleInputBindings		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInputBindingsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rhs",
	        		lv_rhs_2_0, 
	        		"InputBindings", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleInputBinding
entryRuleInputBinding returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInputBindingRule(), currentNode); }
	 iv_ruleInputBinding=ruleInputBinding 
	 { $current=$iv_ruleInputBinding.current; } 
	 EOF 
;

// Rule InputBinding
ruleInputBinding returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_formal_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getInputBindingAccess().getFormalIDTerminalRuleCall_0_0(), "formal"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInputBindingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"formal",
	        		lv_formal_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getInputBindingAccess().getEqualsSignKeyword_1(), null); 
    }
(
(
		lv_actual_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getInputBindingAccess().getActualIDTerminalRuleCall_2_0(), "actual"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInputBindingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"actual",
	        		lv_actual_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleOutputBindings
entryRuleOutputBindings returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOutputBindingsRule(), currentNode); }
	 iv_ruleOutputBindings=ruleOutputBindings 
	 { $current=$iv_ruleOutputBindings.current; } 
	 EOF 
;

// Rule OutputBindings
ruleOutputBindings returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOutputBindingsAccess().getLhsOutputBindingParserRuleCall_0_0(), currentNode); 
	    }
		lv_lhs_0_0=ruleOutputBinding		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOutputBindingsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"lhs",
	        		lv_lhs_0_0, 
	        		"OutputBinding", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	',' 
    {
        createLeafNode(grammarAccess.getOutputBindingsAccess().getCommaKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOutputBindingsAccess().getRhsOutputBindingsParserRuleCall_2_0(), currentNode); 
	    }
		lv_rhs_2_0=ruleOutputBindings		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOutputBindingsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"rhs",
	        		lv_rhs_2_0, 
	        		"OutputBindings", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleOutputBinding
entryRuleOutputBinding returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOutputBindingRule(), currentNode); }
	 iv_ruleOutputBinding=ruleOutputBinding 
	 { $current=$iv_ruleOutputBinding.current; } 
	 EOF 
;

// Rule OutputBinding
ruleOutputBinding returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_actual_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getOutputBindingAccess().getActualIDTerminalRuleCall_0_0(), "actual"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOutputBindingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"actual",
	        		lv_actual_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'=' 
    {
        createLeafNode(grammarAccess.getOutputBindingAccess().getEqualsSignKeyword_1(), null); 
    }
(
(
		lv_formal_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getOutputBindingAccess().getFormalIDTerminalRuleCall_2_0(), "formal"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOutputBindingRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"formal",
	        		lv_formal_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleNodeAttributes
entryRuleNodeAttributes returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getNodeAttributesRule(), currentNode); }
	 iv_ruleNodeAttributes=ruleNodeAttributes 
	 { $current=$iv_ruleNodeAttributes.current; } 
	 EOF 
;

// Rule NodeAttributes
ruleNodeAttributes returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getNodeAttributesAccess().getLabelAttributeParserRuleCall_0(), currentNode); 
    }
    this_LabelAttribute_0=ruleLabelAttribute
    { 
        $current = $this_LabelAttribute_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getNodeAttributesAccess().getPositionAttributeParserRuleCall_1(), currentNode); 
    }
    this_PositionAttribute_1=rulePositionAttribute
    { 
        $current = $this_PositionAttribute_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getNodeAttributesAccess().getApplicationAttributeParserRuleCall_2(), currentNode); 
    }
    this_ApplicationAttribute_2=ruleApplicationAttribute
    { 
        $current = $this_ApplicationAttribute_2.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleExpressionSequence
entryRuleExpressionSequence returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionSequenceRule(), currentNode); }
	 iv_ruleExpressionSequence=ruleExpressionSequence 
	 { $current=$iv_ruleExpressionSequence.current; } 
	 EOF 
;

// Rule ExpressionSequence
ruleExpressionSequence returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getExpressionSequenceAccess().getExpressionSequenceAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getExpressionSequenceAccess().getExpressionSequenceAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionSequenceAccess().getExpressionsExpressionParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_expressions_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionSequenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressions",
	        		lv_expressions_1_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(	',' 
    {
        createLeafNode(grammarAccess.getExpressionSequenceAccess().getCommaKeyword_1_1_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionSequenceAccess().getExpressionsExpressionParserRuleCall_1_1_1_0(), currentNode); 
	    }
		lv_expressions_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionSequenceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"expressions",
	        		lv_expressions_3_0, 
	        		"Expression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))*)?)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getExpressionRule(), currentNode); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getAssignmentOpExpressionParserRuleCall_0(), currentNode); 
    }
    this_assignmentOpExpression_0=ruleassignmentOpExpression
    { 
        $current = $this_assignmentOpExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getExpressionAccess().getAssignmentLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getExpressionAccess().getAssignmentLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_op_2_0=	'=' 
    {
        createLeafNode(grammarAccess.getExpressionAccess().getOpEqualsSignKeyword_1_1_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_0, "=", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getExpressionAccess().getRightOrExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_right_3_0=ruleorExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_3_0, 
	        		"orExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleassignmentOpExpression
entryRuleassignmentOpExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAssignmentOpExpressionRule(), currentNode); }
	 iv_ruleassignmentOpExpression=ruleassignmentOpExpression 
	 { $current=$iv_ruleassignmentOpExpression.current; } 
	 EOF 
;

// Rule assignmentOpExpression
ruleassignmentOpExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAssignmentOpExpressionAccess().getOrExpressionParserRuleCall_0(), currentNode); 
    }
    this_orExpression_0=ruleorExpression
    { 
        $current = $this_orExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getAssignmentOpExpressionAccess().getAssignmentOpLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAssignmentOpExpressionAccess().getAssignmentOpLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAssignmentOpExpressionAccess().getOpAssignOpParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_op_2_0=ruleassignOp		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentOpExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"op",
	        		lv_op_2_0, 
	        		"assignOp", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAssignmentOpExpressionAccess().getRightOrExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_right_3_0=ruleorExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAssignmentOpExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_3_0, 
	        		"orExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleassignOp
entryRuleassignOp returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAssignOpRule(), currentNode); } 
	 iv_ruleassignOp=ruleassignOp 
	 { $current=$iv_ruleassignOp.current.getText(); }  
	 EOF 
;

// Rule assignOp
ruleassignOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='+=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAssignOpAccess().getPlusSignEqualsSignKeyword_0(), null); 
    }

    |
	kw='-=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAssignOpAccess().getHyphenMinusEqualsSignKeyword_1(), null); 
    }

    |
	kw='*=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAssignOpAccess().getAsteriskEqualsSignKeyword_2(), null); 
    }

    |
	kw='/=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAssignOpAccess().getSolidusEqualsSignKeyword_3(), null); 
    }

    |
	kw='%=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getAssignOpAccess().getPercentSignEqualsSignKeyword_4(), null); 
    }
)
    ;





// Entry rule entryRuleorExpression
entryRuleorExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOrExpressionRule(), currentNode); }
	 iv_ruleorExpression=ruleorExpression 
	 { $current=$iv_ruleorExpression.current; } 
	 EOF 
;

// Rule orExpression
ruleorExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0(), currentNode); 
    }
    this_andExpression_0=ruleandExpression
    { 
        $current = $this_andExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getOrExpressionAccess().getOrExpLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getOrExpressionAccess().getOrExpLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_op_2_0=	'||' 
    {
        createLeafNode(grammarAccess.getOrExpressionAccess().getOpVerticalLineVerticalLineKeyword_1_1_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_0, "||", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOrExpressionAccess().getRightOrExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_right_3_0=ruleorExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOrExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_3_0, 
	        		"orExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRuleandExpression
entryRuleandExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAndExpressionRule(), currentNode); }
	 iv_ruleandExpression=ruleandExpression 
	 { $current=$iv_ruleandExpression.current; } 
	 EOF 
;

// Rule andExpression
ruleandExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAndExpressionAccess().getRelationalExpressionParserRuleCall_0(), currentNode); 
    }
    this_relationalExpression_0=rulerelationalExpression
    { 
        $current = $this_relationalExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getAndExpressionAccess().getAndExpLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAndExpressionAccess().getAndExpLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_op_2_0=	'&&' 
    {
        createLeafNode(grammarAccess.getAndExpressionAccess().getOpAmpersandAmpersandKeyword_1_1_0(), "op"); 
    }
 
	    {
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        
	        try {
	       		set($current, "op", lv_op_2_0, "&&", lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAndExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_right_3_0=ruleandExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAndExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_3_0, 
	        		"andExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRulerelationalExpression
entryRulerelationalExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRelationalExpressionRule(), currentNode); }
	 iv_rulerelationalExpression=rulerelationalExpression 
	 { $current=$iv_rulerelationalExpression.current; } 
	 EOF 
;

// Rule relationalExpression
rulerelationalExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getAdditiveExpressionParserRuleCall_0(), currentNode); 
    }
    this_additiveExpression_0=ruleadditiveExpression
    { 
        $current = $this_additiveExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getRelationalExpressionAccess().getRelationalExpLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getRelationalExpressionAccess().getRelationalExpLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getOpRelOpsParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_op_2_0=rulerelOps		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"op",
	        		lv_op_2_0, 
	        		"relOps", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRelationalExpressionAccess().getRightRelationalExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_right_3_0=rulerelationalExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRelationalExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_3_0, 
	        		"relationalExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRulerelOps
entryRulerelOps returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRelOpsRule(), currentNode); } 
	 iv_rulerelOps=rulerelOps 
	 { $current=$iv_rulerelOps.current.getText(); }  
	 EOF 
;

// Rule relOps
rulerelOps returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='!=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRelOpsAccess().getExclamationMarkEqualsSignKeyword_0(), null); 
    }

    |
	kw='==' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRelOpsAccess().getEqualsSignEqualsSignKeyword_1(), null); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRelOpsAccess().getLessThanSignEqualsSignKeyword_2(), null); 
    }

    |
	kw='<>' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRelOpsAccess().getLessThanSignGreaterThanSignKeyword_3(), null); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRelOpsAccess().getGreaterThanSignEqualsSignKeyword_4(), null); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRelOpsAccess().getLessThanSignKeyword_5(), null); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getRelOpsAccess().getGreaterThanSignKeyword_6(), null); 
    }
)
    ;





// Entry rule entryRuleadditiveExpression
entryRuleadditiveExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAdditiveExpressionRule(), currentNode); }
	 iv_ruleadditiveExpression=ruleadditiveExpression 
	 { $current=$iv_ruleadditiveExpression.current; } 
	 EOF 
;

// Rule additiveExpression
ruleadditiveExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0(), currentNode); 
    }
    this_multiplicativeExpression_0=rulemultiplicativeExpression
    { 
        $current = $this_multiplicativeExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getAdditiveExpressionAccess().getAdditiveExpLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getAdditiveExpLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOpArithOpsParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_op_2_0=rulearithOps		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"op",
	        		lv_op_2_0, 
	        		"arithOps", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRightAdditiveExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_right_3_0=ruleadditiveExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAdditiveExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_3_0, 
	        		"additiveExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRulearithOps
entryRulearithOps returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getArithOpsRule(), currentNode); } 
	 iv_rulearithOps=rulearithOps 
	 { $current=$iv_rulearithOps.current.getText(); }  
	 EOF 
;

// Rule arithOps
rulearithOps returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='+' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getArithOpsAccess().getPlusSignKeyword_0(), null); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getArithOpsAccess().getHyphenMinusKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRulemultiplicativeExpression
entryRulemultiplicativeExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMultiplicativeExpressionRule(), currentNode); }
	 iv_rulemultiplicativeExpression=rulemultiplicativeExpression 
	 { $current=$iv_rulemultiplicativeExpression.current; } 
	 EOF 
;

// Rule multiplicativeExpression
rulemultiplicativeExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0(), currentNode); 
    }
    this_unaryExpression_0=ruleunaryExpression
    { 
        $current = $this_unaryExpression_0.current; 
        currentNode = currentNode.getParent();
    }
((
    { 
        temp=factory.create(grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpLeftAction_1_0().getType().getClassifier());
        try {
        	factory.set(temp, "left", $current, null /*ParserRule*/, currentNode);
        } catch(ValueConverterException vce) {
        	handleValueConverterException(vce);
        }
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpLeftAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOpMultOpsParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_op_2_0=rulemultOps		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"op",
	        		lv_op_2_0, 
	        		"multOps", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_2_0(), currentNode); 
	    }
		lv_right_3_0=rulemultiplicativeExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getMultiplicativeExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"right",
	        		lv_right_3_0, 
	        		"multiplicativeExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))?)
;





// Entry rule entryRulemultOps
entryRulemultOps returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getMultOpsRule(), currentNode); } 
	 iv_rulemultOps=rulemultOps 
	 { $current=$iv_rulemultOps.current.getText(); }  
	 EOF 
;

// Rule multOps
rulemultOps returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='*' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getMultOpsAccess().getAsteriskKeyword_0(), null); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getMultOpsAccess().getSolidusKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleunaryExpression
entryRuleunaryExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnaryExpressionRule(), currentNode); }
	 iv_ruleunaryExpression=ruleunaryExpression 
	 { $current=$iv_ruleunaryExpression.current; } 
	 EOF 
;

// Rule unaryExpression
ruleunaryExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getTermExpressionParserRuleCall_0(), currentNode); 
    }
    this_TermExpression_0=ruleTermExpression
    { 
        $current = $this_TermExpression_0.current; 
        currentNode = currentNode.getParent();
    }

    |((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getOpUnaryOpsParserRuleCall_1_0_0(), currentNode); 
	    }
		lv_op_1_0=ruleunaryOps		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"op",
	        		lv_op_1_0, 
	        		"unaryOps", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getUnaryExpressionAccess().getExprTermExpressionParserRuleCall_1_1_0(), currentNode); 
	    }
		lv_expr_2_0=ruleTermExpression		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getUnaryExpressionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"expr",
	        		lv_expr_2_0, 
	        		"TermExpression", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleunaryOps
entryRuleunaryOps returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getUnaryOpsRule(), currentNode); } 
	 iv_ruleunaryOps=ruleunaryOps 
	 { $current=$iv_ruleunaryOps.current.getText(); }  
	 EOF 
;

// Rule unaryOps
ruleunaryOps returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='-' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnaryOpsAccess().getHyphenMinusKeyword_0(), null); 
    }

    |
	kw='!' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getUnaryOpsAccess().getExclamationMarkKeyword_1(), null); 
    }
)
    ;





// Entry rule entryRuleOperator
entryRuleOperator returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOperatorRule(), currentNode); }
	 iv_ruleOperator=ruleOperator 
	 { $current=$iv_ruleOperator.current; } 
	 EOF 
;

// Rule Operator
ruleOperator returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperatorAccess().getOpOperatorNameParserRuleCall_0_0(), currentNode); 
	    }
		lv_op_0_0=ruleOperatorName		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperatorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"op",
	        		lv_op_0_0, 
	        		"OperatorName", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'(' 
    {
        createLeafNode(grammarAccess.getOperatorAccess().getLeftParenthesisKeyword_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getOperatorAccess().getSequenceExpressionSequenceParserRuleCall_2_0(), currentNode); 
	    }
		lv_sequence_2_0=ruleExpressionSequence		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getOperatorRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"sequence",
	        		lv_sequence_2_0, 
	        		"ExpressionSequence", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getOperatorAccess().getRightParenthesisKeyword_3(), null); 
    }
)
;





// Entry rule entryRuleTermExpression
entryRuleTermExpression returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTermExpressionRule(), currentNode); }
	 iv_ruleTermExpression=ruleTermExpression 
	 { $current=$iv_ruleTermExpression.current; } 
	 EOF 
;

// Rule TermExpression
ruleTermExpression returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getTermExpressionAccess().getTermLiteralParserRuleCall_0(), currentNode); 
    }
    this_TermLiteral_0=ruleTermLiteral
    { 
        $current = $this_TermLiteral_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getTermExpressionAccess().getOperatorParserRuleCall_1(), currentNode); 
    }
    this_Operator_1=ruleOperator
    { 
        $current = $this_Operator_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleTermLiteral
entryRuleTermLiteral returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getTermLiteralRule(), currentNode); }
	 iv_ruleTermLiteral=ruleTermLiteral 
	 { $current=$iv_ruleTermLiteral.current; } 
	 EOF 
;

// Rule TermLiteral
ruleTermLiteral returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(((
    { 
        temp=factory.create(grammarAccess.getTermLiteralAccess().getVarRefAction_0_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTermLiteralAccess().getVarRefAction_0_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_value_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getTermLiteralAccess().getValueIDTerminalRuleCall_0_1_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTermLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
    |((
    { 
        temp=factory.create(grammarAccess.getTermLiteralAccess().getIntegerLiteralAction_1_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTermLiteralAccess().getIntegerLiteralAction_1_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_value_3_0=RULE_INT
		{
			createLeafNode(grammarAccess.getTermLiteralAccess().getValueINTTerminalRuleCall_1_1_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTermLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_3_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
    |((
    { 
        temp=factory.create(grammarAccess.getTermLiteralAccess().getBooleanLiteralAction_2_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTermLiteralAccess().getBooleanLiteralAction_2_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_value_5_0=RULE_BOOLEAN
		{
			createLeafNode(grammarAccess.getTermLiteralAccess().getValueBOOLEANTerminalRuleCall_2_1_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTermLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_5_0, 
	        		"BOOLEAN", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
    |((
    { 
        temp=factory.create(grammarAccess.getTermLiteralAccess().getStringLiteralAction_3_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTermLiteralAccess().getStringLiteralAction_3_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		lv_value_7_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getTermLiteralAccess().getValueSTRINGTerminalRuleCall_3_1_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTermLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_7_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
    |((
    { 
        temp=factory.create(grammarAccess.getTermLiteralAccess().getDoubleLiteralAction_4_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getTermLiteralAccess().getDoubleLiteralAction_4_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getTermLiteralAccess().getValueDOUBLEParserRuleCall_4_1_0(), currentNode); 
	    }
		lv_value_9_0=ruleDOUBLE		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getTermLiteralRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_9_0, 
	        		"DOUBLE", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)))
;





// Entry rule entryRuleOperatorName
entryRuleOperatorName returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getOperatorNameRule(), currentNode); } 
	 iv_ruleOperatorName=ruleOperatorName 
	 { $current=$iv_ruleOperatorName.current.getText(); }  
	 EOF 
;

// Rule OperatorName
ruleOperatorName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='truncate' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getTruncateKeyword_0(), null); 
    }

    |
	kw='Normal' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getNormalKeyword_1(), null); 
    }

    |
	kw='LogNormal' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getLogNormalKeyword_2(), null); 
    }

    |
	kw='Beta' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getBetaKeyword_3(), null); 
    }

    |
	kw='Gamma' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getGammaKeyword_4(), null); 
    }

    |
	kw='Exponential' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getExponentialKeyword_5(), null); 
    }

    |
	kw='Weibull' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getWeibullKeyword_6(), null); 
    }

    |
	kw='Uniform' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getUniformKeyword_7(), null); 
    }

    |
	kw='Triangular' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getTriangularKeyword_8(), null); 
    }

    |
	kw='PERT' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getPERTKeyword_9(), null); 
    }

    |
	kw='Binomial' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getBinomialKeyword_10(), null); 
    }

    |
	kw='Poisson' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getPoissonKeyword_11(), null); 
    }

    |
	kw='NegativeBinomial' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getNegativeBinomialKeyword_12(), null); 
    }

    |
	kw='Geometric' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getGeometricKeyword_13(), null); 
    }

    |
	kw='Distribution' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getDistributionKeyword_14(), null); 
    }

    |
	kw='NoisyOR' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getNoisyORKeyword_15(), null); 
    }

    |
	kw='min' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getMinKeyword_16(), null); 
    }

    |
	kw='max' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getMaxKeyword_17(), null); 
    }

    |
	kw='log' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getLogKeyword_18(), null); 
    }

    |
	kw='log2' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getLog2Keyword_19(), null); 
    }

    |
	kw='log10' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getLog10Keyword_20(), null); 
    }

    |
	kw='exp' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getExpKeyword_21(), null); 
    }

    |
	kw='sin' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getSinKeyword_22(), null); 
    }

    |
	kw='cos' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getCosKeyword_23(), null); 
    }

    |
	kw='tan' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getTanKeyword_24(), null); 
    }

    |
	kw='sinh' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getSinhKeyword_25(), null); 
    }

    |
	kw='cosh' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getCoshKeyword_26(), null); 
    }

    |
	kw='tanh' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getTanhKeyword_27(), null); 
    }

    |
	kw='sqrt' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getSqrtKeyword_28(), null); 
    }

    |
	kw='abs' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getAbsKeyword_29(), null); 
    }

    |
	kw='floor' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getFloorKeyword_30(), null); 
    }

    |
	kw='ceil' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getCeilKeyword_31(), null); 
    }

    |
	kw='mod' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getModKeyword_32(), null); 
    }

    |
	kw='if' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getIfKeyword_33(), null); 
    }

    |
	kw='and' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getAndKeyword_34(), null); 
    }

    |
	kw='or' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getOrKeyword_35(), null); 
    }

    |
	kw='not' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getOperatorNameAccess().getNotKeyword_36(), null); 
    }
)
    ;





RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'|'1'..'9' ('0'..'9')*);

RULE_STRING : '"' ( options {greedy=false;} : . )*'"';

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '%' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_EXT_INT : RULE_INT ('e'|'E') ('-'|'+') RULE_INT;

RULE_ANY_OTHER : .;


