/*
* generated by Xtext
*/
grammar InternalNetDSL;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package net.certware.evidence.hugin.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package net.certware.evidence.hugin.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import net.certware.evidence.hugin.services.NetDSLGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private NetDSLGrammarAccess grammarAccess;
 	
    public InternalNetDSLParser(TokenStream input, NetDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected NetDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getDomainDomainDefinitionParserRuleCall_0()); 
	    }
		lv_domain_0_0=ruleDomainDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"domain",
        		lv_domain_0_0, 
        		"DomainDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)?
;





// Entry rule entryRuleInteger
entryRuleInteger returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerRule()); }
	 iv_ruleInteger=ruleInteger 
	 { $current=$iv_ruleInteger.current; } 
	 EOF 
;

// Rule Integer
ruleInteger returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_i_0_0=RULE_INT
		{
			newLeafNode(lv_i_0_0, grammarAccess.getIntegerAccess().getIINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"i",
        		lv_i_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleDomainDefinition
entryRuleDomainDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDomainDefinitionRule()); }
	 iv_ruleDomainDefinition=ruleDomainDefinition 
	 { $current=$iv_ruleDomainDefinition.current; } 
	 EOF 
;

// Rule DomainDefinition
ruleDomainDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDomainDefinitionAccess().getHeaderDomainHeaderParserRuleCall_0_0()); 
	    }
		lv_header_0_0=ruleDomainHeader		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainDefinitionRule());
	        }
       		set(
       			$current, 
       			"header",
        		lv_header_0_0, 
        		"DomainHeader");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDomainDefinitionAccess().getElementsDomainElementParserRuleCall_1_0()); 
	    }
		lv_elements_1_0=ruleDomainElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainDefinitionRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_1_0, 
        		"DomainElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleDomainHeader
entryRuleDomainHeader returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDomainHeaderRule()); }
	 iv_ruleDomainHeader=ruleDomainHeader 
	 { $current=$iv_ruleDomainHeader.current; } 
	 EOF 
;

// Rule DomainHeader
ruleDomainHeader returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getDomainHeaderAccess().getDomainHeaderAction_0(),
            $current);
    }
)	otherlv_1='net' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDomainHeaderAccess().getNetKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDomainHeaderAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDomainHeaderAccess().getAttributesAttributeParserRuleCall_3_0()); 
	    }
		lv_attributes_3_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDomainHeaderRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_3_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDomainHeaderAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleDomainElement
entryRuleDomainElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDomainElementRule()); }
	 iv_ruleDomainElement=ruleDomainElement 
	 { $current=$iv_ruleDomainElement.current; } 
	 EOF 
;

// Rule DomainElement
ruleDomainElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDomainElementAccess().getBasicNodeParserRuleCall_0()); 
    }
    this_BasicNode_0=ruleBasicNode
    { 
        $current = $this_BasicNode_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDomainElementAccess().getPotentialParserRuleCall_1()); 
    }
    this_Potential_1=rulePotential
    { 
        $current = $this_Potential_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDomainElementAccess().getClassDefinitionParserRuleCall_2()); 
    }
    this_ClassDefinition_2=ruleClassDefinition
    { 
        $current = $this_ClassDefinition_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getStatesAttributeParserRuleCall_0()); 
    }
    this_StatesAttribute_0=ruleStatesAttribute
    { 
        $current = $this_StatesAttribute_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getLabelAttributeParserRuleCall_1()); 
    }
    this_LabelAttribute_1=ruleLabelAttribute
    { 
        $current = $this_LabelAttribute_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getPositionAttributeParserRuleCall_2()); 
    }
    this_PositionAttribute_2=rulePositionAttribute
    { 
        $current = $this_PositionAttribute_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getSubtypeAttributeParserRuleCall_3()); 
    }
    this_SubtypeAttribute_3=ruleSubtypeAttribute
    { 
        $current = $this_SubtypeAttribute_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getStateValuesAttributeParserRuleCall_4()); 
    }
    this_StateValuesAttribute_4=ruleStateValuesAttribute
    { 
        $current = $this_StateValuesAttribute_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getApplicationAttributeParserRuleCall_5()); 
    }
    this_ApplicationAttribute_5=ruleApplicationAttribute
    { 
        $current = $this_ApplicationAttribute_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getNodeSizeAttributeParserRuleCall_6()); 
    }
    this_NodeSizeAttribute_6=ruleNodeSizeAttribute
    { 
        $current = $this_NodeSizeAttribute_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBasicNode
entryRuleBasicNode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicNodeRule()); }
	 iv_ruleBasicNode=ruleBasicNode 
	 { $current=$iv_ruleBasicNode.current; } 
	 EOF 
;

// Rule BasicNode
ruleBasicNode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBasicNodeAccess().getKeywordBasicNodeKeywordParserRuleCall_0_0()); 
	    }
		lv_keyword_0_0=ruleBasicNodeKeyword		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicNodeRule());
	        }
       		set(
       			$current, 
       			"keyword",
        		lv_keyword_0_0, 
        		"BasicNodeKeyword");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_id_1_0=RULE_ID
		{
			newLeafNode(lv_id_1_0, grammarAccess.getBasicNodeAccess().getIdIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBasicNodeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_1_0, 
        		"ID");
	    }

)
)?	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBasicNodeAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBasicNodeAccess().getAttributesAttributeParserRuleCall_3_0()); 
	    }
		lv_attributes_3_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBasicNodeRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_3_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBasicNodeAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleBasicNodeKeyword
entryRuleBasicNodeKeyword returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicNodeKeywordRule()); } 
	 iv_ruleBasicNodeKeyword=ruleBasicNodeKeyword 
	 { $current=$iv_ruleBasicNodeKeyword.current.getText(); }  
	 EOF 
;

// Rule BasicNodeKeyword
ruleBasicNodeKeyword returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	kw='discrete' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBasicNodeKeywordAccess().getDiscreteKeyword_0_0_0()); 
    }

    |
	kw='continuous' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBasicNodeKeywordAccess().getContinuousKeyword_0_0_1()); 
    }
)?
	kw='node' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBasicNodeKeywordAccess().getNodeKeyword_0_1()); 
    }
)
    |
	kw='decision' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBasicNodeKeywordAccess().getDecisionKeyword_1()); 
    }

    |
	kw='utility' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBasicNodeKeywordAccess().getUtilityKeyword_2()); 
    }

    |
	kw='function' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBasicNodeKeywordAccess().getFunctionKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleStatesAttribute
entryRuleStatesAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatesAttributeRule()); }
	 iv_ruleStatesAttribute=ruleStatesAttribute 
	 { $current=$iv_ruleStatesAttribute.current; } 
	 EOF 
;

// Rule StatesAttribute
ruleStatesAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatesAttributeAccess().getStatesAttributeAction_0(),
            $current);
    }
)	otherlv_1='states' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStatesAttributeAccess().getStatesKeyword_1());
    }
	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStatesAttributeAccess().getEqualsSignKeyword_2());
    }
	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStatesAttributeAccess().getLeftParenthesisKeyword_3());
    }
(
(
		lv_states_4_0=RULE_STRING
		{
			newLeafNode(lv_states_4_0, grammarAccess.getStatesAttributeAccess().getStatesSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatesAttributeRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"states",
        		lv_states_4_0, 
        		"STRING");
	    }

)
)*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStatesAttributeAccess().getRightParenthesisKeyword_5());
    }
	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStatesAttributeAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleLabelAttribute
entryRuleLabelAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLabelAttributeRule()); }
	 iv_ruleLabelAttribute=ruleLabelAttribute 
	 { $current=$iv_ruleLabelAttribute.current; } 
	 EOF 
;

// Rule LabelAttribute
ruleLabelAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='label' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLabelAttributeAccess().getLabelKeyword_0());
    }
	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLabelAttributeAccess().getEqualsSignKeyword_1());
    }
(
(
		lv_value_2_0=RULE_STRING
		{
			newLeafNode(lv_value_2_0, grammarAccess.getLabelAttributeAccess().getValueSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLabelAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"STRING");
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLabelAttributeAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRulePositionAttribute
entryRulePositionAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPositionAttributeRule()); }
	 iv_rulePositionAttribute=rulePositionAttribute 
	 { $current=$iv_rulePositionAttribute.current; } 
	 EOF 
;

// Rule PositionAttribute
rulePositionAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='position' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPositionAttributeAccess().getPositionKeyword_0());
    }
	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPositionAttributeAccess().getEqualsSignKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPositionAttributeAccess().getLeftParenthesisKeyword_2());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPositionAttributeAccess().getIntegerLiteralAction_3(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPositionAttributeAccess().getXIntegerParserRuleCall_4_0()); 
	    }
		lv_x_4_0=ruleInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPositionAttributeRule());
	        }
       		set(
       			$current, 
       			"x",
        		lv_x_4_0, 
        		"Integer");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPositionAttributeAccess().getYIntegerParserRuleCall_5_0()); 
	    }
		lv_y_5_0=ruleInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPositionAttributeRule());
	        }
       		set(
       			$current, 
       			"y",
        		lv_y_5_0, 
        		"Integer");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPositionAttributeAccess().getRightParenthesisKeyword_6());
    }
	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPositionAttributeAccess().getSemicolonKeyword_7());
    }
)
;





// Entry rule entryRuleSubtypeAttribute
entryRuleSubtypeAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubtypeAttributeRule()); }
	 iv_ruleSubtypeAttribute=ruleSubtypeAttribute 
	 { $current=$iv_ruleSubtypeAttribute.current; } 
	 EOF 
;

// Rule SubtypeAttribute
ruleSubtypeAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='subtype' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSubtypeAttributeAccess().getSubtypeKeyword_0());
    }
	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSubtypeAttributeAccess().getEqualsSignKeyword_1());
    }
(
(
(
		lv_subtype_2_1=	'label' 
    {
        newLeafNode(lv_subtype_2_1, grammarAccess.getSubtypeAttributeAccess().getSubtypeLabelKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubtypeAttributeRule());
	        }
       		setWithLastConsumed($current, "subtype", lv_subtype_2_1, null);
	    }

    |		lv_subtype_2_2=	'boolean' 
    {
        newLeafNode(lv_subtype_2_2, grammarAccess.getSubtypeAttributeAccess().getSubtypeBooleanKeyword_2_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubtypeAttributeRule());
	        }
       		setWithLastConsumed($current, "subtype", lv_subtype_2_2, null);
	    }

    |		lv_subtype_2_3=	'number' 
    {
        newLeafNode(lv_subtype_2_3, grammarAccess.getSubtypeAttributeAccess().getSubtypeNumberKeyword_2_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubtypeAttributeRule());
	        }
       		setWithLastConsumed($current, "subtype", lv_subtype_2_3, null);
	    }

    |		lv_subtype_2_4=	'interval' 
    {
        newLeafNode(lv_subtype_2_4, grammarAccess.getSubtypeAttributeAccess().getSubtypeIntervalKeyword_2_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubtypeAttributeRule());
	        }
       		setWithLastConsumed($current, "subtype", lv_subtype_2_4, null);
	    }

)

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSubtypeAttributeAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleStateValuesAttribute
entryRuleStateValuesAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateValuesAttributeRule()); }
	 iv_ruleStateValuesAttribute=ruleStateValuesAttribute 
	 { $current=$iv_ruleStateValuesAttribute.current; } 
	 EOF 
;

// Rule StateValuesAttribute
ruleStateValuesAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='state_values' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStateValuesAttributeAccess().getState_valuesKeyword_0());
    }
	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStateValuesAttributeAccess().getEqualsSignKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStateValuesAttributeAccess().getLeftParenthesisKeyword_2());
    }
(
(
		lv_numbers_3_0=RULE_INT
		{
			newLeafNode(lv_numbers_3_0, grammarAccess.getStateValuesAttributeAccess().getNumbersINTTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateValuesAttributeRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"numbers",
        		lv_numbers_3_0, 
        		"INT");
	    }

)
)+	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStateValuesAttributeAccess().getRightParenthesisKeyword_4());
    }
	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getStateValuesAttributeAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleApplicationAttribute
entryRuleApplicationAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getApplicationAttributeRule()); }
	 iv_ruleApplicationAttribute=ruleApplicationAttribute 
	 { $current=$iv_ruleApplicationAttribute.current; } 
	 EOF 
;

// Rule ApplicationAttribute
ruleApplicationAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_key_0_0=RULE_ID
		{
			newLeafNode(lv_key_0_0, grammarAccess.getApplicationAttributeAccess().getKeyIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getApplicationAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"key",
        		lv_key_0_0, 
        		"ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getApplicationAttributeAccess().getEqualsSignKeyword_1());
    }
(
(
		lv_value_2_0=RULE_STRING
		{
			newLeafNode(lv_value_2_0, grammarAccess.getApplicationAttributeAccess().getValueSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getApplicationAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"STRING");
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getApplicationAttributeAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleNodeSizeAttribute
entryRuleNodeSizeAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeSizeAttributeRule()); }
	 iv_ruleNodeSizeAttribute=ruleNodeSizeAttribute 
	 { $current=$iv_ruleNodeSizeAttribute.current; } 
	 EOF 
;

// Rule NodeSizeAttribute
ruleNodeSizeAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='node_size' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNodeSizeAttributeAccess().getNode_sizeKeyword_0());
    }
	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNodeSizeAttributeAccess().getEqualsSignKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNodeSizeAttributeAccess().getLeftParenthesisKeyword_2());
    }
(
(
		lv_width_3_0=RULE_INT
		{
			newLeafNode(lv_width_3_0, grammarAccess.getNodeSizeAttributeAccess().getWidthINTTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeSizeAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"width",
        		lv_width_3_0, 
        		"INT");
	    }

)
)(
(
		lv_height_4_0=RULE_INT
		{
			newLeafNode(lv_height_4_0, grammarAccess.getNodeSizeAttributeAccess().getHeightINTTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNodeSizeAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"height",
        		lv_height_4_0, 
        		"INT");
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNodeSizeAttributeAccess().getRightParenthesisKeyword_5());
    }
	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getNodeSizeAttributeAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRulePotential
entryRulePotential returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPotentialRule()); }
	 iv_rulePotential=rulePotential 
	 { $current=$iv_rulePotential.current; } 
	 EOF 
;

// Rule Potential
rulePotential returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='potential' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPotentialAccess().getPotentialKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPotentialAccess().getGraphPotentialGraphParserRuleCall_1_0()); 
	    }
		lv_graph_1_0=rulePotentialGraph		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPotentialRule());
	        }
       		set(
       			$current, 
       			"graph",
        		lv_graph_1_0, 
        		"PotentialGraph");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPotentialAccess().getModelPotentialModelParserRuleCall_2_0()); 
	    }
		lv_model_2_0=rulePotentialModel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPotentialRule());
	        }
       		set(
       			$current, 
       			"model",
        		lv_model_2_0, 
        		"PotentialModel");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePotentialGraph
entryRulePotentialGraph returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPotentialGraphRule()); }
	 iv_rulePotentialGraph=rulePotentialGraph 
	 { $current=$iv_rulePotentialGraph.current; } 
	 EOF 
;

// Rule PotentialGraph
rulePotentialGraph returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPotentialGraphAccess().getPotentialGraphAction_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPotentialGraphAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_children_2_0=RULE_ID
		{
			newLeafNode(lv_children_2_0, grammarAccess.getPotentialGraphAccess().getChildrenIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPotentialGraphRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"children",
        		lv_children_2_0, 
        		"ID");
	    }

)
)*(	otherlv_3='|' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPotentialGraphAccess().getVerticalLineKeyword_3_0());
    }
(
(
		lv_parents_4_0=RULE_ID
		{
			newLeafNode(lv_parents_4_0, grammarAccess.getPotentialGraphAccess().getParentsIDTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPotentialGraphRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"parents",
        		lv_parents_4_0, 
        		"ID");
	    }

)
)*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPotentialGraphAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRulePotentialModel
entryRulePotentialModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPotentialModelRule()); }
	 iv_rulePotentialModel=rulePotentialModel 
	 { $current=$iv_rulePotentialModel.current; } 
	 EOF 
;

// Rule PotentialModel
rulePotentialModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPotentialModelAccess().getPotentialModelAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPotentialModelAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPotentialModelAccess().getAttributesPotentialAttributeParserRuleCall_2_0()); 
	    }
		lv_attributes_2_0=rulePotentialAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPotentialModelRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_2_0, 
        		"PotentialAttribute");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPotentialModelAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRulePotentialAttribute
entryRulePotentialAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPotentialAttributeRule()); }
	 iv_rulePotentialAttribute=rulePotentialAttribute 
	 { $current=$iv_rulePotentialAttribute.current; } 
	 EOF 
;

// Rule PotentialAttribute
rulePotentialAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPotentialAttributeAccess().getPotentialDataAttributeParserRuleCall_0()); 
    }
    this_PotentialDataAttribute_0=rulePotentialDataAttribute
    { 
        $current = $this_PotentialDataAttribute_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPotentialAttributeAccess().getPotentialTableAttributeParserRuleCall_1()); 
    }
    this_PotentialTableAttribute_1=rulePotentialTableAttribute
    { 
        $current = $this_PotentialTableAttribute_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePotentialDataAttribute
entryRulePotentialDataAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPotentialDataAttributeRule()); }
	 iv_rulePotentialDataAttribute=rulePotentialDataAttribute 
	 { $current=$iv_rulePotentialDataAttribute.current; } 
	 EOF 
;

// Rule PotentialDataAttribute
rulePotentialDataAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPotentialDataAttributeAccess().getPotentialDataAttributeAction_0(),
            $current);
    }
)	otherlv_1='data' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPotentialDataAttributeAccess().getDataKeyword_1());
    }
	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPotentialDataAttributeAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPotentialDataAttributeAccess().getDataMatrixRowParserRuleCall_3_0()); 
	    }
		lv_data_3_0=ruleMatrixRow		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPotentialDataAttributeRule());
	        }
       		set(
       			$current, 
       			"data",
        		lv_data_3_0, 
        		"MatrixRow");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPotentialDataAttributeAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleMatrixRow
entryRuleMatrixRow returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMatrixRowRule()); }
	 iv_ruleMatrixRow=ruleMatrixRow 
	 { $current=$iv_ruleMatrixRow.current; } 
	 EOF 
;

// Rule MatrixRow
ruleMatrixRow returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getMatrixRowAccess().getMatrixRowAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMatrixRowAccess().getR5List5ParserRuleCall_0_1_0()); 
	    }
		lv_r5_1_0=ruleList5		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMatrixRowRule());
	        }
       		add(
       			$current, 
       			"r5",
        		lv_r5_1_0, 
        		"List5");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getMatrixRowAccess().getMatrixRowAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMatrixRowAccess().getR4List4ParserRuleCall_1_1_0()); 
	    }
		lv_r4_3_0=ruleList4		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMatrixRowRule());
	        }
       		add(
       			$current, 
       			"r4",
        		lv_r4_3_0, 
        		"List4");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getMatrixRowAccess().getMatrixRowAction_2_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMatrixRowAccess().getR3List3ParserRuleCall_2_1_0()); 
	    }
		lv_r3_5_0=ruleList3		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMatrixRowRule());
	        }
       		add(
       			$current, 
       			"r3",
        		lv_r3_5_0, 
        		"List3");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getMatrixRowAccess().getMatrixRowAction_3_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMatrixRowAccess().getR2List2ParserRuleCall_3_1_0()); 
	    }
		lv_r2_7_0=ruleList2		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMatrixRowRule());
	        }
       		add(
       			$current, 
       			"r2",
        		lv_r2_7_0, 
        		"List2");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getMatrixRowAccess().getMatrixRowAction_4_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMatrixRowAccess().getR1List1ParserRuleCall_4_1_0()); 
	    }
		lv_r1_9_0=ruleList1		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMatrixRowRule());
	        }
       		set(
       			$current, 
       			"r1",
        		lv_r1_9_0, 
        		"List1");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleList5
entryRuleList5 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getList5Rule()); }
	 iv_ruleList5=ruleList5 
	 { $current=$iv_ruleList5.current; } 
	 EOF 
;

// Rule List5
ruleList5 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getList5Access().getList5Action_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getList5Access().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getList5Access().getListList4ParserRuleCall_2_0()); 
	    }
		lv_list_2_0=ruleList4		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getList5Rule());
	        }
       		add(
       			$current, 
       			"list",
        		lv_list_2_0, 
        		"List4");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getList5Access().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleList4
entryRuleList4 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getList4Rule()); }
	 iv_ruleList4=ruleList4 
	 { $current=$iv_ruleList4.current; } 
	 EOF 
;

// Rule List4
ruleList4 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getList4Access().getList4Action_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getList4Access().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getList4Access().getListList3ParserRuleCall_2_0()); 
	    }
		lv_list_2_0=ruleList3		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getList4Rule());
	        }
       		add(
       			$current, 
       			"list",
        		lv_list_2_0, 
        		"List3");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getList4Access().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleList3
entryRuleList3 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getList3Rule()); }
	 iv_ruleList3=ruleList3 
	 { $current=$iv_ruleList3.current; } 
	 EOF 
;

// Rule List3
ruleList3 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getList3Access().getList3Action_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getList3Access().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getList3Access().getListList2ParserRuleCall_2_0()); 
	    }
		lv_list_2_0=ruleList2		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getList3Rule());
	        }
       		add(
       			$current, 
       			"list",
        		lv_list_2_0, 
        		"List2");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getList3Access().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleList2
entryRuleList2 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getList2Rule()); }
	 iv_ruleList2=ruleList2 
	 { $current=$iv_ruleList2.current; } 
	 EOF 
;

// Rule List2
ruleList2 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getList2Access().getList2Action_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getList2Access().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getList2Access().getListList1ParserRuleCall_2_0()); 
	    }
		lv_list_2_0=ruleList1		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getList2Rule());
	        }
       		add(
       			$current, 
       			"list",
        		lv_list_2_0, 
        		"List1");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getList2Access().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleList1
entryRuleList1 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getList1Rule()); }
	 iv_ruleList1=ruleList1 
	 { $current=$iv_ruleList1.current; } 
	 EOF 
;

// Rule List1
ruleList1 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getList1Access().getList1Action_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getList1Access().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getList1Access().getItemsUnaryExpressionParserRuleCall_2_0()); 
	    }
		lv_items_2_0=ruleunaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getList1Rule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_2_0, 
        		"unaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getList1Access().getRightParenthesisKeyword_3());
    }
)
;







// Entry rule entryRuleMeanTerm
entryRuleMeanTerm returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMeanTermRule()); } 
	 iv_ruleMeanTerm=ruleMeanTerm 
	 { $current=$iv_ruleMeanTerm.current.getText(); }  
	 EOF 
;

// Rule MeanTerm
ruleMeanTerm returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_DOUBLE_0=RULE_DOUBLE    {
		$current.merge(this_DOUBLE_0);
    }

    { 
    newLeafNode(this_DOUBLE_0, grammarAccess.getMeanTermAccess().getDOUBLETerminalRuleCall_0()); 
    }

    |(    this_DOUBLE_1=RULE_DOUBLE    {
		$current.merge(this_DOUBLE_1);
    }

    { 
    newLeafNode(this_DOUBLE_1, grammarAccess.getMeanTermAccess().getDOUBLETerminalRuleCall_1_0()); 
    }

	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMeanTermAccess().getAsteriskKeyword_1_1()); 
    }
    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    newLeafNode(this_ID_3, grammarAccess.getMeanTermAccess().getIDTerminalRuleCall_1_2()); 
    }
)
    |    this_ID_4=RULE_ID    {
		$current.merge(this_ID_4);
    }

    { 
    newLeafNode(this_ID_4, grammarAccess.getMeanTermAccess().getIDTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRulePotentialTableAttribute
entryRulePotentialTableAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPotentialTableAttributeRule()); }
	 iv_rulePotentialTableAttribute=rulePotentialTableAttribute 
	 { $current=$iv_rulePotentialTableAttribute.current; } 
	 EOF 
;

// Rule PotentialTableAttribute
rulePotentialTableAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPotentialTableAttributeAccess().getNodesModelNodesAttributeParserRuleCall_0_0()); 
	    }
		lv_nodes_0_0=ruleModelNodesAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPotentialTableAttributeRule());
	        }
       		set(
       			$current, 
       			"nodes",
        		lv_nodes_0_0, 
        		"ModelNodesAttribute");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPotentialTableAttributeAccess().getSamplesSamplesAttributeParserRuleCall_1_0()); 
	    }
		lv_samples_1_0=ruleSamplesAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPotentialTableAttributeRule());
	        }
       		set(
       			$current, 
       			"samples",
        		lv_samples_1_0, 
        		"SamplesAttribute");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getPotentialTableAttributeAccess().getDataModelDataAttributeParserRuleCall_2_0()); 
	    }
		lv_data_2_0=ruleModelDataAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPotentialTableAttributeRule());
	        }
       		set(
       			$current, 
       			"data",
        		lv_data_2_0, 
        		"ModelDataAttribute");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleModelNodesAttribute
entryRuleModelNodesAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelNodesAttributeRule()); }
	 iv_ruleModelNodesAttribute=ruleModelNodesAttribute 
	 { $current=$iv_ruleModelNodesAttribute.current; } 
	 EOF 
;

// Rule ModelNodesAttribute
ruleModelNodesAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getModelNodesAttributeAccess().getModelNodesAttributeAction_0(),
            $current);
    }
)	otherlv_1='model_nodes' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModelNodesAttributeAccess().getModel_nodesKeyword_1());
    }
	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getModelNodesAttributeAccess().getEqualsSignKeyword_2());
    }
	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModelNodesAttributeAccess().getLeftParenthesisKeyword_3());
    }
(
(
		lv_configurations_4_0=RULE_ID
		{
			newLeafNode(lv_configurations_4_0, grammarAccess.getModelNodesAttributeAccess().getConfigurationsIDTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModelNodesAttributeRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"configurations",
        		lv_configurations_4_0, 
        		"ID");
	    }

)
)*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getModelNodesAttributeAccess().getRightParenthesisKeyword_5());
    }
	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getModelNodesAttributeAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleSamplesAttribute
entryRuleSamplesAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSamplesAttributeRule()); }
	 iv_ruleSamplesAttribute=ruleSamplesAttribute 
	 { $current=$iv_ruleSamplesAttribute.current; } 
	 EOF 
;

// Rule SamplesAttribute
ruleSamplesAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='samples_per_interval' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSamplesAttributeAccess().getSamples_per_intervalKeyword_0());
    }
	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSamplesAttributeAccess().getEqualsSignKeyword_1());
    }
(
(
		lv_value_2_0=RULE_INT
		{
			newLeafNode(lv_value_2_0, grammarAccess.getSamplesAttributeAccess().getValueINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSamplesAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"INT");
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSamplesAttributeAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleModelDataAttribute
entryRuleModelDataAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelDataAttributeRule()); }
	 iv_ruleModelDataAttribute=ruleModelDataAttribute 
	 { $current=$iv_ruleModelDataAttribute.current; } 
	 EOF 
;

// Rule ModelDataAttribute
ruleModelDataAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getModelDataAttributeAccess().getModelDataAttributeAction_0(),
            $current);
    }
)	otherlv_1='model_data' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModelDataAttributeAccess().getModel_dataKeyword_1());
    }
	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getModelDataAttributeAccess().getEqualsSignKeyword_2());
    }
	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModelDataAttributeAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelDataAttributeAccess().getSequenceExpressionSequenceParserRuleCall_4_0()); 
	    }
		lv_sequence_4_0=ruleExpressionSequence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelDataAttributeRule());
	        }
       		set(
       			$current, 
       			"sequence",
        		lv_sequence_4_0, 
        		"ExpressionSequence");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getModelDataAttributeAccess().getRightParenthesisKeyword_5());
    }
	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getModelDataAttributeAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleClassDefinition
entryRuleClassDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassDefinitionRule()); }
	 iv_ruleClassDefinition=ruleClassDefinition 
	 { $current=$iv_ruleClassDefinition.current; } 
	 EOF 
;

// Rule ClassDefinition
ruleClassDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='class' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClassDefinitionAccess().getClassKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getClassDefinitionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getClassDefinitionAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassDefinitionAccess().getElementsClassElementParserRuleCall_3_0()); 
	    }
		lv_elements_3_0=ruleClassElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassDefinitionRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"ClassElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getClassDefinitionAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleClassElement
entryRuleClassElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassElementRule()); }
	 iv_ruleClassElement=ruleClassElement 
	 { $current=$iv_ruleClassElement.current; } 
	 EOF 
;

// Rule ClassElement
ruleClassElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getClassElementAccess().getDomainElementParserRuleCall_0()); 
    }
    this_DomainElement_0=ruleDomainElement
    { 
        $current = $this_DomainElement_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getClassElementAccess().getAttributeParserRuleCall_1()); 
    }
    this_Attribute_1=ruleAttribute
    { 
        $current = $this_Attribute_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getClassElementAccess().getClassInstanceParserRuleCall_2()); 
    }
    this_ClassInstance_2=ruleClassInstance
    { 
        $current = $this_ClassInstance_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleClassInstance
entryRuleClassInstance returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassInstanceRule()); }
	 iv_ruleClassInstance=ruleClassInstance 
	 { $current=$iv_ruleClassInstance.current; } 
	 EOF 
;

// Rule ClassInstance
ruleClassInstance returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='instance' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClassInstanceAccess().getInstanceKeyword_0());
    }
(
(
		lv_instanceName_1_0=RULE_ID
		{
			newLeafNode(lv_instanceName_1_0, grammarAccess.getClassInstanceAccess().getInstanceNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassInstanceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"instanceName",
        		lv_instanceName_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getClassInstanceAccess().getColonKeyword_2());
    }
(
(
		lv_className_3_0=RULE_ID
		{
			newLeafNode(lv_className_3_0, grammarAccess.getClassInstanceAccess().getClassNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassInstanceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"className",
        		lv_className_3_0, 
        		"ID");
	    }

)
)	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getClassInstanceAccess().getLeftParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassInstanceAccess().getInputInputBindingsParserRuleCall_5_0()); 
	    }
		lv_input_5_0=ruleInputBindings		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassInstanceRule());
	        }
       		set(
       			$current, 
       			"input",
        		lv_input_5_0, 
        		"InputBindings");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getClassInstanceAccess().getSemicolonKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassInstanceAccess().getOutputOutputBindingsParserRuleCall_6_1_0()); 
	    }
		lv_output_7_0=ruleOutputBindings		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassInstanceRule());
	        }
       		set(
       			$current, 
       			"output",
        		lv_output_7_0, 
        		"OutputBindings");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getClassInstanceAccess().getRightParenthesisKeyword_7());
    }
	otherlv_9='{' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getClassInstanceAccess().getLeftCurlyBracketKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassInstanceAccess().getAttributesNodeAttributesParserRuleCall_9_0()); 
	    }
		lv_attributes_10_0=ruleNodeAttributes		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassInstanceRule());
	        }
       		set(
       			$current, 
       			"attributes",
        		lv_attributes_10_0, 
        		"NodeAttributes");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getClassInstanceAccess().getRightCurlyBracketKeyword_10());
    }
)
;





// Entry rule entryRuleInputBindings
entryRuleInputBindings returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInputBindingsRule()); }
	 iv_ruleInputBindings=ruleInputBindings 
	 { $current=$iv_ruleInputBindings.current; } 
	 EOF 
;

// Rule InputBindings
ruleInputBindings returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInputBindingsAccess().getLhsInputBindingParserRuleCall_0_0()); 
	    }
		lv_lhs_0_0=ruleInputBinding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInputBindingsRule());
	        }
       		set(
       			$current, 
       			"lhs",
        		lv_lhs_0_0, 
        		"InputBinding");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInputBindingsAccess().getCommaKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInputBindingsAccess().getRhsInputBindingsParserRuleCall_2_0()); 
	    }
		lv_rhs_2_0=ruleInputBindings		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInputBindingsRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_2_0, 
        		"InputBindings");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleInputBinding
entryRuleInputBinding returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInputBindingRule()); }
	 iv_ruleInputBinding=ruleInputBinding 
	 { $current=$iv_ruleInputBinding.current; } 
	 EOF 
;

// Rule InputBinding
ruleInputBinding returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_formal_0_0=RULE_ID
		{
			newLeafNode(lv_formal_0_0, grammarAccess.getInputBindingAccess().getFormalIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInputBindingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"formal",
        		lv_formal_0_0, 
        		"ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInputBindingAccess().getEqualsSignKeyword_1());
    }
(
(
		lv_actual_2_0=RULE_ID
		{
			newLeafNode(lv_actual_2_0, grammarAccess.getInputBindingAccess().getActualIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInputBindingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"actual",
        		lv_actual_2_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleOutputBindings
entryRuleOutputBindings returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutputBindingsRule()); }
	 iv_ruleOutputBindings=ruleOutputBindings 
	 { $current=$iv_ruleOutputBindings.current; } 
	 EOF 
;

// Rule OutputBindings
ruleOutputBindings returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOutputBindingsAccess().getLhsOutputBindingParserRuleCall_0_0()); 
	    }
		lv_lhs_0_0=ruleOutputBinding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOutputBindingsRule());
	        }
       		set(
       			$current, 
       			"lhs",
        		lv_lhs_0_0, 
        		"OutputBinding");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOutputBindingsAccess().getCommaKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOutputBindingsAccess().getRhsOutputBindingsParserRuleCall_2_0()); 
	    }
		lv_rhs_2_0=ruleOutputBindings		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOutputBindingsRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_2_0, 
        		"OutputBindings");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOutputBinding
entryRuleOutputBinding returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutputBindingRule()); }
	 iv_ruleOutputBinding=ruleOutputBinding 
	 { $current=$iv_ruleOutputBinding.current; } 
	 EOF 
;

// Rule OutputBinding
ruleOutputBinding returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_actual_0_0=RULE_ID
		{
			newLeafNode(lv_actual_0_0, grammarAccess.getOutputBindingAccess().getActualIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOutputBindingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"actual",
        		lv_actual_0_0, 
        		"ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOutputBindingAccess().getEqualsSignKeyword_1());
    }
(
(
		lv_formal_2_0=RULE_ID
		{
			newLeafNode(lv_formal_2_0, grammarAccess.getOutputBindingAccess().getFormalIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOutputBindingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"formal",
        		lv_formal_2_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleNodeAttributes
entryRuleNodeAttributes returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeAttributesRule()); }
	 iv_ruleNodeAttributes=ruleNodeAttributes 
	 { $current=$iv_ruleNodeAttributes.current; } 
	 EOF 
;

// Rule NodeAttributes
ruleNodeAttributes returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNodeAttributesAccess().getLabelAttributeParserRuleCall_0()); 
    }
    this_LabelAttribute_0=ruleLabelAttribute
    { 
        $current = $this_LabelAttribute_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNodeAttributesAccess().getPositionAttributeParserRuleCall_1()); 
    }
    this_PositionAttribute_1=rulePositionAttribute
    { 
        $current = $this_PositionAttribute_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNodeAttributesAccess().getApplicationAttributeParserRuleCall_2()); 
    }
    this_ApplicationAttribute_2=ruleApplicationAttribute
    { 
        $current = $this_ApplicationAttribute_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleExpressionSequence
entryRuleExpressionSequence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionSequenceRule()); }
	 iv_ruleExpressionSequence=ruleExpressionSequence 
	 { $current=$iv_ruleExpressionSequence.current; } 
	 EOF 
;

// Rule ExpressionSequence
ruleExpressionSequence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpressionSequenceAccess().getExpressionSequenceAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionSequenceAccess().getExpressionsExpressionParserRuleCall_1_0_0()); 
	    }
		lv_expressions_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionSequenceRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExpressionSequenceAccess().getCommaKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionSequenceAccess().getExpressionsExpressionParserRuleCall_1_1_1_0()); 
	    }
		lv_expressions_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionSequenceRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentOpExpressionParserRuleCall_0()); 
    }
    this_assignmentOpExpression_0=ruleassignmentOpExpression
    { 
        $current = $this_assignmentOpExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExpressionAccess().getAssignmentLeftAction_1_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'=' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getExpressionAccess().getOpEqualsSignKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "=");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getRightOrExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleorExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"orExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleassignmentOpExpression
entryRuleassignmentOpExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentOpExpressionRule()); }
	 iv_ruleassignmentOpExpression=ruleassignmentOpExpression 
	 { $current=$iv_ruleassignmentOpExpression.current; } 
	 EOF 
;

// Rule assignmentOpExpression
ruleassignmentOpExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAssignmentOpExpressionAccess().getOrExpressionParserRuleCall_0()); 
    }
    this_orExpression_0=ruleorExpression
    { 
        $current = $this_orExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAssignmentOpExpressionAccess().getAssignmentOpLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentOpExpressionAccess().getOpAssignOpParserRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleassignOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentOpExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"assignOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentOpExpressionAccess().getRightOrExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleorExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentOpExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"orExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleassignOp
entryRuleassignOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignOpRule()); } 
	 iv_ruleassignOp=ruleassignOp 
	 { $current=$iv_ruleassignOp.current.getText(); }  
	 EOF 
;

// Rule assignOp
ruleassignOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignOpAccess().getPlusSignEqualsSignKeyword_0()); 
    }

    |
	kw='-=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignOpAccess().getHyphenMinusEqualsSignKeyword_1()); 
    }

    |
	kw='*=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignOpAccess().getAsteriskEqualsSignKeyword_2()); 
    }

    |
	kw='/=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignOpAccess().getSolidusEqualsSignKeyword_3()); 
    }

    |
	kw='%=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignOpAccess().getPercentSignEqualsSignKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleorExpression
entryRuleorExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	 iv_ruleorExpression=ruleorExpression 
	 { $current=$iv_ruleorExpression.current; } 
	 EOF 
;

// Rule orExpression
ruleorExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); 
    }
    this_andExpression_0=ruleandExpression
    { 
        $current = $this_andExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrExpressionAccess().getOrExpLeftAction_1_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'||' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getOrExpressionAccess().getOpVerticalLineVerticalLineKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOrExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "||");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpressionAccess().getRightOrExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleorExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"orExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleandExpression
entryRuleandExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	 iv_ruleandExpression=ruleandExpression 
	 { $current=$iv_ruleandExpression.current; } 
	 EOF 
;

// Rule andExpression
ruleandExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAndExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
    }
    this_relationalExpression_0=rulerelationalExpression
    { 
        $current = $this_relationalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndExpressionAccess().getAndExpLeftAction_1_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'&&' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getAndExpressionAccess().getOpAmpersandAmpersandKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAndExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "&&");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleandExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"andExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulerelationalExpression
entryRulerelationalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalExpressionRule()); }
	 iv_rulerelationalExpression=rulerelationalExpression 
	 { $current=$iv_rulerelationalExpression.current; } 
	 EOF 
;

// Rule relationalExpression
rulerelationalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getAdditiveExpressionParserRuleCall_0()); 
    }
    this_additiveExpression_0=ruleadditiveExpression
    { 
        $current = $this_additiveExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalExpressionAccess().getRelationalExpLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOpRelOpsParserRuleCall_1_1_0()); 
	    }
		lv_op_2_0=rulerelOps		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"relOps");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRightRelationalExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulerelationalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"relationalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulerelOps
entryRulerelOps returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelOpsRule()); } 
	 iv_rulerelOps=rulerelOps 
	 { $current=$iv_rulerelOps.current.getText(); }  
	 EOF 
;

// Rule relOps
rulerelOps returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelOpsAccess().getExclamationMarkEqualsSignKeyword_0()); 
    }

    |
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelOpsAccess().getEqualsSignEqualsSignKeyword_1()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelOpsAccess().getLessThanSignEqualsSignKeyword_2()); 
    }

    |
	kw='<>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelOpsAccess().getLessThanSignGreaterThanSignKeyword_3()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelOpsAccess().getGreaterThanSignEqualsSignKeyword_4()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelOpsAccess().getLessThanSignKeyword_5()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRelOpsAccess().getGreaterThanSignKeyword_6()); 
    }
)
    ;





// Entry rule entryRuleadditiveExpression
entryRuleadditiveExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	 iv_ruleadditiveExpression=ruleadditiveExpression 
	 { $current=$iv_ruleadditiveExpression.current; } 
	 EOF 
;

// Rule additiveExpression
ruleadditiveExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); 
    }
    this_multiplicativeExpression_0=rulemultiplicativeExpression
    { 
        $current = $this_multiplicativeExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditiveExpressionAccess().getAdditiveExpLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOpArithOpsParserRuleCall_1_1_0()); 
	    }
		lv_op_2_0=rulearithOps		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"arithOps");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRightAdditiveExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleadditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"additiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulearithOps
entryRulearithOps returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getArithOpsRule()); } 
	 iv_rulearithOps=rulearithOps 
	 { $current=$iv_rulearithOps.current.getText(); }  
	 EOF 
;

// Rule arithOps
rulearithOps returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArithOpsAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArithOpsAccess().getHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRulemultiplicativeExpression
entryRulemultiplicativeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	 iv_rulemultiplicativeExpression=rulemultiplicativeExpression 
	 { $current=$iv_rulemultiplicativeExpression.current; } 
	 EOF 
;

// Rule multiplicativeExpression
rulemultiplicativeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0()); 
    }
    this_unaryExpression_0=ruleunaryExpression
    { 
        $current = $this_unaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicativeExpressionAccess().getMultiplicativeExpLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOpMultOpsParserRuleCall_1_1_0()); 
	    }
		lv_op_2_0=rulemultOps		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"multOps");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulemultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"multiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulemultOps
entryRulemultOps returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultOpsRule()); } 
	 iv_rulemultOps=rulemultOps 
	 { $current=$iv_rulemultOps.current.getText(); }  
	 EOF 
;

// Rule multOps
rulemultOps returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMultOpsAccess().getAsteriskKeyword_0()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMultOpsAccess().getSolidusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleunaryExpression
entryRuleunaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	 iv_ruleunaryExpression=ruleunaryExpression 
	 { $current=$iv_ruleunaryExpression.current; } 
	 EOF 
;

// Rule unaryExpression
ruleunaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getTermExpressionParserRuleCall_0()); 
    }
    this_TermExpression_0=ruleTermExpression
    { 
        $current = $this_TermExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getOpUnaryOpsParserRuleCall_1_0_0()); 
	    }
		lv_op_1_0=ruleunaryOps		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"unaryOps");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExprTermExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expr_2_0=ruleTermExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"TermExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleunaryOps
entryRuleunaryOps returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryOpsRule()); } 
	 iv_ruleunaryOps=ruleunaryOps 
	 { $current=$iv_ruleunaryOps.current.getText(); }  
	 EOF 
;

// Rule unaryOps
ruleunaryOps returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnaryOpsAccess().getHyphenMinusKeyword_0()); 
    }

    |
	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnaryOpsAccess().getExclamationMarkKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleOperator
entryRuleOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperatorRule()); }
	 iv_ruleOperator=ruleOperator 
	 { $current=$iv_ruleOperator.current; } 
	 EOF 
;

// Rule Operator
ruleOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOperatorAccess().getOpOperatorNameParserRuleCall_0_0()); 
	    }
		lv_op_0_0=ruleOperatorName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperatorRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"OperatorName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOperatorAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperatorAccess().getSequenceExpressionSequenceParserRuleCall_2_0()); 
	    }
		lv_sequence_2_0=ruleExpressionSequence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperatorRule());
	        }
       		set(
       			$current, 
       			"sequence",
        		lv_sequence_2_0, 
        		"ExpressionSequence");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOperatorAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleTermExpression
entryRuleTermExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTermExpressionRule()); }
	 iv_ruleTermExpression=ruleTermExpression 
	 { $current=$iv_ruleTermExpression.current; } 
	 EOF 
;

// Rule TermExpression
ruleTermExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTermExpressionAccess().getTermLiteralParserRuleCall_0()); 
    }
    this_TermLiteral_0=ruleTermLiteral
    { 
        $current = $this_TermLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTermExpressionAccess().getOperatorParserRuleCall_1()); 
    }
    this_Operator_1=ruleOperator
    { 
        $current = $this_Operator_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTermLiteral
entryRuleTermLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTermLiteralRule()); }
	 iv_ruleTermLiteral=ruleTermLiteral 
	 { $current=$iv_ruleTermLiteral.current; } 
	 EOF 
;

// Rule TermLiteral
ruleTermLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTermLiteralAccess().getVarRefAction_0_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_ID
		{
			newLeafNode(lv_value_1_0, grammarAccess.getTermLiteralAccess().getValueIDTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTermLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"ID");
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTermLiteralAccess().getIntegerLiteralAction_1_0(),
            $current);
    }
)(
(
		lv_value_3_0=RULE_INT
		{
			newLeafNode(lv_value_3_0, grammarAccess.getTermLiteralAccess().getValueINTTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTermLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"INT");
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTermLiteralAccess().getBooleanLiteralAction_2_0(),
            $current);
    }
)(
(
		lv_value_5_0=RULE_BOOLEAN
		{
			newLeafNode(lv_value_5_0, grammarAccess.getTermLiteralAccess().getValueBOOLEANTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTermLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"BOOLEAN");
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTermLiteralAccess().getStringLiteralAction_3_0(),
            $current);
    }
)(
(
		lv_value_7_0=RULE_STRING
		{
			newLeafNode(lv_value_7_0, grammarAccess.getTermLiteralAccess().getValueSTRINGTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTermLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_7_0, 
        		"STRING");
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTermLiteralAccess().getDoubleLiteralAction_4_0(),
            $current);
    }
)(
(
		lv_value_9_0=RULE_DOUBLE
		{
			newLeafNode(lv_value_9_0, grammarAccess.getTermLiteralAccess().getValueDOUBLETerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTermLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_9_0, 
        		"DOUBLE");
	    }

)
)))
;





// Entry rule entryRuleOperatorName
entryRuleOperatorName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperatorNameRule()); } 
	 iv_ruleOperatorName=ruleOperatorName 
	 { $current=$iv_ruleOperatorName.current.getText(); }  
	 EOF 
;

// Rule OperatorName
ruleOperatorName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='truncate' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getTruncateKeyword_0()); 
    }

    |
	kw='Normal' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getNormalKeyword_1()); 
    }

    |
	kw='LogNormal' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getLogNormalKeyword_2()); 
    }

    |
	kw='Beta' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getBetaKeyword_3()); 
    }

    |
	kw='Gamma' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getGammaKeyword_4()); 
    }

    |
	kw='Exponential' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getExponentialKeyword_5()); 
    }

    |
	kw='Weibull' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getWeibullKeyword_6()); 
    }

    |
	kw='Uniform' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getUniformKeyword_7()); 
    }

    |
	kw='Triangular' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getTriangularKeyword_8()); 
    }

    |
	kw='PERT' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getPERTKeyword_9()); 
    }

    |
	kw='Binomial' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getBinomialKeyword_10()); 
    }

    |
	kw='Poisson' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getPoissonKeyword_11()); 
    }

    |
	kw='NegativeBinomial' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getNegativeBinomialKeyword_12()); 
    }

    |
	kw='Geometric' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getGeometricKeyword_13()); 
    }

    |
	kw='Distribution' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getDistributionKeyword_14()); 
    }

    |
	kw='NoisyOR' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getNoisyORKeyword_15()); 
    }

    |
	kw='min' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getMinKeyword_16()); 
    }

    |
	kw='max' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getMaxKeyword_17()); 
    }

    |
	kw='log' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getLogKeyword_18()); 
    }

    |
	kw='log2' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getLog2Keyword_19()); 
    }

    |
	kw='log10' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getLog10Keyword_20()); 
    }

    |
	kw='exp' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getExpKeyword_21()); 
    }

    |
	kw='sin' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getSinKeyword_22()); 
    }

    |
	kw='cos' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getCosKeyword_23()); 
    }

    |
	kw='tan' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getTanKeyword_24()); 
    }

    |
	kw='sinh' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getSinhKeyword_25()); 
    }

    |
	kw='cosh' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getCoshKeyword_26()); 
    }

    |
	kw='tanh' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getTanhKeyword_27()); 
    }

    |
	kw='sqrt' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getSqrtKeyword_28()); 
    }

    |
	kw='abs' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getAbsKeyword_29()); 
    }

    |
	kw='floor' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getFloorKeyword_30()); 
    }

    |
	kw='ceil' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getCeilKeyword_31()); 
    }

    |
	kw='mod' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getModKeyword_32()); 
    }

    |
	kw='if' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getIfKeyword_33()); 
    }

    |
	kw='and' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getAndKeyword_34()); 
    }

    |
	kw='or' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getOrKeyword_35()); 
    }

    |
	kw='not' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorNameAccess().getNotKeyword_36()); 
    }
)
    ;





RULE_BOOLEAN : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'|'1'..'9' ('0'..'9')*);

RULE_DOUBLE : ('1'..'9' ('0'..'9')* ('.' ('0'..'9')+)? (('E'|'e') ('+'|'-')? ('0'..'9')+)?|'0' ('.' ('0'..'9')+)? (('E'|'e') ('+'|'-')? ('0'..'9')+)?);

RULE_STRING : '"' ( options {greedy=false;} : . )*'"';

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '%' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


