################################################################################
#
# CodePro Analysis Plug-in
#
# (c) Copyright Google, Inc. 2001-2009.
# All Rights Reserved.
#
################################################################################

pluginName = CodePro - Audit
providerName = Google, Inc.

################################################################################
#
# General Analysis Support
#
################################################################################

analysisTargetTypeExtensionPointName = Analysis Target Type

analysisTargetType.compilationUnit.name = Compilation Unit
analysisTargetType.jdt.name = JDT Element
analysisTargetType.jsp.name = JSP File
analysisTargetType.jspExpression.name = JSP Expression
analysisTargetType.jspScriptlet.name = JSP Scriptlet
analysisTargetType.jspDeclaration.name = JSP Declaration
analysisTargetType.manifestFile.name = Manifest File
analysisTargetType.propertyFile.name = Property File
analysisTargetType.xmlFile.name = XML File

################################################################################
#
# Code Audit Support
#
################################################################################

auditRuleContributorExtensionPointName = CodePro Audit Rule Contributors
auditRuleSetLocationExtensionPointName = CodePro Audit Rule Set Locations
auditViolationDisablerExtensionPointName = CodePro Audit Disabler Filters
auditRuleExtensionPointName = CodePro Audit Rules
auditRuleGroupExtensionPointName = CodePro Audit Rule Groups
auditViolationResolutionExtensionPointName = Audit Violation Resolutions
auditResultWriterExtensionPointName = CodePro Audit Result Writers

################################################################################
#
# Audit Rule Groups
#
################################################################################

apiUsageAuditRuleGroup.name = API Usage
apiUsageAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that look for API usage opportunities to \
	make the code more secure, either by using a different API or by not using \
	part of an API all together.

authenticationAuditRuleGroup.name = Authentication
authenticationAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that look for opportunities where \
	malicious users may be able to gain access not intended by the application.

cloneUsageAuditRuleGroup.name = Clone Usage
cloneUsageAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that check for problems with the use of \
	the cloning mechanism (the interface Cloneable and the clone method).

codingStyleAuditRuleGroup.name = Coding Style
codingStyleAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that look for code that does not fit \
	a specified style of coding.

commentsAuditRuleGroup.name = Comments
commentsAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that look for the correct usage of \
	non-Javadoc comments within your code.

deadCodeAuditRuleGroup.name = Dead Code
deadCodeAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that look for code that is not being used \
	or cannot be reached.

eclipseSpecificAuditRuleGroup.name = Eclipse Plug-in Development
eclipseSpecificAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that are specific to the development of \
	Eclipse plug-ins.

ejbAuditRuleGroup.name = EJB
ejbAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that check for problems defining EJB \
	Session Beans, Entity Beans and Message Beans.

exceptionUsageAuditRuleGroup.name = Exception Usage
exceptionUsageAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that check for problems related to the use \
	of exceptions within the code.

fileUsageAuditRuleGroup.name = File Usage
fileUsageAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that check for problems related to the use \
	of files and their security.

finalizationAuditRuleGroup.name = Finalization
finalizationAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that check for problems with the use of \
	the finalization mechanism (the finalize method).

formattingAuditRuleGroup.name = Formatting
formattingAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that check the code for conformance to \
	various formatting conventions.

hibernateAuditRuleGroup.name = Hibernate
hibernateAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that check for problems related to the use \
	of Hibernate, an object/relational persistence and query service.

inheritanceAuditRuleGroup.name = Inheritance
inheritanceAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that check for problems that are either \
	related to the type hierarchy or can only be seen by looking that the \
	supertypes of a type.

importUsageAuditRuleGroup.name = Import Usage
importUsageAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that check the import statements for \
	adherence to common coding practices.

internationalizationAuditRuleGroup.name = Internationalization
internationalizationAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that check for potential problems \
	unique to internationalized applications.

j2eeAuditRuleGroup.name = J2EE
j2eeAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that check for problems in the definition \
	and use of various kinds of J2EE classes.

javaLoggingAuditRuleGroup.name = Java
javaLoggingAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that check for correct usage of the Java \
	logging framework.

javadocConventionsAuditRuleGroup.name = Javadoc Conventions
javadocConventionsAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that check for both the existence and \
	correctness of Javadoc comments within your code.

jdbcAuditRuleGroup.name = JDBC/SQL Usage
jdbcAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that check for problems related to the use \
	of JDBC and SQL interfaces within the code.

jclAuditRuleGroup.name = JCL
jclAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that check for correct usage of the JCL \
	(Jakarta Commons Logging) framework.

jspAuditRuleGroup.name = JSP
jspAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that check the content of JSP files.

junitAuditRuleGroup.name = JUnit Usage
junitAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that check for correct usage of the JUnit \
	unit testing framework.

languageSemanticsAuditRuleGroup.name = Language Semantics
languageSemanticsAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that look for language semantic \
	opportunities to make the code more secure.

log4jAuditRuleGroup.name = log4j
log4jAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that check for correct usage of the log4j \
	logging framework.

loggingAuditRuleGroup.name = Logging
loggingAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that check for correct usage of various \
	logging frameworks.

manifestFilesAuditRuleGroup.name = Manifest Files
manifestFilesAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that look for problems in manifest files.

miscellaneousAuditRuleGroup.name = Miscellaneous
miscellaneousAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that don't fit into any of the other \
	audit rule groups.

modifierUsageAuditRuleGroup.name = Modifier Usage
modifierUsageAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that check your code for incorrect uses \
	of modifiers.

namingConventionsAuditRuleGroup.name = Naming Conventions
namingConventionsAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that check the names of various program \
	elements for conformance to the naming standards that have been specified.

patternUsageAuditRuleGroup.name = Pattern Usage
patternUsageAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that check your code for constructs that \
	violate specific coding patterns.

performanceAuditRuleGroup.name = Performance
performanceAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that report coding practices that can \
	sometimes cause performance problems. These rules will not find every \
	source of performance problems, nor will everything found by these rules \
	be the cause of a performance problem. The use of these rules is in no way \
	a substitute for the use of a good performance profiling tool, but they \
	can be used to promote programming practices that minimize performance \
	problems.

portabilityAuditRuleGroup.name = Portability
portabilityAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that check your code for constructs that \
	might hinder cross-platform portability.

portletAuditRuleGroup.name = Portlets
portletAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that look for the correct implementation of \
	portlets within your code.

possibleErrorsAuditRuleGroup.name = Possible Errors
possibleErrorsAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that look for places where the code might \
	contain errors.

potentialRefactoringAuditRuleGroup.name = Potential Refactoring
potentialRefactoringAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that look for places where the code might \
	be refactored to provide better design and greater flexibility.

programComplexityAuditRuleGroup.name = Program Complexity
programComplexityAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that look for places where the code might \
	be too complex. Complex code is harder to understand and maintain. It also \
	tends to contain more errors.

propertyFileAuditRuleGroup.name = Property Files
propertyFileAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that look for problems in property files.

securityAuditRuleGroup.name = Security
securityAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that report coding practices that produce \
	less secure code.

semanticErrorsAuditRuleGroup.name = Semantic Errors
semanticErrorsAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that report coding practices that often \
	indicate that the code will not perform the way the program might expect.

serializationAuditRuleGroup.name = Serialization
serializationAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that look for issues related to the use of \
	Java's serialization mechanism.

servletAuditRuleGroup.name = Servlets
servletAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that look for the correct implementation of \
	servlets within your code.

springAuditRuleGroup.name = Spring
springAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that look for code that violates the best \
	practices specified for programs using the Spring framework.

strutsAuditRuleGroup.name = Struts
strutsAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that look for code that violates the best \
	practices specified for programs using the Struts framework.

taintedUserInputAuditRuleGroup.name = Tainted User Input
taintedUserInputAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that look for user input that is entered \
	into vulnerable parts of the application.

uiSpecificAuditRuleGroup.name = UI Specific (SWT)
uiSpecificAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that look for possible errors or problems \
	related to the use of user interface elements (Swing, AWT, SWT, JFace).

threadsAndSynchronizationAuditRuleGroup.name = Threads and Synchronization
threadsAndSynchronizationAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that look for possible problems having to \
	do with the use of threads and synchronization.

xmlFileAuditRuleGroup.name = XML Files
xmlFileAuditRuleGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains audit rules that look for problems in XML files.

################################################################################
#
# Audit Rules
#
################################################################################

abstractSpecialization.name = Abstract Specialization
abstractSpecialization.longName = \
	Abstract classes should be subclasses of abstract classes
abstractSpecialization.description = \
	<b>Summary</b>\
	<br/>\
	Abstract classes should not be subclasses of concrete classes.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds abstract classes that are subclasses of concrete \
	classes. An exception is made for abstract subclasses of the class \
	java.lang.Object.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following class declaration would be flagged as a violation because \
	the class java.util.ArrayList is not an abstract class:\
	<p><code>\
	\tpublic abstract class SpecializedList extends ArrayList\
	</code><p>\
	while the following class declaration would not be flagged because the \
	class java.lang.Object is treated specially:\
	<p><code>\
	\tpublic abstract Person extends Object\
	</code>

# {0} = class name
# {1} = superclass name
abstractSpecialization.abstractSubclass.description = \
	Abstract subclass of a concrete class
abstractSpecialization.abstractSubclass.explanation = \
	The class {0} is an abstract class even though it inherits from the \
	concrete class {1}. This kind of inheritance relationship often \
	indicates a problem in the design.

	abstractSpecialization.abstractSubclass.delete.name = Remove the modifier
	abstractSpecialization.abstractSubclass.delete.description = \
		Make the subclass concrete by removing the "abstract" modifier.

################################################################################

accessorMethodNamingConvention.name = Accessor Method Naming Convention
accessorMethodNamingConvention.longName = \
	The prefixes "get" and "set" should only be used for accessor methods
accessorMethodNamingConvention.description = \
	<b>Summary</b>\
	<br/>\
	The prefixes "get" and "set" should only be used for accessor methods.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for methods whose names begin with either "get" \
	or "set" that are not accessor methods. A "getter" can have any number \
	of parameters, but it must return a value. A "setter" must have at least \
	one parameter and must not return a value.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following method would be flagged as a violation because it begins \
	with the word "get", but does not return a value:\
	<p><code>\
	\tpublic void getUserName()<br>\
	\t{<br>\
	\t\t...<br>\
	\t}\
	</code>

accessorMethodNamingConvention.noReturn.description = \
	Getter does not return a value
accessorMethodNamingConvention.noReturn.explanation = \
	Methods that begin with the word "get" should return a value.

	accessorMethodNamingConvention.noReturn.recommendation.name = Recommendation...
	accessorMethodNamingConvention.noReturn.recommendation.description = \
		Either return a value from the method or rename the method so that \
		its name does not imply that a value should be returned.

accessorMethodNamingConvention.return.description = \
	Setter returns a value
accessorMethodNamingConvention.return.explanation = \
	Methods that begin with the word "set" should not return a value.

	accessorMethodNamingConvention.return.recommendation.name = Recommendation...
	accessorMethodNamingConvention.return.recommendation.description = \
		Either rewrite the method so that it does not return a value or \
		rename the method so that its name does not imply that no value \
		should be returned.

accessorMethodNamingConvention.noParameters.description = \
	Setter does not have parameters
accessorMethodNamingConvention.noParameters.explanation = \
	Methods that begin with the word "set" should have at least one parameter.

	accessorMethodNamingConvention.noParameters.recommendation.name = Recommendation...
	accessorMethodNamingConvention.noParameters.recommendation.description = \
		Either rewrite the method so that it declares a parameter for the \
		value being set, or rename the method so that its name does not \
		imply that a value is being set.

################################################################################

accessorUsageInDefiningClass.name = Accessor Usage in Defining Class
accessorUsageInDefiningClass.longName = \
	Reference fields directly within their declaring class
accessorUsageInDefiningClass.description = \
	<b>Summary</b>\
	<br/>\
	Fields should be referenced directly in their declaring type.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds places in types that declare fields where a declared \
	field could be directly referenced but is instead being indirectly \
	referenced through an accessor method. Such indirect reference is \
	unnecessary and should therefore be avoided.\
	<p>\
	<b>Example</b>\
	<br/>\
	Given a class that declares the following field and accessor method:\
	<p><code>\
	\tprivate int itemCount = 0;<br>\
	<br>\
	\tpublic int getItemCount()<br>\
	\t{<br>\
	\t\treturn itemCount;<br>\
	\t}\
	</code><p>\
	The following usage of the accessor method would be flagged as a violation \
	if it occurred within the class:\
	<p><code>\
	\tif (getItemCount() &gt; 0) ...\
	</code>

# {0} = accessor method name
accessorUsageInDefiningClass.invocation.description = \
	Unnecessary invocation of an accessor method
accessorUsageInDefiningClass.invocation.explanation = \
	The field {0} should be accessed directly rather than by using an accessor \
	method to access it.

	accessorUsageInDefiningClass.invocation.recommendation.name = Recommendation...
	accessorUsageInDefiningClass.invocation.recommendation.description = \
		Replace the accessor usage with a direct reference to the field.

################################################################################

addMethodToInterface.name = Add Method to Interface
addMethodToInterface.longName = \
	Define public methods in an interface
addMethodToInterface.description = \
	<b>Summary</b>\
	<br/>\
	Identify properties that can be added to an interface.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds methods in concrete classes that can be \
	added to their corresponding interfaces. If a class is named Foo \
	and has a "bar" property with getBar() and setBar() methods, the \
	corresponding interface, IFoo, will be checked to see if it defines \
	the getter and setter method.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the class Employee were defined as:\
	<p><code>\
	\tpublic class Employee implements IEmployee\
	</code><p>\
	and defined the methods getSSN() and setSSN() that were not declared in \
	the IEmployee interface, then those methods would be flagged as violations.

# {0} = method name
# {1} = interface name
addMethodToInterface.addMethod.description = \
	The {0}() method should be added to the {1} interface
addMethodToInterface.addMethod.explanation = \
	The {0}() method is not defined by the {1} interface and \
	should be added.

	# {0} = method name
	# {1} = interface name
	addMethodToInterface.addMethod.recommendation.name = Recommendation...
	addMethodToInterface.addMethod.recommendation.description = \
		Add the {0}() method to the {1} interface.

################################################################################

allowCompareToToThrowExceptions.name = Allow compareTo to Throw Exceptions
allowCompareToToThrowExceptions.longName = \
	Allow compareTo to throw exceptions
allowCompareToToThrowExceptions.description = \
	<b>Summary</b>\
	<br/>\
	The compareTo method is expected to throw ClassCastException and \
	NullPointerException.\
	<p>\
	<b>Description</b>\
	<br/>\
	It is not necessary to test the value of the argument to compareTo prior \
	to casting it. If the argument is null a NullPointerException should be \
	thrown. If it is of the wrong type a ClassCastException should be thrown. \
	This rule finds implementations of the compareTo method that explicitly \
	catch those exceptions when they should not.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following implementation of compareTo tests the argument against null \
	and uses the instanceof operator to check the type of the argument:\
	<p><code>\
	\tpublic int compareTo(Object o)<br>\
	\t{<br>\
	\t\tif (o == null) {<br>\
	\t\t\treturn 1;<br>\
	\t\t} else if (!(o instanceof MyClass)) {<br>\
	\t\t\treturn 0;<br>\
	\t\t}<br>\
	\t\treturn value - ((MyClass) o).value;<br>\
	\t}\
	</code><p>\
	It should be replaced by the following, cleaner, implementation:\
	<p><code>\
	\tpublic int compareTo(Object o)<br>\
	\t{<br>\
	\t\treturn value - ((MyClass) o).value;<br>\
	\t}\
	</code>

allowCompareToToThrowExceptions.noNPE.description = \
	compareTo should throw a NullPointerException
allowCompareToToThrowExceptions.noNPE.explanation = \
	It is not necessary to check that the argument is not null.

	allowCompareToToThrowExceptions.noNPE.recommendation.name = Recommendation...
	allowCompareToToThrowExceptions.noNPE.recommendation.description = \
		Remove the null test.

allowCompareToToThrowExceptions.noCCE.description = \
	compareTo should throw a ClassCastException
allowCompareToToThrowExceptions.noCCE.explanation = \
	It is not necessary to test the type of the argument.

	allowCompareToToThrowExceptions.noCCE.recommendation.name = Recommendation...
	allowCompareToToThrowExceptions.noCCE.recommendation.description = \
		Remove the instanceof test.

################################################################################

alwaysOverrideToString.name = Always Override toString
alwaysOverrideToString.longName = \
	Always override the method toString()
alwaysOverrideToString.description = \
	<b>Summary</b>\
	<br/>\
	Every class should override toString().\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule identifies non-abstract classes that do not override the \
	toString method. It ignores classes that cannot be instantiated, and can be \
	configured to ignore other common situations, such as classes that inherit \
	an implementation from a superclass other than Object.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following class would be flagged as needing an implementation of \
	toString():\
	<p><code>\
	\tpublic class StringHolder<br>\
	\t{<br>\
	\t\tprivate String value;<br>\
	<br>\
	\t\tpublic StringHolder(String initialValue)<br>\
	\t\t{<br>\
	\t\t\tvalue = initialValue;<br>\
	\t\t}<br>\
	<br>\
	\t\tpublic String getValue()<br>\
	\t\t{<br>\
	\t\t\treturn value;<br>\
	\t\t}<br>\
	\t}\
	</code>

# {0} = type name
alwaysOverrideToString.toStringMissing.description = \
	toString() is missing
alwaysOverrideToString.toStringMissing.explanation = \
	The class {0} does not define the toString() method.

	# {0} = type name
	alwaysOverrideToString.toStringMissing.recommendation.name = Recommendation...
	alwaysOverrideToString.toStringMissing.recommendation.description = \
		Add toString to {0}.

################################################################################

annotationTypeNamingConvention.name = Annotation Type Naming Convention
annotationTypeNamingConvention.longName = \
	Use the standard naming convention for annotation types
annotationTypeNamingConvention.description = \
	<b>Summary</b>\
	<br/>\
	Annotation types names should conform to the defined standard.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks the names of all annotation types.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule were configured to require that all annotation type names start with \
	a capital letter, the following declaration would \
	be flagged as a violation:\
	<p><code>\
	\tpublic @interface internalUseOnly ...\
	</code>

annotationTypeNamingConvention.invalidName.description = \
	Invalid annotation type name: "{0}" {1}
annotationTypeNamingConvention.invalidName.explanation = \
	The annotation type name "{0}" does not conform because it {1}.

	annotationTypeNamingConvention.invalidName.rename.name = Rename annotation type to "{1}"
	annotationTypeNamingConvention.invalidName.rename.description = \
		Rename the annotation type from "{0}" to "{1}".

################################################################################

anonymousClassInLoop.name = Anonymous Class in Loop
anonymousClassInLoop.longName = \
	Define anonymous classes outside of loops
anonymousClassInLoop.description = \
	<b>Summary</b>\
	<br/>\
	Placing an anonymous class inside a loop can decrease performance.\
	<p>\
	<b>Description</b>\
	<br/>\
	Placing the creation of an instance of an anonymous class inside a loop \
	will create a new instance each time the loop body is executed. Because \
	the state of the object cannot depend on the state of any variables that \
	change within the loop, a single object can usually be created outside the \
	loop, increasing performance.\
	<p>\
	<b>Example</b>\
	<br/>\
	In the following code:\
	<p><code>\
	\tEventGenerator[] generators;<br>\
	<br>\
	\tfor (int i = 0; i &lt; generators.length; i++) {<br>\
	\t\tgenerators[i].addListener(new Listener() {<br>\
	\t\t\tpublic void eventGenerated()<br>\
	\t\t\t{<br>\
	\t\t\t\t...<br>\
	\t\t\t}<br>\
	\t\t}<br>\
	\t}\
	</code><p>\
	The creation of the listener could, and should, be moved outside the loop \
	because a single listener could easily be shared by all of the event \
	generators.

anonymousClassInLoop.inLoop.description = \
	Anonymous class found in loop
anonymousClassInLoop.inLoop.explanation = \
	Instantiating an anonymous class in a loop can decrease performance if a \
	single instance could be shared.

	anonymousClassInLoop.inLoop.recommendation.name = Recommendation...
	anonymousClassInLoop.inLoop.recommendation.description = \
		Consider moving the anonymous class outside the loop.

################################################################################

anonymousClassMemberVisibility.name = Anonymous Class Member Visibility
anonymousClassMemberVisibility.longName = \
	Restrict the visibility of members in anonymous classes
anonymousClassMemberVisibility.description = \
	<b>Summary</b>\
	<br/>\
	Members of anonymous classes should be private.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks the visibility of all fields and methods within an \
	anonymous class to ensure that they are declared private (except for \
	methods that override an inherited method). Such fields and methods should \
	be declared private to make it clear that they cannot be accessed outside \
	the anonymous class (and to make it easier to detect dead code).\
	<p>\
	<b>Example</b>\
	<br/>\
	The following field declaration would be flagged as a violation because it \
	is declared as being public:\
	<p><code>\
	\tnew Runnable() {<br>\
	\t\tpublic int x;<br>\
	\t\t...<br>\
	\t}\
	</code>

# {0} the visibility of the member
anonymousClassMemberVisibility.invalidVisibility.description = \
	Invalid visibility for member: {0}
anonymousClassMemberVisibility.invalidVisibility.explanation = \
	Members of anonymous classes should not be given a visibility of {0}.

	anonymousClassMemberVisibility.invalidVisibility.makePrivate.name = Make Private
	anonymousClassMemberVisibility.invalidVisibility.makePrivate.description = \
		Change the visibility of the member to "private".

################################################################################

appendString.name = Append String
appendString.longName = \
	Append a single character rather than a String
appendString.description = \
	<b>Summary</b>\
	<br/>\
	Appending strings with single characters to buffers or streams is slower \
	than appending just the single character.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds single character string literals as a single \
	argument to a method invocation where that argument can be replaced by a \
	character literal to improve performance.\
	<p>\
	<b>Example</b>\
	<br/>\
	Given the following declaration:\
	<p><code>\
	\tStringBuffer sb = new StringBuffer();\
	</code><p>\
	The statement\
	<p><code>\
	\tsb.append("a");\
	</code><p>\
	would be flagged as needing to be replaced by the statement\
	<p><code>\
	\tsb.append('a');\
	</code>

appendString.singleChar.description = \
	String literal can be replaced by a character literal
appendString.singleChar.explanation = \
	The single character string literal can be replaced \
	by a character literal to improve performance.

	appendString.singleChar.replace.name = Replace with character
	appendString.singleChar.replace.description = \
		Replace the string literal with a character literal.

################################################################################

appletFieldSecurity.name = Applet Field Security
appletFieldSecurity.longName = \
	Enforces Applet fields to be non-private, final and non-static
appletFieldSecurity.description = \
	<b>Summary</b>\
	<br/>\
	Enforces Applet fields to be non-private, final and non-static\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule violates all field declarations in Applets that are not \
	private, final and static.\
	<p>\
	<b>Security Implications</b>\
	<br/>\
	Fields that have all of these characteristics reduce the risk of malicious \
	users from manipulating or gaining internal access to the Applet.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following integer would be flagged as it is public:\
	<p><code>\
	\tpublic final int x = 0;\
	</code>

appletFieldSecurity.nonPrivateField.description = \
	Applet fields should be private
appletFieldSecurity.nonPrivateField.explanation = \
	Private fields disallow malicious users from editing the data within the \
	Applet.

	appletFieldSecurity.nonPrivateField.recommendation.name = Recommendation...
	appletFieldSecurity.nonPrivateField.recommendation.description = \
		Declare the field private

appletFieldSecurity.nonFinalField.description = \
	Applet fields should be final
appletFieldSecurity.nonFinalField.explanation = \
	Final fields prevent data within Applets from every being reassigned.

	appletFieldSecurity.nonFinalField.recommendation.name = Recommendation...
	appletFieldSecurity.nonFinalField.recommendation.description = \
		Declare the field final

appletFieldSecurity.staticField.description = \
	Applet fields should not be static
appletFieldSecurity.staticField.explanation = \
	Not declaring fields to be static ensures that malicious code will not be \
	able to manipulate data from outside the Applet.

	appletFieldSecurity.staticField.recommendation.name = Recommendation...
	appletFieldSecurity.staticField.recommendation.description = \
		Declare the field non-static

################################################################################

applyDialogFont.name = Apply Dialog Font
applyDialogFont.longName = \
	Apply the standard dialog font when creating a dialog
applyDialogFont.description = \
	<b>Summary</b>\
	<br/>\
	The method Dialog.applyDialogFont(Composite) should be invoked in the \
	createContents method so that user preferences will be honored.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds implementations of the method \
	createContents(Composite) in subclasses of org.eclipse.jface.dialogs.Dialog \
	in which the method Dialog.applyDialogFont(Composite) is not invoked. This \
	method should always be invoked so that user preference settings will be \
	honored.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following method:\
	<p><code>\
	\tprotected Control createContents(Composite parent)<br>\
	\t{<br>\
	\t\tComposite contents;<br>\
	<br>\
	\t\tcontents = (Composite) super.createContents(parent);<br>\
	\t\t...<br>\
	\t\treturn contents;<br>\
	\t}\
	</code><p>\
	Should have the following line added just before the return statement:\
	<p><code>\
	\tDialog.applyDialogFont(parent);\
	</code>

applyDialogFont.missing.description = \
	The method Dialog.applyDialogFont(Composite) is not invoked
applyDialogFont.missing.explanation = \
	The method Dialog.applyDialogFont(Composite) should be invoked in the \
	createContents method so that user preferences will be honored.

	applyDialogFont.missing.recommendation.name = Recommendation...
	applyDialogFont.missing.recommendation.description = \
		Add an invocation of the method Dialog.applyDialogFont(Composite) to \
		the createContents method.

################################################################################

arrayComparison.name = Array Comparison
arrayComparison.longName = \
	Don't use equals (==), not equals (!=), or equals() to compare Arrays
arrayComparison.description = \
	<b>Summary</b>\
	<br/>\
	Arrays should not be compared using equals (==), not equals (!=), or equals().\
	<p>\
	<b>Description</b>\
	<br/>\
	Arrays should always be compared using one of the comparison methods \
	defined for arrays. This audit rule looks for comparisons using either \
	the equals (==) or not equals (!=) operators or the equals() method.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tchar[] currentName, proposedName;\
	<p>\
	\t...<br>\
	\tif (proposedName != currentName) {<br>\
	\t\t...<br>\
	\t}\
	</code>

arrayComparison.operator.description = \
	Cannot compare arrays using the {0} operator
arrayComparison.operator.explanation = \
	Arrays with the same elements will not compare as equal using either the \
	identity (==) or non-identity (!=) operators unless the possible operands \
	are unique.

	arrayComparison.operator.replaceWithEquals.name = Replace with Arrays.equals()
	arrayComparison.operator.replaceWithEquals.description = \
		Replace the comparison with Arrays.equals().

arrayComparison.method.description = \
	Cannot compare arrays using the equals() method from Object
arrayComparison.method.explanation = \
	The equals() method for arrays performs an identity test just like the \
	identity operator (==). Arrays with the same elements will not compare as \
	equal unless they are identical.

	arrayComparison.method.replaceWithEquals.name = Replace with Arrays.equals()
	arrayComparison.method.replaceWithEquals.description = \
		Replace the comparison with Arrays.equals().

################################################################################

assignmentInCondition.name = Assignment In Condition
assignmentInCondition.longName = \
	Don't assign values in conditional expressions
assignmentInCondition.description = \
	<b>Summary</b>\
	<br/>\
	The assignment operator should never be used in a condition.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds places in the code where an assignment operator is \
	used within a condition associated with an if, for, while or do statement. \
	Such uses are often caused by mistyping a single equal (=) where a double \
	equal (==) was intended.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tif (a = 0) {<br>\
	\t\t...<br>\
	\t}\
	</code>

assignmentInCondition.assignment.description = \
	Assignment in condition
assignmentInCondition.assignment.explanation = \
	The assignment operator should never be used in a condition so that we can \
	detect errors caused by typing a single equal where a double equal was \
	intended.

	assignmentInCondition.assignment.recommendation.name = Recommendation...
	assignmentInCondition.assignment.recommendation.description = \
		Move the assignment before the condition or fix the identity operator.

################################################################################

assignmentToNonFinalStatic.name = Assignment to Non-final Static
assignmentToNonFinalStatic.longName = \
	Don't assign values to static fields in non-static contexts
assignmentToNonFinalStatic.description = \
	<b>Summary</b>\
	<br/>\
	Static fields should only be changed in static methods.\
	<p>\
	<b>Description</b>\
	<br/>\
	Assignments to a static field in a non-static context are usually not \
	intended, and therefore usually represent an error.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tpublic class Foo {<br>\
	\t\tstatic int x = 2;<br>\
	\t\tpublic doSomething(int y) {<br>\
	\t\t\tx = y;<br>\
	\t\t}<br>\
	\t}\
	</code>

assignmentToNonFinalStatic.found.description = \
	Assignment to {0} in non-static context
assignmentToNonFinalStatic.found.explanation = \
	You assigned a value to the static variable \
	<code>{0}</code> in a non static context.

	assignmentToNonFinalStatic.found.recommendation.name = Recommendation...
	assignmentToNonFinalStatic.found.recommendation.description = \
		Verify that you intended to modify <code>{0}</code> in a non-static context.

################################################################################

accidentalConcatenation.name = Accidental Concatenation
accidentalConcatenation.longName = \
	Don't concatenate numeric values
accidentalConcatenation.description = \
	<b>Summary</b>\
	<br/>\
	Two numbers concatenated without any characters in between is probably an error.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds places where two or more numbers are being concatenated \
	without intervening strings or characters. This is usually a mistake caused \
	by forgetting to parenthesize the sub-expression.\
	<p>\
	<b>Example</b>\
	<br/>\
	The addition of the two integers in the code below would be flagged as a \
	violation:\
	<p><code>\
	\tpublic String getSummary(int passCount, int failCount) {<br>\
	\t\treturn "Of the " + passCount + failCount + " students, "<br>\
	\t\t\t+ passCount + " passed and " + failCount + " failed.";<br>\
	\t}\
	</code>

accidentalConcatenation.concatenation.description = \
	Accidental Concatenation
accidentalConcatenation.concatenation.explanation = \
	Two or more numbers are being concatenated without intervening strings or \
	characters. This is usually a mistake caused by forgetting to parenthesize \
	the sub-expression. 

	accidentalConcatenation.concatenation.addParentheses.name = Add Parentheses
	accidentalConcatenation.concatenation.addParentheses.description = \
		Enclose the sub-expression in parentheses.

################################################################################

avoidQueriesFromUser.name = Avoid Building Queries From User Input
avoidQueriesFromUser.longName = \
	Database queries should not be constructed from user input
avoidQueriesFromUser.description = \
	<b>Summary</b>\
	<br/>\
	Database queries should not be constructed from user input.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for places where a query is being performed that was \
	constructed from data that might have come from user input.\
	<p>\
	Specifically, this audit rule violates the usage of the methods \
	"execute", "executeQuery", or "executeUpdate" as defined in \
	<code>java.sql.Statement</code>.\
	<p>\
	<b>Security Implications</b>\
	<br/>\
	Malicious users could input text that could change the meaning of the \
	SQL query to expose data, gain administrative access or drop tables.\
	<p>\
	<b>Example</b>\
	<br/>\
	The invocation of the executeQuery method below would be flagged because \
	the argument is constructed from values that might include user input.\
	<p><code>\
	\tString query = <br>\
	\t\t"SELECT userid, name FROM user_data WHERE accountnum = '" <br>\
	\t\t+ req.getParameter("ACCT_NUM") <br>\
	\t\t+ "'"; <br>\
	\t... <br>\
	\tstatement.executeQuery(query);\
	</code><p>\
	It should be replaced by something like the following:\
	<p><code>\
	\tPreparedStatement statement = connection.prepareStatement <br>\
	\t\t("SELECT userid, name FROM user_data WHERE accountnum = ?"); <br>\
	\tstatement.setString(1, req.getParameter("ACCT_NUM"); <br>\
	\tResultSet results = statement.executeQuery();\
	</code>

# {0} the name of the method which is in violation
avoidQueriesFromUser.queryFromUser.description = \
	SQL query may include user input
avoidQueriesFromUser.queryFromUser.explanation = \
	The query made with method "{0}(String query, ...)" may be a \
	database access with user input.

	avoidQueriesFromUser.queryFromUser.recommendation.name = Recommendation...
	avoidQueriesFromUser.queryFromUser.recommendation.recommendation = \
		Make queries to database with a java.sql.PreparedStatement method \
		instead of a java.sql.Statement method to minimize user-input \
		errors.

################################################################################

avoidAutoBoxing.name = Avoid Auto-boxing
avoidAutoBoxing.longName = \
	Avoid using Auto-boxing
avoidAutoBoxing.description = \
	<b>Summary</b>\
	<br/>\
	The auto-boxing of primitive values should be avoided.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for places where auto-boxing is used to create a \
	wrapper object for a primitive value. The problem with allowing the \
	compiler to generate this code is that it is easy to miss the fact that it \
	is happening.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following code would be flagged as a violation because the primitive \
	value on the right must be wrapped in an instance of Integer:\
	<p><code>\
	\tInteger value = 3;\
	</code>

avoidAutoBoxing.boxing.description = \
	Auto-boxing of a primitive value
avoidAutoBoxing.boxing.explanation = \
	If primitive values need to be wrapped in an object (boxed) the code to do \
	so should be explicit.

	avoidAutoBoxing.boxing.recommendation.name = Recommendation...
	avoidAutoBoxing.boxing.recommendation.recommendation = \
		Remove the need to wrap the primitive value, or wrap it explicitly.

################################################################################

avoidAutoUnboxing.name = Avoid Auto-unboxing
avoidAutoUnboxing.longName = \
	Avoid using Auto-unboxing
avoidAutoUnboxing.description = \
	<b>Summary</b>\
	<br/>\
	The auto-unboxing of primitive value wrappers should be avoided.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for places where auto-unboxing is used to access a \
	primitive value from a wrapper object. The problem with allowing the \
	compiler to generate this code is that it is easy to miss the fact that it \
	is happening.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following code would be flagged as a violation because the wrapper \
	object on the right must be dereferenced in order to access the primitive \
	value:\
	<p><code>\
	\tint value = new Integer(3);\
	</code>

avoidAutoUnboxing.unboxing.description = \
	Auto-unboxing of a primitive value wrapper
avoidAutoUnboxing.unboxing.explanation = \
	If primitive value wrappers need to be accessed to get the primitive value \
	they wrap (unboxed) the code to do so should be explicit.

	avoidAutoUnboxing.unboxing.recommendation.name = Recommendation...
	avoidAutoUnboxing.unboxing.recommendation.recommendation = \
		Explicitly access the primitive value.

################################################################################

avoidComparingClassesByStrings.name = Avoid Comparing Classes By String Names
avoidComparingClassesByStrings.longName = \
	Avoid comparing Class objects by their getName() output
avoidComparingClassesByStrings.description = \
	<b>Summary</b>\
	<br/>\
	String comparisons should not occur with the output from Class.getName()\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for places where a class name is compared using the \
	methods String.equals or String.equalsIgnoreCase, or the == or != operators.\
	<p>\
	Specifically, this audit rule flags the following patterns:\
	<p><code>\
	[class].getName().equals(*)<br>\
	*.equals([class].getName())<br>\
	[class].getName().equalsIgnoreCase(*)<br>\
	*.equalsIgnoreCase([class].getName())<br>\
	[class].getName() == *<br>\
	* == [class].getName()<br>\
	[class].getName() != *<br>\
	* != [class].getName()\
	</code><p>\
	Where [class] is any instance of <code>java.lang.Class</code>.\
	<p>\
	<b>Security Implications</b>\
	<br/>\
	By not making comparisons in this way, code is prevented from malicious \
	users creating a class with the same name in order to gain access to \
	blocks of code not intended by the programmer.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following method invocation of equals would be flagged a violation:\
	<p><code>\
	\tif ("SomeClassName".equals(class.getName())) ...\
	</code>

avoidComparingClassesByStrings.classCompare.description = \
	A String comparison was used to compare a class name. 
avoidComparingClassesByStrings.classCompare.explanation = \
	Classes should not be compared with the output from Class.getName().

	avoidComparingClassesByStrings.classCompare.recommendation.name = Recommendation...
	avoidComparingClassesByStrings.classCompare.recommendation.recommendation = \
		Remove this comparison.

################################################################################

avoidFinalizers.name = Avoid Finalizers
avoidFinalizers.longName = \
	Don't use finalizers
avoidFinalizers.description = \
	<b>Summary</b>\
	<br/>\
	Avoid finalizers.\
	<p>\
	<b>Description</b>\
	<br/>\
	Finalizers should be avoided because they can lead to obscure bugs and \
	apparent consumption of operating system resources.\
	<p>\
	<b>Example</b>\
	<br/>\
	Any method with the signature "finalize()" will be flagged.

avoidFinalizers.avoidFinalizers.description = \
	Avoid finalizers
avoidFinalizers.avoidFinalizers.explanation = \
	Finalizers should be avoided.

	# {0} = type name
	avoidFinalizers.avoidFinalizers.recommendation.name = Recommendation...
	avoidFinalizers.avoidFinalizers.recommendation.description = \
		Remove finalize() from {0}.

################################################################################

avoidFutureKeywords.name = Avoid Future Keywords
avoidFutureKeywords.longName = \
	Avoid using names that conflict with future keywords
avoidFutureKeywords.description = \
	<b>Summary</b>\
	<br/>\
	Avoid using names that conflict with future keywords.\
	<p>\
	<b>Description</b>\
	<br/>\
	Words that will be keywords in later versions of Java \
	should not be used as an identifier. Otherwise, you will have \
	to rewrite the code in order to migrate.\
	<p>\
	<b>Example</b>\
	<br/>\
	Any variable, method, or type named "assert" or "enum" will be flagged.

# {0} The invalid name
# {1} The conflicting keyword
# {2} The first version number in which the identifier was a keyword
avoidFutureKeywords.found.description = \
	The name {0} conflicts with a future keyword
avoidFutureKeywords.found.explanation = \
	The name <code>{0}</code> conflicts with the future keyword \
	<code>{1}</code>. This will be a keyword from JDK version {2} on.

	# {0} The original name
	avoidFutureKeywords.found.fix.name = Rename
	avoidFutureKeywords.found.fix.description = \
		Choose a different name for <code>{0}</code> and refactor.

################################################################################

avoidInnerClasses.name = Avoid Inner Classes
avoidInnerClasses.longName = \
	Ensures no inner classes or anonymous class are used
avoidInnerClasses.description = \
	<b>Summary</b>\
	<br/>\
	Avoid using inner classes.\
	<p>\
	<b>Description</b>\
	<br/>\
	Inner classes are flagged and considered a security hazard by this audit \
	rule.\
	<p>\
	<b>Security Implications</b>\
	<br/>\
	Inner classes are converted into bytecode just like parent \
	classes. Don't depend on an inner class to keep adversaries \
	from private fields. Remember, an inner class has bytecode \
	separate from parent class, but still has access to private \
	fields in the parent class.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following inner class declaration and the anonymous class \
	declaration would both be flagged as violations:\
	<p><code>\
	\tpublic class OuterClass {<br>\
	\t\t<br>\
	\t\tpublic class InnerClass{}<br>\
	\t\t<br>\
	\t\tpublic void foo() {<br>\
	\t\tRunnable runnable = new Runnable() {<br>\
	\t\t\tpublic void run(){/*do nothing*/}<br>\
	\t\t}<br>\
	\t\t<br>\
	\t}\
	</code>

# {0} = name of inner class

avoidInnerClasses.innerClassUsed.description = \
	Inner class found: "{0}"
avoidInnerClasses.innerClassUsed.explanation = \
	Classes should not be nested.

	avoidInnerClasses.innerClassUsed.recommendation.name = Recommendation...
	avoidInnerClasses.innerClassUsed.recommendation.description = \
		Make inner class into a non-inner class, and supply the needed get \
		and set methods to access data.

avoidInnerClasses.anonymousClassUsed.description = \
	Anonymous class found
avoidInnerClasses.anonymousClassUsed.explanation = \
	Classes should not be nested.

	avoidInnerClasses.anonymousClassUsed.recommendation.name = Recommendation...
	avoidInnerClasses.anonymousClassUsed.recommendation.description = \
		Make anonymous class into a non-inner class, and supply the needed get \
		and set methods to access data.

################################################################################

avoidInstanceInitializers.name = Avoid Instance Initializers
avoidInstanceInitializers.longName = \
	Ensures that no instance initializers are used
avoidInstanceInitializers.description = \
	<b>Summary</b>\
	<br/>\
	Avoid using instance initializers.\
	<p>\
	<b>Description</b>\
	<br/>\
	Java allows the use of instance initializers \
	to run blocks of code before an object's constructor. \
	However, this is not a well known feature of the Java language, \
	and it may make maintenance harder. Also, there is potential to \
	violate encapsulation. \
	This rule prohibits the use of these instance initializers.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following would be flagged as a violation:\
	<p><code>\
	\tpublic class Foo { <br>\
	\t\t{<br>\
	\t\t\t...<br>\
	\t\t}<br>\
	\t}\
	</code>

avoidInstanceInitializers.instanceInitializerUsed.description = \
	Instance initializer
avoidInstanceInitializers.instanceInitializerUsed.explanation = \
	Instance initializers should not be used.

	avoidInstanceInitializers.instanceInitializerUsed.recommendation.name = Recommendation...
	avoidInstanceInitializers.instanceInitializerUsed.recommendation.description = \
		Move the code from the initializer to the constructor.

################################################################################

avoidInstantiationInLoops.name = Avoid Instantiation in Loops
avoidInstantiationInLoops.longName = \
	Classes should not be instantiated inside loops
avoidInstantiationInLoops.description = \
	<b>Summary</b>\
	<br/>\
	Avoid instantiating classes in loops.\
	<p>\
	<b>Description</b>\
	<br/>\
	Instantiation of a class requires memory allocation. If a class is \
	instantiated within a loop, memory allocation will be performed over and \
	over again. If the objects are kept, this will eat up memory; if they are \
	abandoned, it will cause excessive garbage collection.<br>\
	However, this rule allows instantiation in return statements and throw \
	statements, since they will not be repeated. It also allows instantiation \
	in catch blocks, since these should not be reached regularly.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following would be flagged as a violation:\
	<p><code>\
	\twhile (a &lt; b) { <br>\
	\t\tString s = new String();<br>\
	\t}\
	</code>

# {0} type
avoidInstantiationInLoops.construction.description = \
	The class {0} is being instantiated in a loop
avoidInstantiationInLoops.construction.explanation = \
	A new instance of <code>{0}</code> is being created every time this loop \
	executes. This can eat up memory or cause excessive garbage collection. 

	avoidInstantiationInLoops.construction.recommendation.name = Recommendation...
	avoidInstantiationInLoops.construction.recommendation.description = \
		Avoid instantiation in loops unless absolutely necessary.

avoidInstantiationInLoops.array.description = \
	An array is being created in a loop
avoidInstantiationInLoops.array.explanation = \
	A new array is being created every time this loop \
	executes. This can eat up memory or cause excessive garbage collection. 

	avoidInstantiationInLoops.array.recommendation.name = Recommendation...
	avoidInstantiationInLoops.array.recommendation.description = \
		Avoid array creation in loops unless absolutely necessary.

################################################################################

avoidInstantiationToGetClass.name = Avoid Instantiation to Get Class
avoidInstantiationToGetClass.longName = \
	Avoid instantiating an object just to call getClass()
avoidInstantiationToGetClass.description = \
	<b>Summary</b>\
	<br/>\
	Avoid instantiating an object just to call <code>getClass()</code>.\
	<p>\
	<b>Description</b>\
	<br/>\
	It is unnecessary to create a new instance of a class just to call \
	its <code>getClass()</code> method. The public member <code>class</code> \
	can be accessed without instantiation.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following would be flagged as a violation, since \
	<code>Object.class</code> would be more efficient:\
	<p><code>\
	\tnew Object().getClass(); \
	</code>

# {0} type
avoidInstantiationToGetClass.found.description = \
	{0} instantiated just to get its class
avoidInstantiationToGetClass.found.explanation = \
	A new instance of <code>{0}</code> is being created just to get its class. \
	This is unnecessary.

# {0} the code which will be replaced
# {1} the replacement text
	avoidInstantiationToGetClass.found.fix.name = Replace with {1}
	avoidInstantiationToGetClass.found.fix.description = \
		Replace <code>{0}</code> with <code>{1}</code>

################################################################################

avoidNestedAssignments.name = Avoid Nested Assignments
avoidNestedAssignments.longName = \
	Make all assignments separate statements
avoidNestedAssignments.description = \
	<b>Summary</b>\
	<br/>\
	Assignments should not be nested.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds assignments nested within other assignments.\
	<p>\
	<b>Example</b>\
	<br/>\
	The assignment to the variable 'i' would be flagged as a violation in \
	the following statement:\
	<p><code>\
	\tint a = (i = j * k) / 2;\
	</code>

avoidNestedAssignments.nested.description = \
	Nested assignment
avoidNestedAssignments.nested.explanation = \
	Assignments should not be nested within other assignments.

	avoidNestedAssignments.nested.recommendation.name = Recommendation...
	avoidNestedAssignments.nested.recommendation.description = \
		Move the nested assignment to a separate statement before the \
		surrounding assignment.

################################################################################

avoidNestedBlocks.name = Avoid Nested Blocks
avoidNestedBlocks.longName = \
	Don't directly nest blocks
avoidNestedBlocks.description = \
	<b>Summary</b>\
	<br/>\
	Blocks should not be nested.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds blocks nested directly within other blocks.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\t{<br>\
	\t\t...<br>\
	\t\t{<br>\
	\t\t\t...<br>\
	\t\t}<br>\
	\t\t...<br>\
	\t}\
	</code>

avoidNestedBlocks.nested.description = \
	Nested block
avoidNestedBlocks.nested.explanation = \
	Blocks should not be nested within other blocks.

	avoidNestedBlocks.nested.recommendation.name = Recommendation...
	avoidNestedBlocks.nested.recommendation.description = \
		Move the code from the nested block directly into the surrounding block.

################################################################################

avoidNoArgStringConstructor.name = Avoid the no-argument String constructor
avoidNoArgStringConstructor.longName = \
	Avoid the no-argument String constructor
avoidNoArgStringConstructor.description = \
	<b>Summary</b>\
	<br/>\
	Avoid using the no-argument String constructor.\
	<p>\
	<b>Description</b>\
	<br/>\
	The no-argument String constructor <code>new String()</code>, creates a \
	String that will not be functionally different from the empty String \
	(<code>""</code>). Since Java guarantees that identical String constants \
	will all be the same instance, you can improve performance by using the \
	empty String instead.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following would be flagged as a violation: \
	<p><code>\
	\tString foo = new String();<br>\
	</code>\
	<p>\
	This could be replaced with the following, which would conserve memory: \
	<p><code>\
	\tString foo = "";<br>\
	</code>

avoidNoArgStringConstructor.found.description = \
	No argument String constructor
avoidNoArgStringConstructor.found.explanation = \
	The no-argument String constructor creates an unnecessary instance of a \
	String which is equal to the empty String.

	avoidNoArgStringConstructor.found.replace.name = \
		Replace with the empty String
	avoidNoArgStringConstructor.found.replace.description = \
		Use the empty String (<code>""</code>) instead.

################################################################################
avoidOctalLiterals.name = Avoid Octal Literals
avoidOctalLiterals.longName = \
	Avoid the use of octal literals
avoidOctalLiterals.description = \
	<b>Summary</b>\
	<br/>\
	Avoid the use of octal literals.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds uses of octal literals (numeric literals that begin \
	with a zero). Numeric literals should be expressed in either decimal or \
	hexidecimal formats in order to avoid confusion.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following numeric literal would be flagged as a violation:\
	<p><code>\
	\t0010\
	</code>

avoidOctalLiterals.octal.description = \
	Octal literal
avoidOctalLiterals.octal.explanation = \
	Octal numeric literals should not be used.

	avoidOctalLiterals.octal.removeLeadingZeros.name = Remove Leading Zeros
	avoidOctalLiterals.octal.removeLeadingZeros.description = \
		Remove all leading zeros so that it will no longer be an octal \
		representation.

	avoidOctalLiterals.octal.replaceWithDecimalEquivalent.name = Replace With Decimal Equivalent
	avoidOctalLiterals.octal.replaceWithDecimalEquivalent.description = \
		Replace the octal literal with its decimal equivalent.

################################################################################

avoidPackageScopeAuditRule.name = Avoid Package Scope
avoidPackageScopeAuditRule.longName = \
	Ensures inner classes, constructors, methods and fields are declared as public, \
	protected or private
avoidPackageScopeAuditRule.description = \
	<b>Summary</b>\
	<br/>\
	Only use public, protected or private scopes.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit flags all inner classes, constructors, methods, and fields that \
	have a package scope.\
	<p>\
	Note: non-inner classes and \
	interfaces cannot syntactically be declared protected or \
	private, thus since a non-inner class/ interface isn't more secure if it \
	has package scope instead of a public scope, this audit does \
	not flag interfaces or non-inner classes that have a package \
	scope.\
	<p>\
	Also note: the resolutions (fixes) for flagged instances of this \
	audit include the insertion of the "public" modifier as well as \
	"private" and "protected" modifiers. However, changing a modifier \
	from package scope to a public scope does not make the code more \
	secure, and is included only because it is expected that the public \
	modifier is used.\
	<p>\
	<b>Security Implications</b>\
	<br/>\
	Classes, methods and fields with package scope (default scope) \
	can be accessed from all code within the same package, \
	including code written by adversaries.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following will all be flagged since they all have a \
	package scope: the constructor "Example", the class \
	"InnerClass", the method "some_method", and the integer "x":\
	<p><code>\
	\tclass Example {<br>\
	\t\tExample(){super();}<br>\
	\t\tclass InnerClass{}<br>\
	\t\tstatic void some_method(){/* do nothing */}<br>\
	\t\tint x;<br>\
	\t}\
	</code>

avoidPackageScopeAuditRule.innerClassWithPackageScope.description = \
	Inner class with package scope
avoidPackageScopeAuditRule.innerClassWithPackageScope.explanation = \
	Inner class does not have scope of public, protected or private.

	avoidPackageScopeAuditRule.innerClassWithPackageScope.makePublic.name = Make inner class public
	avoidPackageScopeAuditRule.innerClassWithPackageScope.makePublic.description = \
		Declare the inner class public
		
	avoidPackageScopeAuditRule.innerClassWithPackageScope.makeProtected.name = Make inner class protected
	avoidPackageScopeAuditRule.innerClassWithPackageScope.makeProtected.description = \
		Declare the inner class protected
		
	avoidPackageScopeAuditRule.innerClassWithPackageScope.makePrivate.name = Make inner class private
	avoidPackageScopeAuditRule.innerClassWithPackageScope.makePrivate.description = \
		Declare the inner class private

avoidPackageScopeAuditRule.constructorWithPackageScope.description = \
	Constructor with package scope
avoidPackageScopeAuditRule.constructorWithPackageScope.explanation = \
	Constructor does not have scope of public, protected or private.

	avoidPackageScopeAuditRule.constructorWithPackageScope.makePublic.name = Make constructor public
	avoidPackageScopeAuditRule.constructorWithPackageScope.makePublic.description = \
		Declare the constructor public
		
	avoidPackageScopeAuditRule.constructorWithPackageScope.makeProtected.name = Make constructor protected
	avoidPackageScopeAuditRule.constructorWithPackageScope.makeProtected.description = \
		Declare the constructor protected
		
	avoidPackageScopeAuditRule.constructorWithPackageScope.makePrivate.name = Make constructor private
	avoidPackageScopeAuditRule.constructorWithPackageScope.makePrivate.description = \
		Declare the constructor private

avoidPackageScopeAuditRule.methodWithPackageScope.description = \
	Method with package scope
avoidPackageScopeAuditRule.methodWithPackageScope.explanation = \
	Method does not have scope of public, protected or private.

	avoidPackageScopeAuditRule.methodWithPackageScope.makePublic.name = Make method public
	avoidPackageScopeAuditRule.methodWithPackageScope.makePublic.description = \
		Declare the method public
		
	avoidPackageScopeAuditRule.methodWithPackageScope.makeProtected.name = Make method protected
	avoidPackageScopeAuditRule.methodWithPackageScope.makeProtected.description = \
		Declare the method protected
		
	avoidPackageScopeAuditRule.methodWithPackageScope.makePrivate.name = Make method private
	avoidPackageScopeAuditRule.methodWithPackageScope.makePrivate.description = \
		Declare the method private

avoidPackageScopeAuditRule.fieldWithPackageScope.description = \
	Field with package scope
avoidPackageScopeAuditRule.fieldWithPackageScope.explanation = \
	Field does not have scope of public, protected or private.

	avoidPackageScopeAuditRule.fieldWithPackageScope.makePublic.name = Make public
	avoidPackageScopeAuditRule.fieldWithPackageScope.makePublic.description = \
		Declare the field public
		
	avoidPackageScopeAuditRule.fieldWithPackageScope.makeProtected.name = Make protected
	avoidPackageScopeAuditRule.fieldWithPackageScope.makeProtected.description = \
		Declare the field protected
		
	avoidPackageScopeAuditRule.fieldWithPackageScope.makePrivate.name = Make private
	avoidPackageScopeAuditRule.fieldWithPackageScope.makePrivate.description = \
		Declare the field private

################################################################################

avoidUnsafeArrayDeclaration.name = Avoid Unsafe Array Declaration
avoidUnsafeArrayDeclaration.longName = \
	Arrays should not be declared public, final and static
avoidUnsafeArrayDeclaration.description = \
	<b>Summary</b>\
	<br/>\
	Refrain from declaring an array public, static and final.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule flags an array declared public, static and final. \
	Arrays are mutable objects, the final constraint requires that \
	the array object itself be assigned only once, but makes no \
	guarantees about the values of the array elements. Since the \
	array is declared public, a malicious program can change the \
	values stored in the array.\
	<p>\
	<b>Security Implications</b>\
	<br/>\
	Such arrays are many times assumed to be secure and thus used by the \
	application as a secure field. Malicious users can seek out such fields to \
	exploit.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following Java Applet code would be flagged as a violation because \
	it declares an array public, static and final:\
	<p><code>\
	\tpublic final class UrlTool extends Applet {<br>\
	\t\tpublic static final URL[] urls;<br>\
	\t\t...<br>\
	\t}\
	</code>
	
avoidUnsafeArrayDeclaration.arrayDeclaration.description = \
	Avoid declaring an array public, static and final
avoidUnsafeArrayDeclaration.arrayDeclaration.explanation = \
	The array should be declared private to prevent malicious access.

	avoidUnsafeArrayDeclaration.arrayDeclaration.recommendation.name = Recommendation...
	avoidUnsafeArrayDeclaration.arrayDeclaration.recommendation.description = \
		Declare the array private.

################################################################################

avoidPrimitiveMethodParameters.name = Avoid Primitive Method Parameters
avoidPrimitiveMethodParameters.longName = \
	Only use objects for method parameters
avoidPrimitiveMethodParameters.description = \
	<b>Summary</b>\
	<br/>\
	Don't use primitive types for method arguments.\
	<p>\
	<b>Description</b>\
	<br/>\
	Prohibit the use of primitive types in method parameters. All parameters \
	in methods should be Java objects. Exceptions are given to methods that \
	override a superclass method that uses a primitive type as a parameter.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following method declaration, assuming that it does not override an \
	inherited method, would be flagged as a violation because it has a \
	parameter that is a primitive type:\
	<p><code>\
	\tpublic void setCount(int count)\
	</code>

avoidPrimitiveMethodParameters.primitiveParameter.description = \
	Do not use primitive types for method arguments
avoidPrimitiveMethodParameters.primitiveParameter.explanation = \
	All parameters in methods should be Java objects rather than primitive types.

	avoidPrimitiveMethodParameters.primitiveParameter.recommendation.name = Recommendation...
	avoidPrimitiveMethodParameters.primitiveParameter.recommendation.description = \
		Replace the primitive type argument with the corresponding Java object.

################################################################################

avoidSimilarNames.name = Avoid Similar Names
avoidSimilarNames.longName = \
	Make names distinctly different
avoidSimilarNames.description = \
	<b>Summary</b>\
	<br/>\
	Avoid names that are too similar.\
	<p>\
	<b>Description</b>\
	<br/>\
	This rule detects pairs of names that are too similar and therefore can \
	be confusing to read. Names that are spelled the same but are distinct \
	because some letters have different case are too similar in most contexts. \
	Using the singular and plural form of a word as separate names can also be \
	misleading in some contexts. This rule also detects possible spelling \
	errors where two identifiers are almost the same but have just a slight \
	difference in spelling.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tprivate String customername;<br>\
	<br>\
	\tpublic String customerName()<br>\
	\t{<br>\
	\t\treturn customername;<br>\
	\t}\
	</code>

# {0} = highlighted identifier
# {1} = similar identifier
avoidSimilarNames.caseChange.description = \
	The names "{0}" and "{1}" differ only in case
avoidSimilarNames.caseChange.explanation = \
	The names "{0}" and "{1}" differ only in case.

	avoidSimilarNames.caseChange.resolution.name = Recommendation...
	avoidSimilarNames.caseChange.resolution.description =\
		Change one of the names.

# {0} = highlighted identifier
# {1} = similar identifier
avoidSimilarNames.pluralization.description = \
	The names "{0}" and "{1}" differ only in pluralization
avoidSimilarNames.pluralization.explanation = \
	Plural and singular forms should not be used together in this context.

	avoidSimilarNames.pluralization.resolution.name = Recommendation...
	avoidSimilarNames.pluralization.resolution.description = \
		Change one of the names.

# {0} = highlighted identifier
# {1} = similar identifier
avoidSimilarNames.spelling.description = \
	The names "{0}" and "{1}" are spelled too similarly
avoidSimilarNames.spelling.explanation = \
	The names "{0}" and "{1}" are spelled too similarly; perhaps there is a \
	typo in one.

	avoidSimilarNames.spelling.resolution.name = Recommendation...
	avoidSimilarNames.spelling.resolution.description = \
		Change one of the names.

################################################################################

avoidStringBufferInstantiationWithChar.name = Avoid StringBuffer Instantiation With Character Literal
avoidStringBufferInstantiationWithChar.longName = \
	Don't use a character literal in the constructor of a StringBuffer or StringBuilder
avoidStringBufferInstantiationWithChar.description = \
	<b>Summary</b>\
	<br/>\
	Character literals should not be used as the argument to the constructor \
	of either a StringBuffer or StringBuilder.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds places in the code where a character literal is used \
	to initialize a newly created StringBuffer or StringBuilder. This has the \
	(presumably) unintended result of converting the character literal into an \
	int to set the initial size of the StringBuffer or StringBuilder.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following expression would be flagged as a violation:\
	<p><code>\
	\tnew StringBuffer('c');\
	</code>

# {0} Name of instantiated class
avoidStringBufferInstantiationWithChar.charLiteral.description = \
	Character literal used to create {0}
avoidStringBufferInstantiationWithChar.charLiteral.explanation = \
	Character literals should not be used to initialize a newly created {0} \
	because it is converted into an int to set the initial size.

	avoidStringBufferInstantiationWithChar.charLiteral.replaceWithString.name = Replace with String
	avoidStringBufferInstantiationWithChar.charLiteral.replaceWithString.description = \
		Use a String literal instead.

################################################################################

avoidSubtypingCloneable.name = Avoid Subtyping Cloneable
avoidSubtypingCloneable.longName = \
	Don't subtype Cloneable
avoidSubtypingCloneable.description = \
	<b>Summary</b>\
	<br/>\
	It is best to avoid creating subtypes of Cloneable.\
	<p>\
	<b>Description</b>\
	<br/>\
	The Cloneable interface serves no purpose other than to modify the \
	behavior of Object's clone method. There's no reason for interfaces to \
	extend it. Classes rarely benefit from implementing it; there are better \
	ways to copy objects than by cloning.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following class declaration would be flagged as a violation:\
	<p><code>\
	\tpublic class Customer implements Cloneable\
	</code>

# {0} = interface name
avoidSubtypingCloneable.interfaceExtendsCloneable.description = \
	{0} extends Cloneable
avoidSubtypingCloneable.interfaceExtendsCloneable.explanation = \
	There is no reason for an interface to extend Cloneable.

	# {0} = interface name
	avoidSubtypingCloneable.interfaceExtendsCloneable.recommendation.name = Recommendation...
	avoidSubtypingCloneable.interfaceExtendsCloneable.recommendation.description = \
		Redefine {0} so that it does not extend Cloneable.

# {0} = class name
avoidSubtypingCloneable.classImplementsCloneable.description = \
	{0} implements Cloneable
avoidSubtypingCloneable.classImplementsCloneable.explanation = \
	Classes rarely benefit from implementing Cloneable; consider an \
	alternative mechanism for copying objects.

	# {0} = class name
	avoidSubtypingCloneable.classImplementsCloneable.recommendation.name = Recommendation...
	avoidSubtypingCloneable.classImplementsCloneable.recommendation.description = \
		Change {0} so that it does not implement Cloneable.

################################################################################

avoidUtilityMethods.name = Avoid Utility Methods
avoidUtilityMethods.longName = \
	Don't write utility methods
avoidUtilityMethods.description = \
	<b>Summary</b>\
	<br/>\
	Utility methods should be avoided except under certain circumstances.\
	<p>\
	<b>Description</b>\
	<br/>\
	A utility method is defined to be any method that is not required to be \
	defined in any particular location. For example, a method to compute the \
	sum of the elements in an array of integers doesn't refer to anything other \
	than the parameter, so the class in which it is declared is irrelevent. \
	Utility methods are usually a strong indication that behavior has not been \
	implemented where it should be, and are therefore an indication that the \
	code needs to be refactored.

avoidUtilityMethods.utilityMethod.description = \
	Utility method
avoidUtilityMethods.utilityMethod.explanation = \
	Utility methods usually indicate the need to refactor the code.

	avoidUtilityMethods.utilityMethod.recommendation.name = Recommendation...
	avoidUtilityMethods.utilityMethod.recommendation.description = \
		Move the code in the method to a more suitable location.

################################################################################

badlyLocatedArrayDeclarators.name = Badly Located Array Declarators
badlyLocatedArrayDeclarators.longName = \
	Place array declarators after the type name
badlyLocatedArrayDeclarators.description = \
	<b>Summary</b>\
	<br/>\
	Array declarators should be placed next to the type descriptor of their \
	component type.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks to ensure that the array declarators (the "[]" in \
	the declaration of a variable with an array type) occur after the type \
	name rather than after the variable name.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following declaration would be flagged as a violation because of the \
	placement of the array brackets:\
	<p><code>\
	\tint x[];\
	</code><p>\
	It should be replaced by a declaration of the form:\
	<p><code>\
	\tint[] x;\
	</code>

# {0} = declaration source
badlyLocatedArrayDeclarators.withType.description = \
	Badly located array declarators: {0}
badlyLocatedArrayDeclarators.withType.explanation = \
	The array declarators ("[]") should be placed immediately after the name \
	of the base type, not after the name of the variable.

	badlyLocatedArrayDeclarators.withType.recommendation.name = Recommendation...
	badlyLocatedArrayDeclarators.withType.recommendation.description = \
		Move the array declarator immediately after the name of the base type.

################################################################################

bewareOfURLEqualsAndHashCode.name = Beware of URL equals() and hashCode()
bewareOfURLEqualsAndHashCode.longName = \
	Be careful when using URL equals() and hashCode()
bewareOfURLEqualsAndHashCode.description = \
	<b>Summary</b>\
	<br/>\
	Be careful when and how you use the <code>equals()</code> and \
	<code>hashCode()</code> methods of the <code>URL</code> class.\
	<p>\
	<b>Description</b>\
	<br/>\
	Both the <code>equals()</code> and <code>hashCode()</code> \
	methods of the <code>URL</code> class resolve the domain name using the \
	Internet. This operation can cause unexpected performance problems. \
	Also, the <code>hashCode()</code> method takes the resolved IP address \
	into account when generating the hash code. This can cause serious problems \
	since many web sites use dynamic DNS. It is possible to store a \
	<code>URL</code> in a hashed collection, and later be unable to retrieve it \
	if the <code>URL</code> resolves to a different IP address.\
	<p>\
	Because of these implementation problems, it is a good idea to convert \
	<code>URL</code>s to <code>URI</code>s before storing them in collections, \
	or using their <code>equals()</code> or <code>hashCode()</code> methods. \
	This can be done easily using <code>URL</code>'s <code>toURI()</code> \
	method, and reversed using <code>URI</code>'s <code>toURL()</code> method.\
	<p>\
	This rule finds places where <code>equals()</code> or \
	<code>hashCode()</code> are explicitly invoked on <code>URL</code> objects \
	and places where URL objects are used in hashed Collections classes. \
	<p>\
	<b>Example</b>\
	<br/>\
	The following would be flagged as a violation: \
	<p><code>\
	\tURL aUrl = new URL("http://address.com");<br>\
	\tSet aSet = new HashSet();<br>\
	\taSet.add(aUrl);\
	</code>

# {0} = method invoked
# {1} = parameter list
bewareOfURLEqualsAndHashCode.invokedOnURL.description = \
	{0}() explicitly invoked on a URL
bewareOfURLEqualsAndHashCode.invokedOnURL.explanation = \
	The <code>{0}()</code> method defined for <code>URL</code>s resolves domain \
	names using the computer's Internet connection, which causes significant \
	performance problems, and is not guaranteed to consistently return the same \
	value for the same <code>URL</code>.

	bewareOfURLEqualsAndHashCode.invokedOnURL.recommendation.name = Recommendation...
	bewareOfURLEqualsAndHashCode.invokedOnURL.recommendation.description = \
		Consider using <code>toURI()</code> to convert <code>URL</code>s to \
		<code>URI</code>s before invoking {0}() on them, since <code>URI</code>'s \
		<code>{0}()</code> method does not have this problem.
		
# {0} = collection type
# {1} = method name
bewareOfURLEqualsAndHashCode.storedInCollection.description = \
	URL stored in a {0}
bewareOfURLEqualsAndHashCode.storedInCollection.explanation = \
	A <code>URL</code> is being stored in a <code>{0}</code>, which is a hashed collection. \
	However, <code>URL</code>s should <u>never</u> be stored in hashed collections, because \
	their <code>hashCode()</code> method does not consistently return the same hash code \
	for the same  object. It is possible to store a <code>URL</code> in a hashed \
	collection and later be unable to retrieve it because its hash code has changed.

	bewareOfURLEqualsAndHashCode.storedInCollection.recommendation.name = Recommendation...
	bewareOfURLEqualsAndHashCode.storedInCollection.recommendation.description = \
		Use <code>toURI()</code> to convert <code>URL</code>s before \
		storing them in Collections classes, and use <code>toURL()</code> to \
		convert them back after retrieving them.

# {0} The collection type
bewareOfURLEqualsAndHashCode.typeParameter.description = \
	Hashed collection of URLs
bewareOfURLEqualsAndHashCode.typeParameter.explanation = \
	The code defines a <code>{0}</code> which will store <code>URL</code>s. \
	However, <code>URL</code>s should <u>never</u> be stored in hashed collections, because \
	their <code>hashCode()</code> method does not consistently return the same hash code \
	for the same object. It is possible to store a <code>URL</code> in a hashed \
	collection and later be unable to retrieve it because its hash code has changed.

	bewareOfURLEqualsAndHashCode.typeParameter.recommendation.name = Recommendation...
	bewareOfURLEqualsAndHashCode.typeParameter.recommendation.description = \
		Store <code>URI</code>s in the collection instead of <code>URL</code>s. \
		Use <code>toURI()</code> to convert <code>URL</code>s to <code>URI</code>s \
		and <code>toURL()</code> to convert them back. \

################################################################################

blankLineUsage.name = Blank Line Usage
blankLineUsage.longName = \
	Blank lines should be used consistently to improve readability
blankLineUsage.description = \
	<b>Summary</b>\
	<br/>\
	Blank lines should be used consistently to improve readability.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for places where the number of blank lines used \
	between program elements is not consistent.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule has been configured to expect two blank lines between \
	members in a type, then the following field declarations will be \
	flagged because there is only one blank line between them:\
	<p><code>\
	\tprivate int x;<br>\
	<br>\
	\tprivate int y;\
	</code>

# {0} = preferred line count
blankLineUsage.betweenMembers.description = \
	Incorrect spacing between members
blankLineUsage.betweenMembers.explanation = \
	Members within a type should be separated by {0} blank lines.

	# {0} = preferred line count
	blankLineUsage.betweenMembers.fixSpacing.name = Fix Spacing
	blankLineUsage.betweenMembers.fixSpacing.description = \
		Reformat the code so that there are {0} blank lines between \
		the members.

# {0} = preferred line count
blankLineUsage.inMember.description = \
	Incorrect spacing between statements
blankLineUsage.inMember.explanation = \
	Statements within a method should be separated by {0} blank lines.

	# {0} = preferred line count
	blankLineUsage.inMember.fixSpacing.name = Fix Spacing
	blankLineUsage.inMember.fixSpacing.description = \
		Reformat the code so that there are {0} blank lines between \
		the statements.

################################################################################

blockDepth.name = Block Depth
blockDepth.longName = \
	Statements should not be deeply nested
blockDepth.description = \
	<b>Summary</b>\
	<br/>\
	Methods should be kept fairly flat.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds methods and constructors that have too many levels \
	of nested blocks. A method with too many levels of nested blocks can be \
	difficult to understand. The definition of "too many" can be set.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the limit is set to two, then the inner if statement in the following \
	would be flagged as a violation:\
	<p><code>\
	\tif (firstChoice == null) {<br>\
	\t\tif (secondChoice == null) {<br>\
	\t\t\tif (thirdChoice == null) {<br>\
	\t\t\t\treturn null;<br>\
	\t\t\t}<br>\
	\t\t}<br>\
	\t}\
	</code>

# {0} = maximum block depth
blockDepth.deepInitializer.description = \
	Initializer has {0} levels of nested blocks
blockDepth.deepInitializer.explanation = \
	The initializer contains too many levels of nested blocks, making the code \
	difficult to understand. Try extracting some or all of the code into a \
	separate method.

	blockDepth.deepInitializer.recommendation.name = Recommendation...
	blockDepth.deepInitializer.recommendation.description = \
		Reduce the complexity of the initializer by extracting some of the \
		code into a separate method.

# {0} = maximum block depth
blockDepth.deepConstructor.description = \
	Constructor has {0} levels of nested blocks
blockDepth.deepConstructor.explanation = \
	The constructor contains too many levels of nested blocks, making \
	the code difficult to understand. Try extracting some of the code into a \
	separate method.

	blockDepth.deepConstructor.recommendation.name = Recommendation...
	blockDepth.deepConstructor.recommendation.description = \
		Reduce the complexity of the constructor by extracting some of the \
		code into a separate method.

# {0} = maximum block depth
blockDepth.deepMethod.description = \
	Method has {0} levels of nested blocks
blockDepth.deepMethod.explanation = \
	The method contains too many levels of nested blocks, making \
	the code difficult to understand. Try extracting some of the code into a \
	separate method.

	blockDepth.deepMethod.recommendation.name = Recommendation...
	blockDepth.deepMethod.recommendation.description = \
		Reduce the complexity of the method by extracting some of the code \
		into a separate method.

################################################################################

booleanMethodNamingConvention.name = Boolean Method Naming Convention
booleanMethodNamingConvention.longName = \
	Name boolean methods with a standard prefix
booleanMethodNamingConvention.description = \
	<b>Summary</b>\
	<br/>\
	Boolean method names should start with 'is', 'can', 'has' or 'have'. \
	Non-boolean methods should not start with 'is'.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks the names of all boolean methods to make sure that \
	they are prefixed with 'is', 'can', 'has' or 'have'. It also checks the \
	names of all non-boolean methods to make sure that they are not prefixed \
	with 'is'.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following method would be flagged as a violation because it returns a \
	boolean value but does not start with an approved prefix:\
	<p><code>\
	\tpublic boolean willExplodeIfShaken()\
	</code><p>\
	The following method would be flagged as a violation because it starts \
	with 'is' but does not return a boolean:\
	<p><code>\
	\tpublic int isRoundedBy()\
	</code>

# {0} = method name
# {1} = allowed prefixes list
booleanMethodNamingConvention.invalidBooleanPrefix.description = \
	Invalid boolean method name: "{0}" should be prefixed with {1}
booleanMethodNamingConvention.invalidBooleanPrefix.explanation = \
	The boolean method name "{0}" does not conform because it is not \
	prefixed with {1}.

	booleanMethodNamingConvention.invalidBooleanPrefix.rename.name = Rename the method
	booleanMethodNamingConvention.invalidBooleanPrefix.rename.description = \
		Rename the method to have one of the valid prefixes.

# {0} = method name
# {1} = matching prefix
booleanMethodNamingConvention.invalidNonBooleanPrefix.description = \
	Invalid method name: "{0}" should not be prefixed with {1}
booleanMethodNamingConvention.invalidNonBooleanPrefix.explanation = \
	The method name "{0}" does not conform because it should not be prefixed \
	with {1} which is reserved for boolean methods.

	booleanMethodNamingConvention.invalidNonBooleanPrefix.rename.name = Rename the method
	booleanMethodNamingConvention.invalidNonBooleanPrefix.rename.description = \
		Rename the method so that it does not have a boolean method prefix.

################################################################################

bracePosition.name = Brace Position
bracePosition.longName = \
	Place opening and closing braces in the correct places
bracePosition.description = \
	<b>Summary</b>\
	<br/>\
	Opening and closing braces should be positioned properly.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds opening and closing braces that are incorrectly \
	positioned. By default, opening braces should not appear on a new line \
	and closing braces should appear on a new line. Opening braces for methods \
	and types should appear on a new line.\
	<p>\
	<b>Example</b>\
	<br/>\
	With the default settings, the opening brace for the following method \
	and the opening brace for the if statement within it would both be \
	flagged as violations:\
	<p><code>\
	\tpublic int getLength(Object[] array) {<br>\
	\t\tif (array == null)<br>\
	\t\t{<br>\
	\t\t\treturn 0;<br>\
	\t\t}<br>\
	\t\treturn array.length;<br>\
	\t}\
	</code>

# {0} = "should" | "should not"
bracePosition.openingBrace.description = \
	Opening braces {0} appear on a new line
bracePosition.openingBrace.explanation = \
	Opening braces {0} appear on a new line.

	# {0} = "next" | "previous"
	bracePosition.openingBrace.recommendation.name = Recommendation...
	bracePosition.openingBrace.recommendation.description = \
		Move the opening brace to the {0} line.

# {0} = "should" | "should not"
bracePosition.closingBrace.description = \
	Closing braces {0} appear on a new line
bracePosition.closingBrace.explanation = \
	Closing braces {0} appear on a new line.

	# {0} = "next" | "previous"
	bracePosition.closingBrace.recommendation.name = Recommendation...
	bracePosition.closingBrace.recommendation.description = \
		Move the closing brace to the {0} line.

# {0} = "should" | "should not"
bracePosition.openingBraceMethod.description = \
	Opening brace for a method {0} appear on a new line
bracePosition.openingBraceMethod.explanation = \
	Opening brace for a method {0} appear on a new line.

	# {0} = "next" | "previous"
	bracePosition.openingBraceMethod.recommendation.name = Recommendation...
	bracePosition.openingBraceMethod.recommendation.description = \
		Move the opening brace to the {0} line.

# {0} = "should" | "should not"
bracePosition.closingBraceMethod.description = \
	Closing brace for a method {0} appear on a new line
bracePosition.closingBraceMethod.explanation = \
	Closing brace for a method {0} appear on a new line.

	# {0} = "next" | "previous"
	bracePosition.closingBraceMethod.recommendation.name = Recommendation...
	bracePosition.closingBraceMethod.recommendation.description = \
		Move the closing brace to the {0} line.

# {0} = "should" | "should not"
bracePosition.openingBraceType.description = \
	Opening brace for a type {0} appear on a new line
bracePosition.openingBraceType.explanation = \
	Opening brace for a type {0} appear on a new line.

	# {0} = "next" | "previous"
	bracePosition.openingBraceType.recommendation.name = Recommendation...
	bracePosition.openingBraceType.recommendation.description = \
		Move the opening brace to the {0} line.

# {0} = "should" | "should not"
bracePosition.closingBraceType.description = \
	Closing brace for a type {0} appear on a new line
bracePosition.closingBraceType.explanation = \
	Closing brace for a type {0} appear on a new line.

	# {0} = "next" | "previous"
	bracePosition.closingBraceType.recommendation.name = Recommendation...
	bracePosition.closingBraceType.recommendation.description = \
		Move the closing brace to the {0} line.

################################################################################

breakWithLabel.name = Break with Label
breakWithLabel.longName = \
	Don't use a label with the break statement
breakWithLabel.description = \
	<b>Summary</b>\
	<br/>\
	Break statements should not reference a labeled statement.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds break statements that reference a labeled statement. \
	The use of a label with a break statement makes the code much harder to \
	read and maintain, and should therefore be avoided. Consider moving the \
	code that contains the break into a separate method and using a return \
	statement instead.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following break statement would be flagged as a violation:\
	<p><code>\
	\touter: for (int i = 0; i &lt; array.length; i++) {<br>\
	\t\tfor (int j = 0; j &lt; array[i].length; j++) {<br>\
	\t\t\tif (array[i][j] == 0) {<br>\
	\t\t\t\tbreak outer;<br>\
	\t\t\t}<br>\
	\t\t\t...<br>\
	\t\t}<br>\
	\t}\
	</code>

# {0} = label
breakWithLabel.label.description = \
	Break statement with label: {0}
breakWithLabel.label.explanation = \
	The break statement should not reference a label.

	breakWithLabel.label.recommendation.name = Recommendation...
	breakWithLabel.label.recommendation.description = \
		Remove the label reference by moving the code into a separate method.

################################################################################

bundleActivationPolicy.name = Bundle Activation Policy Compatibility (3.3)
bundleActivationPolicy.longName = \
	The bundle activation policy should be specified multiple ways
bundleActivationPolicy.description = \
	<b>Summary</b>\
	<br/>\
	The bundle activation policy must be duplicated in order to work in all \
	versions of Eclipse.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for bundle manifest files that specify a bundle \
	activation policy using either the <code>Eclipse-LazyStart</code> or \
	<code>Bundle-ActivationPolicy</code> header, but not both. In Eclipse 3.3 a \
	new manifest file header was introduced that is compatible with OSGI. In \
	order for a bundle (plug-in) to be correct in all versions of Eclipse \
	(that support the use of manifest files) both headers should be included \
	in the manifest file.\
	<p>\
	<b>Example</b>\
	<br/>\
	A manifest file specifying a <code>Bundle-ActivationPolicy</code> without a \
	<code>Eclipse-LazyStart</code> would be flagged:\
	<p><code>\
	\tBundle-ActivationPolicy: lazy\
	</code>

bundleActivationPolicy.missingPolicy.description = \
	Missing a Bundle-ActivationPolicy header
bundleActivationPolicy.missingPolicy.explanation = \
	This manifest file contains an <code>Eclipse-LazyStart</code> header but \
	does not have a corresponding <code>Bundle-ActivationPolicy</code> header.

	bundleActivationPolicy.missingPolicy.recommendation.name = Recommendation...
	bundleActivationPolicy.missingPolicy.recommendation.description = \
		Add a <code>Bundle-ActivationPolicy</code> header to the file.

bundleActivationPolicy.missingLazyStart.description = \
	Missing an Eclipse-LazyStart header
bundleActivationPolicy.missingLazyStart.explanation = \
	This manifest file contains a <code>Bundle-ActivationPolicy</code> header \
	but does not have a corresponding <code>Eclipse-LazyStart</code> header.

	bundleActivationPolicy.missingLazyStart.recommendation.name = Recommendation...
	bundleActivationPolicy.missingLazyStart.recommendation.description = \
		Add an <code>Eclipse-LazyStart</code> header to the file.

################################################################################

caughtExceptions.name = Caught Exceptions
caughtExceptions.longName = \
	Some exceptions should not be caught
caughtExceptions.description = \
	<b>Summary</b>\
	<br/>\
	Some exceptions should not be caught.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds catch clauses that catch an exception class that is \
	disallowed. The list initially includes exception classes that are either \
	too general (such as Throwable or Exception), or that are unchecked (such \
	as Error and RuntimeException).\
	<p>\
	<b>Example</b>\
	<br/>\
	The following catch clause would be flagged because it catches instances \
	of the class java.lang.Throwable, which is too general:\
	<p><code>\
	\ttry {<br>\
	\t\t...<br>\
	\t} catch (Throwable exception) {<br>\
	\t\t...<br>\
	\t}\
	</code>

# {0} = exception class name
caughtExceptions.disallowed.description = \
	Disallowed exception caught: {0}
caughtExceptions.disallowed.explanation = \
	The exception {0} should not be caught. Consider catching a more specific \
	class of exception (one or more subclasses of {0}).

	caughtExceptions.disallowed.delete.name = Delete catch clause
	caughtExceptions.disallowed.delete.description = \
		Delete the catch clause.

# {0} = exception class name
caughtExceptions.disallowedHierarchy.description = \
	Disallowed exception caught: {0}
caughtExceptions.disallowedHierarchy.explanation = \
	The exception {0} should not be caught.

	caughtExceptions.disallowedHierarchy.delete.name = Delete catch clause
	caughtExceptions.disallowedHierarchy.delete.description = \
		Delete the catch clause.

################################################################################

characterComparison.name = Character Comparison
characterComparison.longName = \
	Don't compare character values using non-equality operators
characterComparison.description = \
	<b>Summary</b>\
	<br/>\
	Character values should not be compared using any of the non-equality \
	operators.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds places where two Character values are compared \
	using any of the non-equality operators. Such comparisons are usually an \
	attempt to classify characters and such tests are usually not valid across \
	all locales.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following code, designed to test for a lower-case letter, would be \
	flagged as a violation:\
	<p><code>\
	\tif (ch &gt;= 'a' &amp;&amp; ch &lt;= 'z') {<br>\
	\t\t...<br>\
	\t}\
	</code>

# {0} = comparison operator
characterComparison.invalid.description = \
	Cannot compare character values using the {0} operator
characterComparison.invalid.explanation = \
	Comparing character values by using any of the non-equality operators is \
	usually an attempt to classify characters. Such tests are usually not \
	valid across all locales.

	characterComparison.invalid.recommendation.name = Recommendation...
	characterComparison.invalid.recommendation.description = \
		Use one of the classification methods defined by the class Character.

################################################################################

checkEnabledBeforeLogging.name = Check Enabled Before Logging
checkEnabledBeforeLogging.longName = \
	Check that logging has been enabled before invoking the logging methods
checkEnabledBeforeLogging.description = \
	<b>Summary</b>\
	<br/>\
	Check that logging has been enabled before invoking the logging methods.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds invocations of the Log4J logging methods that are not \
	guarded by a check to ensure that the appropriate level of logging has been enabled. Invocations \
	of the logging methods should be guarded to avoid computation of logging \
	output when it isn't going to be reported.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following invocation of the debug method:\
	<p><code>\
	\tlogger.debug("I never thought we'd get here!");\
	</code><p>\
	should be replaced by something like the following:\
	<p><code>\
	\tif (logger.isDebugEnabled()) {<br>\
	\t\tlogger.debug("I never thought we'd get here!");<br>\
	\t}\
	</code>

# {0} = logging method name
# {1} = expected logging level name
checkEnabledBeforeLogging.notEnabled.description = \
	Unguarded use of logging method {0}
checkEnabledBeforeLogging.notEnabled.explanation = \
	The method {0} should only be invoked after checking to see whether logging \
	has been enabled at the {1} level.

	checkEnabledBeforeLogging.notEnabled.recommendation.name = Recommendation...
	checkEnabledBeforeLogging.notEnabled.recommendation.description = \
		Add code to check whether logging has been enabled.

# {0} = logging method name
# {1} = expected logging level name
# {2} = actual logging level name
checkEnabledBeforeLogging.wrongLevelEnabled.description = \
	Use of logging method {0} at wrong level
checkEnabledBeforeLogging.wrongLevelEnabled.explanation = \
	The method {0} should only be invoked after checking to see whether logging \
	has been enabled at the {1} level. The level {2} is currently being checked.

	checkEnabledBeforeLogging.wrongLevelEnabled.recommendation.name = Recommendation...
	checkEnabledBeforeLogging.wrongLevelEnabled.recommendation.description = \
		Add code to check whether logging has been enabled at the right level.

################################################################################

checkEnabledBeforeLogging.jcl.name = Check Enabled Before Logging
checkEnabledBeforeLogging.jcl.longName = \
	Check that logging has been enabled before invoking the logging methods
checkEnabledBeforeLogging.jcl.description = \
	<b>Summary</b>\
	<br/>\
	Check that logging has been enabled before invoking the logging methods.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds invocations of the JCL logging methods that are not \
	guarded by a check to ensure that the appropriate level of logging has been \
	enabled. Invocations of the logging methods should be guarded to avoid \
	computation of logging output when it isn't going to be reported.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following invocation of the debug method:\
	<p><code>\
	\tlogger.debug("I never thought we'd get here!");\
	</code><p>\
	should be replaced by something like the following:\
	<p><code>\
	\tif (logger.isDebugEnabled()) {<br>\
	\t\tlogger.debug("I never thought we'd get here!");<br>\
	\t}\
	</code>

# {0} = logging method name
# {1} = expected logging level name
checkEnabledBeforeLogging.jcl.notEnabled.description = \
	Unguarded use of logging method {0}
checkEnabledBeforeLogging.jcl.notEnabled.explanation = \
	The method {0} should only be invoked after checking to see whether logging \
	has been enabled at the {1} level.

	checkEnabledBeforeLogging.jcl.notEnabled.recommendation.name = Recommendation...
	checkEnabledBeforeLogging.jcl.notEnabled.recommendation.description = \
		Add code to check whether logging has been enabled.

# {0} = logging method name
# {1} = expected logging level name
# {2} = actual logging level name
checkEnabledBeforeLogging.jcl.wrongLevelEnabled.description = \
	Use of logging method {0} at wrong level
checkEnabledBeforeLogging.jcl.wrongLevelEnabled.explanation = \
	The method {0} should only be invoked after checking to see whether logging \
	has been enabled at the {1} level. The level {2} is currently being checked.

	checkEnabledBeforeLogging.jcl.wrongLevelEnabled.recommendation.name = Recommendation...
	checkEnabledBeforeLogging.jcl.wrongLevelEnabled.recommendation.description = \
		Add code to check whether logging has been enabled at the right level.

################################################################################

checkTypeInEquals.name = Check Type In Equals
checkTypeInEquals.longName = \
	Check the type of the parameter when implementing equals(Object)
checkTypeInEquals.description = \
	<b>Summary</b>\
	<br/>\
	Implementations of equals() should check the type of the parameter.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds implementations of the method equals() that do not \
	check the type of the parameter. The rule can be configured for how the \
	type of the parameter should be checked.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following declaration of the equals() method would be flagged because \
	the type of the argument is not checked:\
	<p><code>\
	\tpublic boolean equals(Object other)<br>\
	\t{<br>\
	\t\treturn getName().equals(((Employee) other).getName());<br>\
	\t}\
	</code>

checkTypeInEquals.getClass.description = \
	equals() does not use getClass()
checkTypeInEquals.getClass.explanation = \
	This implementation of the equals() method should use the getClass() \
	method to check the class of the parameter.

	checkTypeInEquals.getClass.recommendation.name = Recommendation...
	checkTypeInEquals.getClass.recommendation.description = \
		Use getClass() to check the type of the parameter.

checkTypeInEquals.instanceof.description = \
	equals() does not use instanceof
checkTypeInEquals.instanceof.explanation = \
	This implementation of the equals() method should use the instanceof \
	operator to check the class of the parameter.

	checkTypeInEquals.instanceof.recommendation.name = Recommendation...
	checkTypeInEquals.instanceof.recommendation.description = \
		Use instanceof to check the type of the parameter.

checkTypeInEquals.any.description = \
	equals() does not check type of parameter
checkTypeInEquals.any.explanation = \
	This implementation of the equals() method should use either the \
	instanceof operator or the getClass() method to check the class of the \
	parameter.

	checkTypeInEquals.any.recommendation.name = Recommendation...
	checkTypeInEquals.any.recommendation.description = \
		Use instanceof or getClass() to check the type of the parameter.

################################################################################

classGetNameUsage.name = Class getName() Usage
classGetNameUsage.longName = \
	Don't use the names of classes to compare them
classGetNameUsage.description = \
	<b>Summary</b>\
	<br/>\
	Don't use the Class getName() method.\
	<p>\
	<b>Description</b>\
	<br/>\
	Don't use the Class getName() method to compare classes.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following invocation of getName() would be flagged as a violation:\
	<p><code>\
	\tif (object.getClass().getName().equals("java.util.ArrayList")) {\
	</code>

# {0} = type name
# {1} = method name
classGetNameUsage.avoid.description = \
	Avoid using the {0}.{1}() method to compare classes
classGetNameUsage.avoid.explanation = \
	Avoid using the {0}.{1}() method to compare classes

	classGetNameUsage.avoid.recommendation.name = Recommendation...
	classGetNameUsage.avoid.recommendation.description = \
		Use the equals() method or the == operator instead.

################################################################################

classNamingConvention.name = Class Naming Convention
classNamingConvention.longName = \
	Use the standard naming convention for classes
classNamingConvention.description = \
	<b>Summary</b>\
	<br/>\
	Class names should conform to the defined standard.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks the names of all classes to ensure that they \
	conform to the standard.\
	<p>\
	<b>Example</b>\
	<br/>\
	If class names are specified as needing to start with an upper-case letter, \
	the following class definition would be flagged as being a violation:\
	<p><code>\
	\tpublic class remoteDatabase<br>\
	\t{<br>\
	\t\t...<br>\
	\t}\
	</code>

# {0} = class name
# {1} = failure reason
classNamingConvention.invalidName.description = \
	Invalid class name: "{0}" {1}
classNamingConvention.invalidName.explanation = \
	The class name "{0}" does not conform because it {1}.

	# {0} = original name
	# {1} = suggested name
	classNamingConvention.invalidName.rename.name = Rename class to "{1}"
	classNamingConvention.invalidName.rename.description = \
		Rename the class from "{0}" to "{1}".

################################################################################

cloneMethodUsage.name = Clone Method Usage
cloneMethodUsage.longName = \
	Make clone methods final and invoke super.clone()
cloneMethodUsage.description = \
	<b>Summary</b>\
	<br/>\
	Every implementation of clone() should invoke super.clone() and \
	every clone() method should be final.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for implementations of the method clone() that do \
	not invoke the inherited clone() method. It also looks for clone() methods \
	that are not declared final.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following declaration of the clone method would be flagged as being \
	a violation, both because of the lack of an invocation of the inherited \
	clone method and because it is not declared 'final'.\
	<p><code>\
	\tpublic Object clone()<br>\
	\t{<br>\
	\t\treturn new Employee(getName());<br>\
	\t}\
	</code>

cloneMethodUsage.invokeSuper.description = \
	Should invoke the method super.clone()
cloneMethodUsage.invokeSuper.explanation = \
	Calling "super.clone()" invokes the method "Object.clone()", which creates \
	an object of the correct type. "Object.clone()" initializes each field in \
	the new object by assigning it the value from the corresponding field in \
	the object being cloned. If "super.clone()" is not called, the object \
	might not be initialized properly.

	cloneMethodUsage.invokeSuper.recommendation.name = Recommendation...
	cloneMethodUsage.invokeSuper.recommendation.description = \
		Invoke the super.clone() method to ensure that the object is \
		initialized properly.

cloneMethodUsage.makeFinal.description = \
	clone() method should be final for security purposes
cloneMethodUsage.makeFinal.explanation = \
	If a class implements a non-final "clone()" method, then attackers can \
	create their own subclass that implements a "clone()" method that does not \
	call a constructor, possibly changing the behavior of the cloned object.
 
	cloneMethodUsage.makeFinal.recommendation.name = Recommendation...
	cloneMethodUsage.makeFinal.recommendation.description = \
		Make the clone() method final in order to avoid security issues.

################################################################################

closeConnectionWhereCreated.name = Close Connection Where Created
closeConnectionWhereCreated.longName = \
	Close database connections where they are created
closeConnectionWhereCreated.description = \
	<b>Summary</b>\
	<br/>\
	Database connections should be closed in the same method in which they are \
	created.\
	<p>\
	<b>Description</b>\
	<br/>\
	This rule finds methods in which a database connection is created but not \
	closed. When the close is in a different method it is harder to ensure that \
	it will always be invoked.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following invocation would be flagged as a violation because there is \
	no corresponding close method:\
	<p><code>\
	\tpublic void readFromDatabase(String url)<br>\
	\t{<br>\
	\t\tConnection connection = DriverManager.getConnection(url);<br>\
	\t\treadFromDatabase(connection);<br>\
	\t}\
	</code>

closeConnectionWhereCreated.notClosed.description = \
	Connection not closed
closeConnectionWhereCreated.notClosed.explanation = \
	The close method is not invoked on the connection created by this invocation.

	closeConnectionWhereCreated.notClosed.recommendation.name = Recommendation...
	closeConnectionWhereCreated.notClosed.recommendation.description = \
		Surround the code that creates the connection with a try statement and \
		add an invocation of the close method in the finally block for the try \
		statement.

closeConnectionWhereCreated.notInFinally.description = \
	Close method not invoked in a finally block
closeConnectionWhereCreated.notInFinally.explanation = \
	The close method is not invoked within a finally block, so it could be missed.

	closeConnectionWhereCreated.notInFinally.recommendation.name = Recommendation...
	closeConnectionWhereCreated.notInFinally.recommendation.description = \
		Surround the code that creates the connection with a try statement and \
		move the invocation of the close method inside the finally block for \
		the try statement.

################################################################################

closeInFinally.name = Close In Finally
closeInFinally.longName = \
	Close streams, readers, writers and sockets in a finally block
closeInFinally.description = \
	<b>Summary</b>\
	<br/>\
	The method close() should be invoked inside a finally block.\
	<p>\
	<b>Description</b>\
	<br/>\
	This rule finds places where the method close() is invoked outside of a \
	finally block.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following invocation would be flagged as a violation because it occurs \
	outside of a finally block:\
	<p><code>\
	\tpublic void readFile(FileReader reader)<br>\
	\t{<br>\
	\t\t...<br>\
	\t\treader.close();<br>\
	\t}\
	</code>

closeInFinally.notInFinally.description = \
	Close method called outside finally block
closeInFinally.notInFinally.explanation = \
	The close method is called outside of a finally block, which means that it \
	might not get executed if an exception is thrown.

	closeInFinally.notInFinally.recommendation.name = Recommendation...
	closeInFinally.notInFinally.recommendation.description = \
		Surround the code that creates and manipulates the resource with a \
		try statement and move the invocation of the close method inside the \
		finally block for the try statement.

################################################################################

closeOrder.name = Close Order
closeOrder.longName = \
	Close ResultSets before Statements and Statements before Connections
closeOrder.description = \
	<b>Summary</b>\
	<br/>\
	Close ResultSets before Statements and Statements before Connections.\
	<p>\
	<b>Description</b>\
	<br/>\
	This rule find places where a Statement is closed after a Connection or \
	where a ResultSet is closed after either of the other two in a single \
	method.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following closing of the result set would be flagged as a violation:\
	<p><code>\
	\tpublic void close(ResultSet resultSet)<br>\
	\t{<br>\
	\t\tresultSet.getStatement().close();<br>\
	\t\tresultSet.close();<br>\
	\t}\
	</code>

# {0} = closed type
# {1} = previous type
closeOrder.wrongOrder.description = \
	{0} closed after {1}
closeOrder.wrongOrder.explanation = \
	Instances of the class {0} should be closed before {1}s.

	closeOrder.wrongOrder.recommendation.name = Recommendation...
	closeOrder.wrongOrder.recommendation.description = \
		Change the order of the close method invocations so that the ResultSet \
		is closed first (if there is one), followed by the Statement and then \
		the Connection.

################################################################################

closeResultSetWhereCreated.name = Close Result Set Where Created
closeResultSetWhereCreated.longName = \
	Close database result sets where they are created
closeResultSetWhereCreated.description = \
	<b>Summary</b>\
	<br/>\
	Database result sets should be closed in the same method in which they are \
	created.\
	<p>\
	<b>Description</b>\
	<br/>\
	This rule finds methods in which a database result set is created but not \
	closed. When the close is in a different method it is harder to ensure that \
	it will always be invoked.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following invocation would be flagged as a violation because there is \
	no corresponding close method:\
	<p><code>\
	\tpublic void readFromDatabase(Statement statement)<br>\
	\t{<br>\
	\t\tResultSet resultSet = statement.getResultSet();<br>\
	\t\treadFromDatabase(resultSet);<br>\
	\t}\
	</code>

closeResultSetWhereCreated.notClosed.description = \
	Result set not closed
closeResultSetWhereCreated.notClosed.explanation = \
	The close method is not invoked on the result set created by this invocation.

	closeResultSetWhereCreated.notClosed.recommendation.name = Recommendation...
	closeResultSetWhereCreated.notClosed.recommendation.description = \
		Surround the code that creates the result set with a try statement and \
		add an invocation of the close method in the finally block for the try \
		statement.

closeResultSetWhereCreated.notInFinally.description = \
	Close method not invoked in a finally block
closeResultSetWhereCreated.notInFinally.explanation = \
	The close method is not invoked within a finally block, so it could be missed.

	closeResultSetWhereCreated.notInFinally.recommendation.name = Recommendation...
	closeResultSetWhereCreated.notInFinally.recommendation.description = \
		Surround the code that creates the result set with a try statement and \
		move the invocation of the close method inside the finally block for \
		the try statement.

################################################################################

closeStatementWhereCreated.name = Close Statement Where Created
closeStatementWhereCreated.longName = \
	Close database statements where they are created
closeStatementWhereCreated.description = \
	<b>Summary</b>\
	<br/>\
	Database statements should be closed in the same method in which they are \
	created.\
	<p>\
	<b>Description</b>\
	<br/>\
	This rule finds methods in which a database statement is created but not \
	closed. When the close is in a different method it is harder to ensure that \
	it will always be invoked.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following invocation would be flagged as a violation because there is \
	no corresponding close method:\
	<p><code>\
	\tpublic void readFromDatabase(Connection connection)<br>\
	\t{<br>\
	\t\tStatement statement = connection.createStatement();<br>\
	\t\treadFromDatabase(statement);<br>\
	\t}\
	</code>

closeStatementWhereCreated.notClosed.description = \
	Statement not closed
closeStatementWhereCreated.notClosed.explanation = \
	The close method is not invoked on the statement created by this invocation.

	closeStatementWhereCreated.notClosed.recommendation.name = Recommendation...
	closeStatementWhereCreated.notClosed.recommendation.description = \
		Surround the code that creates the statement with a try statement and \
		add an invocation of the close method in the finally block for the try \
		statement.

closeStatementWhereCreated.notInFinally.description = \
	Close method not invoked in a finally block
closeStatementWhereCreated.notInFinally.explanation = \
	The close method is not invoked within a finally block, so it could be missed.

	closeStatementWhereCreated.notInFinally.recommendation.name = Recommendation...
	closeStatementWhereCreated.notInFinally.recommendation.description = \
		Surround the code that creates the statement with a try statement and \
		move the invocation of the close method inside the finally block for \
		the try statement.

################################################################################

closeWhereCreated.name = Close Where Created
closeWhereCreated.longName = \
	Close streams, readers, writers and sockets where they are created
closeWhereCreated.description = \
	<b>Summary</b>\
	<br/>\
	Streams, readers, writers and sockets should be closed in the method where \
	they are created.\
	<p>\
	<b>Description</b>\
	<br/>\
	Instances of subclasses of java.io.InputStream, java.io.OutputStream, \
	java.io.Reader, java.io.Writer, and java.net.Socket should be closed in \
	the same method in which they are created in order to avoid errors caused \
	when they are not closed at all.\
	<p>\
	<b>Example</b>\
	<br/>\
	The creation of a reader in the following method would be flagged as a \
	violation because the reader is not closed:\
	<p><code>\
	\tpublic void readFile(String filePath)<br>\
	\t{<br>\
	\t\tFileReader reader;<br>\
	<br>\
	\t\treader = new FileReader(new File(filePath));<br>\
	\t\treadFile(reader);<br>\
	\t}\
	</code>

# {0} = class name
closeWhereCreated.notClosed.description = \
	Instance of {0} not closed
closeWhereCreated.notClosed.explanation = \
	An instance of the class {0} is not closed in the method in which it is \
	created.

	closeWhereCreated.notClosed.recommendation.name = Recommendation...
	closeWhereCreated.notClosed.recommendation.description = \
		Add code to the method to ensure that the instance of the class {0} \
		is properly closed.

closeWhereCreated.notInFinally.description = \
	Close method not called in finally block
closeWhereCreated.notInFinally.explanation = \
	The close method is called outside of a finally block, which means that it \
	might not get executed if an exception is thrown.

	closeWhereCreated.notInFinally.recommendation.name = Recommendation...
	closeWhereCreated.notInFinally.recommendation.description = \
		Surround the code that creates and manipulates the resource with a \
		try statement and move the invocation of the close method inside the \
		finally block for the try statement.

################################################################################

codeInjection.name = Code Injection
codeInjection.longName = \
	Possible Code Injection vulnerabilities should be prevented
codeInjection.description = \
	<b>Summary</b>\
	<br/>\
	Scripts being executed might be receiving data from the user or other \
	unsafe sources.\
	<p>\
	<b>Description</b>\
	<br/>\
	Code Injection occurs when the user is able to enter data directly into \
	scripts to be executed.\
	<p>\
	The difference between Code Injection and Command Injection is that \
	Code Injection attempts try to introduce scripts that are then included \
	as part of the application runtime, while Command Injection attacks \
	execute the user input source from outside of the application runtime.\
	<p>\
	To detect violations, this audit rule searches the code for script executions \
	such as <code>javax.script.ScriptEngine.eval(..)</code> and \
	traces where the script data could have come from. In cases where the \
	source of the query is user input, such as data from a servlet request, \
	<code>javax.servlet.ServletRequest.getParameter(java.lang.String)</code>, \
	or from a SWT Text widget, <code>org.eclipse.swt.widgets.Text.getText()</code>, \
	a violation is created.\
	<p>\
	These two sets of methods, the locations where tainted user data can come \
	from and the methods used to execute the scripts, are editable by the user.\
	If methods are missing that are in a common package \
	(such as <code>java.lang.*</code>), please let CodePro support know.\
	<p>\
	<b>Security Implications</b>\
	<br/>\
	Successful Code Injection attacks can potentially \
	have malicious scripts executed with permissions not guarded against by the \
	program.\
	<p>\
	<b>Example</b>\
	<br/>\
	The invocation of the method <code>eval(..)</code> would be flagged \
	as a violation since it uses information passed from a SWT Text widget:\
	<p><code>\
	\tText text = ...;<br>\
	\tString script = text.getText();<br>\
	\tScriptEngine scriptEngine = ...;<br>\
	\t...<br>\
	\tscriptEngine.eval(script);<br>\
	</code>

codeInjection.injection.description = \
	Code Injection
codeInjection.injection.explanation = \
	The data path below was found as a potential Code Injection scenario. The \
	top of the path shows where the potentially harmful user data can enter \
	scripts. The bottom location in the path shows where the user data \
	originates.\
	<p>\
	{0}

	codeInjection.injection.recommendation.name = Recommendation...
	codeInjection.injection.recommendation.description = \
		User scripts should never be directly executed, the path should be \
		eliminated.

codeInjection.stackDepth.description = \
	Code Injection risk: path too long
codeInjection.stackDepth.explanation = \
	While tracing the sources of the script statements, the data path below \
	was found. While it does not terminate at a point where user input could \
	enter the system, it is too long to not be considered a potential Code \
	Injection risk. The following path is too long to be secure:\
	<p>\
	{0}

	codeInjection.stackDepth.recommendation.name = Recommendation...
	codeInjection.stackDepth.recommendation.description = \
		To minimize the risk of Code Injection, script statements should be \
		created and executed as locally as possible. Make the code more secure \
		by reducing the scope to this script execution.

codeInjection.largeFan.description = \
	Code Injection risk: too many sources
codeInjection.largeFan.explanation = \
	While tracing the sources of the script statements, the data path below \
	was found. While it does not terminate at a point where user input could \
	enter the system, it has too many sources to not be considered a potential \
	Code Injection risk.\
	<p>\
	{0}\
	<p>\
	The locations after this data path where it branches off are as follows:\
	<p>\
	{1}

	codeInjection.largeFan.recommendation.name = Recommendation...
	codeInjection.largeFan.recommendation.description = \
		To minimize the risk of Code Injection, script statements should be \
		created and executed as locally as possible. Make the code more secure \
		by reducing the number of possible paths into this script statement.\

################################################################################

codeInComments.name = Code in Comments
codeInComments.longName = \
	Remove commented-out code
codeInComments.description = \
	<b>Summary</b>\
	<br/>\
	Code that has been commented-out should be removed.\
	<p>\
	<b>Description</b>\
	<br/>\
	This rule searches for comments that appear to contain code and flags them. \
	Such code should either be removed or made conditional (for example, by \
	testing a logging level).\
	<p>\
	<b>Example</b>\
	<br/>\
	The following comment would be flagged:\
	<p><code>\
	\t//System.out.println("Entering method");\
	</code>

codeInComments.code.description = \
	Code found in comment
codeInComments.code.explanation = \
	A comment has been found that appears to contain code.

	codeInComments.code.recommendation.name = Recommendation...
	codeInComments.code.recommendation.description = \
		Remove the code, or, if it exists to support debugging, make it \
		conditional based on some debugging or logging flag.

################################################################################

commandExecution.name = Command Execution
commandExecution.longName = \
	Don't execute external commands
commandExecution.description = \
	<b>Summary</b>\
	<br/>\
	External commands should not be executed because not all platforms have \
	the same syntax for executing them.\
	<p>\
	<b>Description</b>\
	<br/>\
	The method Runtime.exec() should not be used to execute commands because \
	the format of command execution is platform dependent.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following invocation of the exec() method would be flagged as a \
	violation:\
	<p><code>\
	\tRuntime.exec("c:\\\\\\\\bin\\\\\\\\myApp.exe", new String[0]);\
	</code>

commandExecution.exec.description = \
	Do not use Runtime.exec() to execute commands
commandExecution.exec.explanation = \
	The method Runtime.exec() should not be used to execute commands because \
	the format of command execution is platform dependent.

	commandExecution.exec.recommendation.name = Recommendation...
	commandExecution.exec.recommendation.description = \
		Find a platform independent way of causing the same behavior.

################################################################################

commandInjection.name = Command Injection
commandInjection.longName = \
	Possible Command Injection vulnerabilities should be prevented
commandInjection.description = \
	<b>Summary</b>\
	<br/>\
	Commands being executed might be receiving data from the user or other \
	unsafe sources.\
	<p>\
	<b>Description</b>\
	<br/>\
	Command Injection occurs when the user is able to enter data directly into \
	a command to be executed by the system.\
	<p>\
	The difference between Code Injection and Command Injection is that \
	Code Injection attempts try to introduce scripts that are then included \
	as part of the application runtime, while Command Injection attacks \
	execute the user input source from outside of the application runtime.\
	<p>\
	To detect violations, this audit rule searches the code for command \
	executions such as <code>java.lang.Runtime.exec(..)</code> and \
	traces where the query data could have come from. In cases where the \
	source of the command is user input, such as data from a servlet request, \
	<code>javax.servlet.ServletRequest.getParameter(java.lang.String)</code>, \
	or from a SWT Text widget, <code>org.eclipse.swt.widgets.Text.getText()</code>, \
	a violation is created.\
	<p>\
	These two sets of methods, the locations where tainted user data can come \
	from and the methods used to execute methods, are editable by the user.\
	If methods are missing that are in a common package \
	(such as <code>java.lang.*</code>), please let CodePro support know.\
	<p>\
	<b>Security Implications</b>\
	<br/>\
	Successful Command Injection attacks \
	can potentially have malicious commands executed with permissions not guarded \
	against by the program.\
	<p>\
	<b>Example</b>\
	<br/>\
	The invocation of the method <code>executeQuery(..)</code> would be flagged \
	as a violation since it uses the first name information passed from a \
	servlet request:\
	<p><code>\
	\tText text = ...;<br>\
	\tString command = text.getText();<br>\
	\t...<br>\
	\tRuntime.getRuntime().exec(command);<br>\
	</code>

commandInjection.injection.description = \
	Command Injection
commandInjection.injection.explanation = \
	The data path below was found as a potential Command Injection scenario. The \
	top of the path shows where the potentially harmful user data can enter \
	system executions. The bottom location in the path shows where the user \
	data originates.\
	<p>\
	{0}

	commandInjection.injection.recommendation.name = Recommendation...
	commandInjection.injection.recommendation.description = \
		User data should never directly be put into system executable \
		commands, the path should be eliminated.

commandInjection.stackDepth.description = \
	Command Injection risk: path too long
commandInjection.stackDepth.explanation = \
	While tracing the sources of the execution statements, the data path below \
	was found. While it does not terminate at a point where user input could \
	enter the system, it is too long to not be considered a potential Command \
	Injection risk. The following path is too long to be secure:\
	<p>\
	{0}

	commandInjection.stackDepth.recommendation.name = Recommendation...
	commandInjection.stackDepth.recommendation.description = \
		To minimize the risk of Command Injection, executable commands should \
		be created and executed as locally as possible. Make the code more \
		secure by reducing the scope to this execution call.

commandInjection.largeFan.description = \
	Command Injection risk: too many sources
commandInjection.largeFan.explanation = \
	While tracing the sources of the execution statements, the data path below \
	was found. While it does not terminate at a point where user input could \
	enter the system, it has too many sources to not be considered a potential \
	Command Injection risk.\
	<p>\
	{0}\
	<p>\
	The locations after this data path where it branches off are as follows:\
	<p>\
	{1}

	commandInjection.largeFan.recommendation.name = Recommendation...
	commandInjection.largeFan.recommendation.description = \
		To minimize the risk of Command Injection, executable commands should \
		be created and executed as locally as possible. Make the code more \
		secure by reducing the number of possible paths into this execution \
		call.

################################################################################

commentLocalVariables.name = Comment Local Variables
commentLocalVariables.longName = \
	Local variables should be commented
commentLocalVariables.description = \
	<b>Summary</b>\
	<br/>\
	Local variables should be commented.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for local variable declarations that are not \
	followed by an end-of-line style comment. The comment is intended to \
	describe the purpose of the variable.\
	<p>\
	If there are multiple local variables declared on a single line, the \
	comment (if there is one) is assumed to belong to the first variable.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following local variable declaration would be flagged because it is \
	not commented:\
	<p><code>\
	\tint sum = 0;\
	</code>

# {0} = variable name
commentLocalVariables.uncommented.description = \
	Uncommented local variable: {0}
commentLocalVariables.uncommented.explanation = \
	The declaration of the local variable {0} does not have a comment.

	commentLocalVariables.uncommented.recommendation.name = Recommendation...
	commentLocalVariables.uncommented.recommendation.description = \
		Comment the local variable.

################################################################################

comparisonOfConstants.name = Comparison Of Constants
comparisonOfConstants.longName = \
	Constants should not be compared
comparisonOfConstants.description = \
	<b>Summary</b>\
	<br/>\
	Constants should not be directly compared.\
	<p>\
	<b>Description</b>\
	<br/>\
	Comparisons of two constant values waste processor cycles.\
	<p>\
	<b>Example</b>\
	<br/>\
	Given the following declarations:\
	<p><code>\
	\tstatic final int ZERO = 0;<br>\
	\tstatic final int ONE = 1;<br>\
	</code><p>\
	The following condition would be flagged:\
	<p><code>\
	\tif (ZERO != ONE) {\
	</code>

comparisonOfConstants.compared.description = \
	Comparison of constants
comparisonOfConstants.compared.explanation = \
	Two constant values are being compared.

	comparisonOfConstants.compared.recommendation.name = Recommendation...
	comparisonOfConstants.compared.recommendation.description = \
		Replace the comparison with the result.

################################################################################

comparisonOfShortAndChar.name = Comparison Of Short And Char
comparisonOfShortAndChar.longName = \
	Variables of type Short and Char should not be compared
comparisonOfShortAndChar.description = \
	<b>Summary</b>\
	<br/>\
	Values of type short and char should not be directly compared.\
	<p>\
	<b>Description</b>\
	<br/>\
	Comparisons between short and char values are performed by widening both to \
	the type int and then performing the comparison. However, because shorts \
	are signed and chars are unsigned, this can produce unintended results.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following would be flagged:\
	<p><code>\
	\tshort s;<br>\
	\tchar c;<br>\
	\tif (s == c) ...\
	</code>

comparisonOfShortAndChar.compared.description = \
	Short and char directly compared
comparisonOfShortAndChar.compared.explanation = \
	Short and char should never be directly compared.

	comparisonOfShortAndChar.compared.recommendation.name = Recommendation...
	comparisonOfShortAndChar.compared.recommendation.description = \
		Bitwise and the short value with 0xFFFF before comparison. 

################################################################################

concatenationInAppend.name = Concatenation In Appending Method
concatenationInAppend.longName = \
	Don't concatenate strings when appending to a buffer or stream
concatenationInAppend.description = \
	<b>Summary</b>\
	<br/>\
	The argument to methods that append to buffers and streams.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds places where the argument to a method that appends \
	to a buffer or stream is the result of a concatenation. In such cases, a \
	separate StringBuffer is being allocated to implement the concatenation, \
	resulting an unnecessary overhead. The items that are being concatenated \
	should be appended separately.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following invocation of the append method would be flagged as a \
	violation:\
	<p><code>\
	\tbuffer.append("Hello " + userName + "!");\
	</code>

# {0} method name

concatenationInAppend.concatenation.description = \
	Use of concatenation in {0} method
concatenationInAppend.concatenation.explanation = \
	The concatenation of values before passing them as arguments to the {0} \
	method is inefficient.

	concatenationInAppend.concatenation.replace.name = Replace with multiple calls
	concatenationInAppend.concatenation.replace.description = \
		Replace the single invocation with a sequence of invocations.

################################################################################

conditionalOperatorUse.name = Conditional Operator Use
conditionalOperatorUse.longName = \
	Don't use the conditional operator
conditionalOperatorUse.description = \
	<b>Summary</b>\
	<br/>\
	The conditional operator should not be used.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds places where the conditional operator (?:) has \
	been used.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following use of the conditional operator would be flagged as a \
	violation:\
	<p><code>\
	\tnetSales = customerGetsDiscount(grossSales) ? computeDiscount(grossSales) : grossSales;\
	</code>

conditionalOperatorUse.usage.description = \
	Use of conditional operator
conditionalOperatorUse.usage.explanation = \
	The conditional operator should not be used because it generally makes the \
	code harder to understand.

	conditionalOperatorUse.usage.recommendation.name = Recommendation...
	conditionalOperatorUse.usage.recommendation.description = \
		Avoid using the conditional operator as it makes the code hard to \
		understand.

################################################################################

configureLoggingInFile.name = Configure Logging In File
configureLoggingInFile.longName = \
	Logging should be configured in a file
configureLoggingInFile.description = \
	<b>Summary</b>\
	<br/>\
	Logging should be configured in a file.\
	<p>\
	<b>Description</b>\
	<br/>\
	This rule find places where a Configurator is used to programatically \
	configure a logger. Configuration of loggers should be done by including \
	configuration information in a configuration file in order to make it \
	easier to change.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following invocation would be flagged as a violation:\
	<p><code>\
	\tconfigurator.doConfigure(null, null);\
	</code>

configureLoggingInFile.apiUse.description = \
	Logging configured in code
configureLoggingInFile.apiUse.explanation = \
	Configuration information should be kept in a configuration file in order \
	to make it easier to change.

	configureLoggingInFile.apiUse.recommendation.name = Recommendation...
	configureLoggingInFile.apiUse.recommendation.description = \
		Move the configuration information being set with this invocation into \
		a configuration file.

################################################################################

consistentSuffixUsage.name = Consistent Suffix Usage
consistentSuffixUsage.longName = \
	Use "Exception" and "Error" for exception classes
consistentSuffixUsage.description = \
	<b>Summary</b>\
	<br/>\
	Type names should end with "Exception" if, and only if, they are derived \
	from java.lang.Exception. Similarly, type names should end with "Error" \
	if, and only if, they are derived from java.lang.Error.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds types whose name ends with "Exception" but are not \
	derived from java.lang.Exception, or classes that are derived from \
	java.lang.Exception but whose name does not end in "Exception".\
	<p>\
	<b>Example</b>\
	<br/>\
	The following class declaration would be flagged as a violation because \
	the class name ends with "Exception" but it not derived from the class \
	java.lang.Exception:\
	<p><code>\
	\tpublic class RequiredClassException<br>\
	\t{<br>\
	\t\t...<br>\
	\t}\
	</code><p>\
	The following class declaration would be flagged as a violation because \
	it is derived from the class java.lang.Exception but does not end with \
	"Exception":\
	<p><code>\
	\tpublic class InvalidAuthorizationCode extends Exception<br>\
	\t{<br>\
	\t\t...<br>\
	\t}\
	</code>

# {0} = suffix
# {1} = expected superclass name
# {2} = class name
consistentSuffixUsage.extra.description = \
	Type with name ending in "{0}" not derived from {1}: {2}
consistentSuffixUsage.extra.explanation = \
	The suffix "{0}" implies that the type was derived from {1}. Because the \
	type {2} was not derived from {1}, its name should not end in "{0}".

	# {0} = original name
	# {1} = suggested name
	consistentSuffixUsage.extra.rename.name = Rename class to "{1}"
	consistentSuffixUsage.extra.rename.description = \
		Rename the class from "{0}" to "{1}" to remove the suffix.

# {0} = suffix
# {1} = expected superclass name
# {2} = class name
consistentSuffixUsage.missing.description = \
	Name of class derived from {1} should end with "{0}": {2}
consistentSuffixUsage.missing.explanation = \
	The suffix "{0}" implies that the type was derived from {1}. Because the \
	type {2} was derived from {1}, its name should end in "{0}".

	# {0} = original name
	# {1} = suggested name
	consistentSuffixUsage.missing.rename.name = Rename class to "{1}"
	consistentSuffixUsage.missing.rename.description = \
		Rename the class from "{0}" to "{1}" to add the suffix.

################################################################################

constantConditionalExpression.name = Constant Conditional Expression
constantConditionalExpression.longName = \
	Constant Conditional Expression
constantConditionalExpression.description = \
	<b>Summary</b>\
	<br/>\
	Conditional expressions should usually not be constant valued.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for conditional expressions in if, do, for, and while \
	statements whose value is a compile-time constant. Because the value of such \
	conditions cannot change, either the conditional code will never execute or \
	will always execute (and in the case of a loop, the loop will never terminate).\
	<p>\
	<b>Example</b>\
	<br/>\
	The expression in the following code would be flagged as a violation:\
	<p><code>\
	\tif (false) {<br>\
 	\t\tthisWillNeverBeExecuted();<br>\
	\t}\
	</code>

constantConditionalExpression.used.description = \
	Constant conditional expression
constantConditionalExpression.used.explanation = \
	The conditional expression has a constant value, which therefore does not \
	need to be tested

	constantConditionalExpression.used.recommendation.name = Reevaluate Expression
	constantConditionalExpression.used.recommendation.description = \
		Reevaluate the Expression.\

################################################################################

constantNamingConvention.name = Constant Field Naming Convention
constantNamingConvention.longName = \
	Use the standard naming convention for constants
constantNamingConvention.description = \
	<b>Summary</b>\
	<br/>\
	Constant names should conform to the defined standard.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks the names of all static fields that are also \
	final.\
	<p>\
	<b>Example</b>\
	<br/>\
	If constant fields are specified as needing to consist only of upper-case \
	letters and the underscore, the following declaration would be flagged as \
	a violation:\
	<p><code>\
	\tpublic static final int DefaultCount = 0;\
	</code>

# {0} = field name
# {1} = failure reason
constantNamingConvention.invalidName.description = \
	Invalid constant name: "{0}" {1}
constantNamingConvention.invalidName.explanation = \
	The constant name "{0}" does not conform because it {1}.

	# {0} = original name
	# {1} = suggested name
	constantNamingConvention.invalidName.rename.name = Rename field to "{1}"
	constantNamingConvention.invalidName.rename.description = \
		Rename the field from "{0}" to "{1}".

################################################################################

constantsInComparison.name = Constants in Comparison
constantsInComparison.longName = \
	Always place constants on the same side in comparisons
constantsInComparison.description = \
	<b>Summary</b>\
	<br/>\
	Constants should appear on the same side in comparisons.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for comparisons involving exactly one constant value \
	and ensures that the constant appears on the side selected by the user. \
	This is primarily useful to ensure consistency for ease of comprehension. \
	There is some justification for specifying that constants should appear on \
	the left because then the compiler will catch cases where the assignment \
	operator was mistakenly used when a comparison operator was intended.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule has been configured so that constants are required to be on \
	the left hand side, the following comparison would be flagged as a \
	violation:\
	<p><code>\
	\tif (count &gt; 0) {<br>\
	\t\t...<br>\
	\t}\
	</code>

constantsInComparison.onLeft.description = \
	Constant on left side of comparison
constantsInComparison.onLeft.explanation = \
	Constants should appear on the right side of comparison operands.

	constantsInComparison.onLeft.reverse.name = Reverse the order
	constantsInComparison.onLeft.reverse.description = \
		Reverse the order of the operands.

constantsInComparison.onRight.description = \
	Constant on right side of comparison
constantsInComparison.onRight.explanation = \
	Constants should appear on the left side of comparison operands.

	constantsInComparison.onRight.reverse.name = Reverse the order
	constantsInComparison.onRight.reverse.description = \
		Reverse the order of the operands.

################################################################################

constructorsOnlyInvokeFinalMethods.name = Constructors Only Invoke Final Methods
constructorsOnlyInvokeFinalMethods.longName = \
	Don't invoke non-final instance methods in constructors
constructorsOnlyInvokeFinalMethods.description = \
	<b>Summary</b>\
	<br/>\
	Constructors should only invoke final methods on the object being \
	constructed.\
	<p>\
	<b>Description</b>\
	<br/>\
	Subclasses can override non-final methods. Invoking them from a \
	constructor can cause errors because the object is not in a valid state.\
	<p>\
	<b>Example</b>\
	<br/>\
	The constructor in the following class would be flagged as a violation:\
	<p><code>\
	\tpublic class Point<br>\
	\t{<br>\
	\t\t...<br>\
	\t\tpublic Point()<br>\
	\t\t{<br>\
	\t\t\tx = initialX();<br>\
	\t\t\ty = initialY();<br>\
	\t\t}<br>\
	\t\tprotected int initialX()<br>\
	\t\t{<br>\
	\t\t\treturn 0;<br>\
	\t\t}<br>\
	\t\t...<br>\
	\t}<br>\
	</code>

constructorsOnlyInvokeFinalMethods.nonFinalInvocation.description = \
	The constructor invokes a non-final method
constructorsOnlyInvokeFinalMethods.nonFinalInvocation.explanation = \
	Constructors should only invoke final methods.

	constructorsOnlyInvokeFinalMethods.nonFinalInvocation.recommendation.name = Recommendation...
	constructorsOnlyInvokeFinalMethods.nonFinalInvocation.recommendation.description = \
		Rewrite the constructor so it does not invoke any non-final methods on \
		the object being constructed.

################################################################################

continueWithLabel.name = Continue with Label
continueWithLabel.longName = \
	Don't use a label with the continue statement
continueWithLabel.description = \
	<b>Summary</b>\
	<br/>\
	Continue statements should not reference a labeled statement.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds continue statements that reference a labeled \
	statement. The use of a label with a continue statement makes the code \
	much harder to read and maintain, and should therefore be avoided.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following continue statement would be flagged as a violation:\
	<p><code>\
	\touter: for (int i = 0; i &lt; array.length; i++) {<br>\
	\t\tfor (int j = 0; j &lt; array[i].length; j++) {<br>\
	\t\t\tif (array[i][j] == 0) {<br>\
	\t\t\t\tcontinue outer;<br>\
	\t\t\t}<br>\
	\t\t\t...<br>\
	\t\t}<br>\
	\t}\
	</code>

# {0} = label
continueWithLabel.label.description = \
	Continue statement with label: {0}
continueWithLabel.label.explanation = \
	The continue statement should not reference a label.

	continueWithLabel.label.recommendation.name = Recommendation...
	continueWithLabel.label.recommendation.description = \
		Avoid using a label with a continue statement.

################################################################################

convertClassToInterface.name = Convert Class to Interface
convertClassToInterface.longName = \
	Declare interfaces rather than classes when possible
convertClassToInterface.description = \
	<b>Summary</b>\
	<br/>\
	Some classes could be converted to interfaces.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds classes containing no methods or only abstract \
	methods, and no fields or only static final fields. Classes such as these \
	could be converted to an equivalent interface providing increased \
	implementation flexibility.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following class declaration would be flagged as a violation:\
	<p><code>\
	\tpublic abstract class RunnableWithException<br>\
	\t{<br>\
	\t\tpublic abstract void run()<br>\
	\t\t\tthrows Exception;<br>\
	\t}\
	</code>

# {0} = class name
convertClassToInterface.violation.description = \
	Convert class to interface: {0}
convertClassToInterface.violation.explanation = \
	The class {0} could be converted to an equivalent interface \
	providing increased design flexibility.

	# {0} = class name
	convertClassToInterface.violation.recommendation.name = Recommendation...
	convertClassToInterface.violation.recommendation.description = \
		Convert the {0} class to an interface.

################################################################################

crossSiteScripting.name = Cross-Site Scripting
crossSiteScripting.longName = \
	Possible Cross-Site Scripting vulnerabilities should be prevented
crossSiteScripting.description = \
	<b>Summary</b>\
	<br/>\
	User input might be getting printed directly out to a web site.\
	<p>\
	<b>Description</b>\
	<br/>\
	Cross-Site Scripting occurs when the user is able to enter data directly \
	onto a web site they are visiting.\
	<p>\
	To detect violations, this audit rule searches the code for printing \
	statements such as <code>HTTPServletResponse.getWriter().print(..)</code> \
	and traces where the output data could have come from. In cases where the \
	source of the write statement is user input, such as data from a servlet request, \
	<code>javax.servlet.ServletRequest.getParameter(java.lang.String)</code>, \
	or from a SWT Text widget, <code>org.eclipse.swt.widgets.Text.getText()</code>, \
	a violation is created.\
	<p>\
	These two sets of methods, the locations where tainted user data can come \
	from and the methods used to potentially print to a web site, are editable \
	by the user. If methods are missing that are in a common package \
	(such as <code>java.lang.*</code>), please let CodePro support know.\
	<p>\
	<b>Security Implications</b>\
	<br/>\
	If a malicious user has access to enter a piece of JavaScript, the next \
	user to load the web page could potentially have their cookies or other \
	resources compromised.\
	<p>\
	<b>Example</b>\
	<br/>\
	The invocation of the method <code>print(..)</code> would be flagged \
	as a violation since it prints the first name information passed from a \
	servlet request:\
	<p><code>\
	\tServletRequest servletRequest = ...;<br>\
	\tHttpServletResponse httpServletResponse = ...;<br>\
	\t<br>\
	\tString firstName = servletRequest.getParameter("firstName");<br>\
	\t<br>\
	\thttpServletResponse.getWriter().print(firstName);\
	</code>

crossSiteScripting.injection.description = \
	Cross-Site Scripting
crossSiteScripting.injection.explanation = \
	The data path below was found as a potential Cross-Site Scripting scenario. \
	The top of the path shows where the potentially harmful user data could be \
	printed onto a web site. The bottom location in the path shows where the user \
	data originates.\
	<p>\
	{0}

	crossSiteScripting.injection.recommendation.name = Recommendation...
	crossSiteScripting.injection.recommendation.description = \
		User data should never directly be put onto a web site, the \
		path should be eliminated.

crossSiteScripting.stackDepth.description = \
	Cross-Site Scripting risk: path too long
crossSiteScripting.stackDepth.explanation = \
	While tracing the sources of potential writes to web sites, the data path \
	below was found. While it does not terminate at a point where user input \
	could be printed, it is too long to not be considered a potential \
	Cross-Site Scripting risk. The following path is too long to be secure:\
	<p>\
	{0}

	crossSiteScripting.stackDepth.recommendation.name = Recommendation...
	crossSiteScripting.stackDepth.recommendation.description = \
		To minimize the risk of Cross-Site Scripting, printing should be \
		executed as locally as possible. Make the code more secure by \
		reducing the scope to this write statement.

crossSiteScripting.largeFan.description = \
	Cross-Site Scripting risk: too many sources
crossSiteScripting.largeFan.explanation = \
	While tracing the sources of potential writes to web sites, the data path \
	below was found. While it does not terminate at a point where user input \
	could be printed, it has too many sources to not be considered a potential \
	Cross-Site Scripting risk.\
	<p>\
	{0}\
	<p>\
	The locations after this data path where it branches off are as follows:\
	<p>\
	{1}

	crossSiteScripting.largeFan.recommendation.name = Recommendation...
	crossSiteScripting.largeFan.recommendation.description = \
		To minimize the risk of Cross-Site Scripting, printing should be \
		executed as locally as possible. Make the code more secure by reducing \
		the number of possible paths into this write statement.\

################################################################################

cyclomaticComplexity.name = Cyclomatic Complexity
cyclomaticComplexity.longName = \
	Minimize the complexity of methods
cyclomaticComplexity.description = \
	<b>Summary</b>\
	<br/>\
	Methods should be kept fairly simple.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds methods, constructors and initializers that are too \
	complex. The complexity is measured by the number of "if", "while", "do", \
	"for", "?:", "catch" and "switch" statements (plus one) in the body of the \
	member.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the maximum cyclomatic complexity has been configured to be 3, then \
	the following method would be flagged as a violation because it has a \
	cyclomatic complexity of 4:\
	<p><code>\
	\tpublic int getHireYear()<br>\
	\t{<br>\
	\t\tEmploymentRecord employmentRecord = getEmploymentRecord();<br>\
	\t\tif (employmentRecord == null) return 0;<br>\
	\t\tHiringRecord hiringRecord = employmentRecord.getHiringRecord();<br>\
	\t\tif (hiringRecord == null) return 0;<br>\
	\t\tCalendar hireDate = hiringRecord.getHireDate();<br>\
	\t\tif (hireDate == null) return 0;<br>\
	\t\treturn hireDate.getYear();<br>\
	\t}\
	</code>

# {0} = complexity
cyclomaticComplexity.complexConstructor.description = \
	Constructor is too complex (cyclomatic complexity = {0})
cyclomaticComplexity.complexConstructor.explanation = \
	The constructor contains too many statements that cause branching, making \
	the code difficult to understand. Try extracting some of the code into a \
	separate method.

	cyclomaticComplexity.complexConstructor.recommendation.name = Recommendation...
	cyclomaticComplexity.complexConstructor.recommendation.description = \
		Reduce the complexity of the constructor by extracting some of the \
		code into a separate method.

# {0} = complexity
cyclomaticComplexity.complexField.description = \
	Field initialization is too complex (cyclomatic complexity = {0})
cyclomaticComplexity.complexField.explanation = \
	The field initializer contains too many statements that cause branching, \
	making the code difficult to understand. Try extracting some of the code \
	into a separate method.

	cyclomaticComplexity.complexField.recommendation.name = Recommendation...
	cyclomaticComplexity.complexField.recommendation.description = \
		Reduce the complexity of the initializer by extracting some of the \
		code into a separate method.

# {0} = complexity
cyclomaticComplexity.complexInitializer.description = \
	Initializer is too complex (cyclomatic complexity = {0})
cyclomaticComplexity.complexInitializer.explanation = \
	The initializer contains too many statements that cause branching, making \
	the code difficult to understand. Try extracting some of the code into a \
	separate method.

	cyclomaticComplexity.complexInitializer.recommendation.name = Recommendation...
	cyclomaticComplexity.complexInitializer.recommendation.description = \
		Reduce the complexity of the initializer by extracting some of the \
		code into a separate method.

# {0} = complexity
cyclomaticComplexity.complexMethod.description = \
	Method is too complex (cyclomatic complexity = {0})
cyclomaticComplexity.complexMethod.explanation = \
	The method contains too many statements that cause branching, making \
	the code difficult to understand. Try extracting some of the code into a \
	separate method.

	cyclomaticComplexity.complexMethod.recommendation.name = Recommendation...
	cyclomaticComplexity.complexMethod.recommendation.description = \
		Reduce the complexity of the method by extracting some of the code \
		into a separate method.

################################################################################

danglingElse.name = Dangling Else
danglingElse.longName = \
	Use blocks to prevent dangling else clauses
danglingElse.description = \
	<b>Summary</b>\
	<br/>\
	Use blocks to prevent dangling else clauses.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds places in the code where else clauses are not \
	preceded by a block because these can lead to dangling else errors.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tif (a &gt; 0)<br>\
	\t\tif (a &gt; 100)<br>\
	\t\t\tb = a - 100;<br>\
	\telse<br>\
	\t\tb = -a;\
	</code>

danglingElse.dangling.description = \
	Dangling else clause
danglingElse.dangling.explanation = \
	The else clause is not preceded by a block, making it possible for it to \
	be mistakenly associated with the wrong if statement.

	danglingElse.dangling.recommendation.name = Recommendation...
	danglingElse.dangling.recommendation.description = \
		Enclose the then clause in a block.

################################################################################

dateAndTimeUsage.name = Date and Time Usage
dateAndTimeUsage.longName = \
	Don't use deprecated Date and Time methods
dateAndTimeUsage.description = \
	<b>Summary</b>\
	<br/>\
	Don't use deprecated Date and Time methods.\
	<p>\
	<b>Description</b>\
	<br/>\
	Deprecated methods from the Date and Time classes should not be used. \
	As of JDK 1.1, the Calendar class should be used to convert \
	between dates and time fields, and the DateFormat class should \
	be used to format and parse date strings.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following use of the parseInteger() method would be flagged as a \
	violation:\
	<p><code>\
	\tDate myDate = Date(2005, 10, 12);<br>\
	\tint year = myDate.getYear();\
	</code>

# {0} = method name
dateAndTimeUsage.date.description = \
	Deprecated Date.{0}() method used
dateAndTimeUsage.date.explanation = \
	The deprecated Date.{0}() method should not be used. \
	As of JDK 1.1, the Calendar class should be used to convert \
	between dates and time fields, and the DateFormat class should \
	be used to format and parse date strings.

	dateAndTimeUsage.date.recommendation.name = Recommendation...
	dateAndTimeUsage.date.recommendation.description = \
		Use Calendar and DateFormat methods instead.

# {0} = method name
dateAndTimeUsage.time.description = \
	Deprecated Time.{0}() method used
dateAndTimeUsage.time.explanation = \
	The deprecated Time.{0}() method should not be used. \
	As of JDK 1.1, the Calendar class should be used to convert \
	between dates and time fields, and the DateFormat class should \
	be used to format and parse date strings.

	dateAndTimeUsage.time.recommendation.name = Recommendation...
	dateAndTimeUsage.time.recommendation.description = \
		Use Calendar and DateFormat methods instead.

################################################################################

debuggingCode.name = Debugging Code
debuggingCode.longName = \
	Remove debugging and profiling code
debuggingCode.description = \
	<b>Summary</b>\
	<br/>\
	Debugging and profiling code should not be left in production code.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds places in the code where text is being written to \
	either System.out or System.err, or where the methods \
	Throwable.printStackTrace(), \
	Thread.dumpStack(), \
	Runtime.freeMemory(), \
	Runtime.totalMemory(), \
	Runtime.traceMethodCalls() or \
	Runtime.traceInstructions() are being invoked.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\ttry {<br>\
	\t\t...<br>\
	\t} catch (Exception exception) {<br>\
	\t\tSystem.err.println("Unexpected exception:");<br>\
	\t\texception.printStackTrace();<br>\
	\t}\
	</code>

# {0} = class name + "." + method name
debuggingCode.invalidReference.description = \
	Avoid calling {0} in production code
debuggingCode.invalidReference.explanation = \
	Most code does not reference {0} except as an aid to debugging or \
	profiling the code. You should consider whether this should really be \
	part of the shipping product or whether it should be removed.

	debuggingCode.invalidReference.delete.name = Delete debugging code
	debuggingCode.invalidReference.delete.description = \
		Delete the debugging / profiling code.

################################################################################

declareAsInterface.name = Declare As Interface
declareAsInterface.longName = \
	Use an interface to declare variables when possible
declareAsInterface.description = \
	<b>Summary</b>\
	<br/>\
	Variables of certain types should be declared using an interface.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds declarations of fields, local variables, and methods \
	whose type should have been declared to be an interface but was declared \
	to be a class that implements the interface instead. The list of \
	interfaces that are checked can be configured.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the type java.util.List is on the list of interfaces, the following \
	would be flagged as a violation because the declared type of the field \
	should have been "List":\
	<p><code>\
	\tprivate ArrayList myList;\
	</code>

# {0} = interface name
declareAsInterface.variable.description = \
	Variable should be declared as {0}
declareAsInterface.variable.explanation = \
	Classes that implement the {0} interface should not be used to declare \
	variables; the interface {0} should be used instead.

	declareAsInterface.variable.changeDeclaration.name = Change declared type
	declareAsInterface.variable.changeDeclaration.description = \
		Change the declared type to be the appropriate interface.

# {0} = interface name
declareAsInterface.method.description = \
	Method should be declared as {0}
declareAsInterface.method.explanation = \
	Classes that implement the {0} interface should not be used as the return \
	type for methods; the interface {0} should be used instead.

	declareAsInterface.method.changeDeclaration.name = Change declared type
	declareAsInterface.method.changeDeclaration.description = \
		Change the declared type to be the appropriate interface.

################################################################################

declareDefaultConstructors.name = Declare Default Constructors
declareDefaultConstructors.longName = \
	Always declare a default constructor
declareDefaultConstructors.description = \
	<b>Summary</b>\
	<br/>\
	Types should declare a default constructor.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds class declarations that do not contain the \
	declaration of a default (zero argument) constructor.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following class declaration would be flagged as a violation because \
	it does not implement a default constructor:\
	<p><code>\
	\tpublic class Employee<br>\
	\t{<br>\
	\t\tpublic Employee(String name)<br>\
	\t\t{<br>\
	\t\t\t...<br>\
	\t\t}<br>\
	\t}\
	</code>

declareDefaultConstructors.missing.description = \
	Missing default constructor
declareDefaultConstructors.missing.explanation = \
	Classes should implement a default constructor.

	declareDefaultConstructors.missing.recommendation.name = Recommendation...
	declareDefaultConstructors.missing.recommendation.description = \
		Declare a default constructor for the class.

################################################################################

declaredExceptions.name = Declared Exceptions
declaredExceptions.longName = \
	Only declare accepted exceptions
declaredExceptions.description = \
	<b>Summary</b>\
	<br/>\
	Some exceptions should not be declared for methods or constructors.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds methods and constructors that declare as a thrown \
	exception an exception class that is disallowed. The list initially \
	includes exception classes that are either too general (such as Throwable \
	or Exception), or that are unchecked (Error, RuntimeException, and all \
	subclasses of either).\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule is configured to disallow the declaration of unchecked \
	exceptions, then the following method would be flagged as a violation:\
	<p><code>\
	\tpublic void initialize()<br>\
	\t\tthrows Error<br>\
	\t{<br>\
	\t\t...<br>\
	\t}\
	</code>

# {0} = exception class name
declaredExceptions.disallowed.description = \
	Disallowed exception declared: {0}
declaredExceptions.disallowed.explanation = \
	The exception {0} should not be declared.

	declaredExceptions.disallowed.recommendation.name = Recommendation...
	declaredExceptions.disallowed.recommendation.description = \
		Consider declaring a more specific exception.

################################################################################

defaultNotLastInSwitch.name = Default Not Last in Switch
defaultNotLastInSwitch.longName = \
	Make the default case be the last case in a switch statement
defaultNotLastInSwitch.description = \
	<b>Summary</b>\
	<br/>\
	The default case should be the last case in a switch statement.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds switch statements in which the default case is not \
	the last case. Making the default case always be last improves the \
	readability of the code by making it easier to locate the default \
	behavior.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following case statement would be flagged as a violation because \
	the default case is not the last case:\
	<p><code>\
	\tswitch (registrationType) {<br>\
	\tcase 0: \\\\ audit<br>\
	\t\t...<br>\
	\tdefault:<br>\
	\tcase 1: \\\\ for credit<br>\
	\t\t...<br>\
	\tcase 2: \\\\ pass/fail<br>\
	\t\t...<br>\
	\t}\
	</code>

defaultNotLastInSwitch.notLast.description = \
	Default is not the last case in a switch statement
defaultNotLastInSwitch.notLast.explanation = \
	The default case should be the last case in a switch statement. Consider \
	moving it to the end of the statement.

	defaultNotLastInSwitch.notLast.recommendation.name = Recommendation...
	defaultNotLastInSwitch.notLast.recommendation.description = \
		Move the default case to the end of the statement.

################################################################################

defineConstantsInInterfaces.name = Define Constants in Interfaces
defineConstantsInInterfaces.longName = \
	Constants should be defined in an interface
defineConstantsInInterfaces.description = \
	<b>Summary</b>\
	<br/>\
	Constants should be defined in an interface.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for constants (public static final fields) that \
	are declared in a class. Such fields should be declared in an interface \
	so that they are easier to share and can be referenced without \
	introducing extra coupling.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following field declaration would be flagged if it occurred outside \
	of an interface:\
	<p><code>\
	\tpublic static final int DAYS_IN_WEEK = 7;\
	</code>

defineConstantsInInterfaces.definedInClass.description = \
	Constant defined in class
defineConstantsInInterfaces.definedInClass.explanation = \
	A constant is being defined in a class when it should be defined in an \
	interface.

	defineConstantsInInterfaces.definedInClass.recommendation.name = Recommendation...
	defineConstantsInInterfaces.definedInClass.recommendation.description = \
		The constant declaration should be moved to an interface.

################################################################################

defineInitialCapacity.name = Define Initial Capacity
defineInitialCapacity.longName = \
	Define an initial capacity for collections
defineInitialCapacity.description = \
	<b>Summary</b>\
	<br/>\
	Define an initial capacity for ArrayList, HashMap, HashSet, Hashtable, \
	StringBuffer, StringBuilder, WeakHashMap, or  Vector instances.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule requires an initial capacity to be specified when creating \
	instances of ArrayList, HashMap, HashSet, Hashtable, StringBuffer, \
	StringBuilder, WeakHashMap, or  Vector. Array capacity expansion involves \
	allocating a larger array and copying the contents of the old array to a \
	new one. The old array object eventually gets reclaimed by the garbage \
	collector. Array expansion is an expensive operation which should be \
	avoided where possible. If you are able to approximate the expected size, \
	you should use this value instead of the default.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following instance creation would be flagged as a violation because \
	the expected size of the collection is not specified:\
	<p><code>\
	\tnew ArrayList();\
	</code>

# {0} = class name
defineInitialCapacity.defineCapacity.description = \
	Define the initial capacity of {0} instances
defineInitialCapacity.defineCapacity.explanation = \
	The initial capacity of {0} instances should be pre-defined when possible \
	in order to avoid the expensive expansion of array capacity.

	defineInitialCapacity.defineCapacity.replace.name = Define initial capacity
	defineInitialCapacity.defineCapacity.replace.description = \
		Pre-define the initial capacity to avoid expensive array expansion.

# {0} = class name
defineInitialCapacity.stringBufferCapacity.description = \
	Define the initial capacity of {0} instances
defineInitialCapacity.stringBufferCapacity.explanation = \
	The initial capacity of {0} instances should be pre-defined when possible \
	in order to avoid the expensive expansion of character array capacity.

	defineInitialCapacity.stringBufferCapacity.replace.name = Define initial character capacity
	defineInitialCapacity.stringBufferCapacity.replace.description = \
		Pre-define the initial capacity to avoid expensive character array \
		expansion.

################################################################################

defineLoadFactor.name = Define Load Factor
defineLoadFactor.longName = \
	Define the load factor for hashed collections
defineLoadFactor.description = \
	<b>Summary</b>\
	<br/>\
	Define the load factor when creating instances of the classes 'HashMap', \
	'HashSet', 'Hashtable', and 'WeakHashMap'.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule requires a load factor to be specified when creating \
	instances of the classes 'HashMap', 'HashSet', 'Hashtable', and \
	'WeakHashMap'. The load factor impacts both the size of the collection and \
	how long it will take to perform a look-up.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following instance creation would be flagged as a violation because \
	the load factor is not specified:\
	<p><code>\
	\tnew HashMap(42);\
	</code>

# {0} = class name
defineLoadFactor.notDefined.description = \
	Define the load factor of {0} instances
defineLoadFactor.notDefined.explanation = \
	The load factor of {0} instances should be explicitly defined in order to \
	tune the performance of the collection.

	defineLoadFactor.notDefined.replace.name = Define the load factor
	defineLoadFactor.notDefined.replace.description = \
		Pass the load factor as an argument to the constructor.

################################################################################

dereferencingNullPointer.name = Dereferencing Null Pointer
dereferencingNullPointer.longName = \
	Don't dereference variables whose value is known to be null
dereferencingNullPointer.description = \
	<b>Summary</b>\
	<br/>\
	A null value is dereferenced as if it had an object value.\
	<p>\
	<b>Description</b>\
	<br/>\
	Method invocation and field access on null values will cause errors. In \
	expressions following explicit comparisons to null, such as (x == null \
	&amp;&amp; x.getValue()), dereferencing the null pointer will cause an \
	error. These usually indicate typographical errors such as substituting \
	&amp;&amp; for || in the boolean expression.\
	<p>\
	<b>Example</b>\
	<br/>\
	The method invocation in the following condition would be flagged as a \
	violation:\
	<p><code>\
	\tif (object == null &amp;&amp; object.getData() == null) ...\
	</code>

dereferencingNullPointer.derefNull.description = \
	A null value is treated as if it were an object value
dereferencingNullPointer.derefNull.explanation = \
	Following an explicit comparison to null, the variable is accessed as if \
	it had an object value.

	# {0} = original source
	# {1} = replacement source
	dereferencingNullPointer.derefNull.resolution.name = Change the boolean operator
	dereferencingNullPointer.derefNull.resolution.description = \
		Change the boolean operator from "{0}" to "{1}".

dereferencingNullPointer.shortCircuit.description = \
	Short-circuit boolean operator should be used to avoid dereferencing null \
	pointer
dereferencingNullPointer.shortCircuit.explanation = \
	Following an explicit comparison to null, the variable is accessed as if \
	it had an object value.

	# {0} = original source
	# {1} = replacement source
	dereferencingNullPointer.shortCircuit.resolution.name = Use "short-circuit" operator
	dereferencingNullPointer.shortCircuit.resolution.description = \
		Change the boolean operator from "{0}" to "{1}".

################################################################################

deserializeabilitySecurity.name = Deserializeability Security
deserializeabilitySecurity.longName = \
	Ensure classes are non-deserializeable
deserializeabilitySecurity.description = \
	<b>Summary</b>\
	<br/>\
	Prevent non-deserializeable classes from being deserialized by adversaries.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule enforces classes to implement a readObject method:\
	<p><code>\
	\tprivate final void readObject(ObjectInputStream in) throws IOException, \
	ClassNotFoundException {<br>\
	\t\tthrow new IOException("Non-deserializable class");<br>\
	\t}\
	</code><p>\
	This audit will be violated if there does not exist a method with the \
	signature: \
	<p><code>\
	\tprivate void readObject(ObjectInputStream in) throws IOException, \
	ClassNotFoundException;\
	</code>\
	<p>\
	<b>Security Implications</b>\
	<br/>\
	Even when a class is not serializeable, adversaries can sometimes instantiate \
	an instance of a class with a byte array. This can be a security hazard \
	since there is no control on the state of the new object.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following method declaration would be flagged as a violation because it \
	does not have the required parameter:\
	<p><code>\
	\tprivate void readObject() throws IOException, ClassNotFoundException;\
	</code>

deserializeabilitySecurity.noReadObject.description = \
	readObject method missing
deserializeabilitySecurity.noReadObject.explanation = \
	The class "{0}" does not define a readObject method as defined in \
	java.io.Serializable and thus is a hazard since adversaries can sometimes \
	initiate an instance of a class with a byte array.
	
	deserializeabilitySecurity.noReadObject.recommendation.name = \
		Include readObject method
	deserializeabilitySecurity.noReadObject.recommendation.recommendation = \
		Implement a readObject method that matches signature in java.io.Serializable.

deserializeabilitySecurity.wrongInput.description = \
	readObject has incorrect input
deserializeabilitySecurity.wrongInput.explanation = \
	The method readObject, in {1}, currently has the set of parameters {0} instead of \
	(ObjectInputStream in)

	deserializeabilitySecurity.wrongInput.replace.name = \
		Replace input
	deserializeabilitySecurity.wrongInput.replace.recommendation = \
		Replace the current readObject input with input to match the signature in \
		java.io.Serializable: ...readObject(ObjectInputStream in)...

deserializeabilitySecurity.notPrivate.description = \
	readObject is not private
deserializeabilitySecurity.notPrivate.explanation = \
	The method readObject, in {1}, currently has the modifier {0} instead of \
	private

	deserializeabilitySecurity.notPrivate.replace.name = \
		Replace non-private modifier with private
	deserializeabilitySecurity.notPrivate.replace.recommendation = \
		Replace the current readObject non-private modifier with "private" to match \
		the signature in java.io.Serializable: ...private void readObject...

deserializeabilitySecurity.wrongReturn.description = \
	readObject has incorrect return type
deserializeabilitySecurity.wrongReturn.explanation = \
	The method readObject, in {1}, currently has the return type {0} instead of \
	void

	deserializeabilitySecurity.wrongReturn.replace.name = \
		Replace return type with void
	deserializeabilitySecurity.wrongReturn.replace.recommendation = \
		Replace the current readObject return type "{0}" with "void" to match the signature \
		in java.io.Serializable: ...private void readObject...

deserializeabilitySecurity.wrongExceptions.description = \
	readObject has incorrect exceptions
deserializeabilitySecurity.wrongExceptions.explanation = \
	The method readObject, in {1}, currently has the exception(s) {0} instead of \
	the IOException and ClassNotFoundException exception

	deserializeabilitySecurity.wrongExceptions.replace.name = \
		Correct exception set
	deserializeabilitySecurity.wrongExceptions.replace.recommendation = \
		Replace the current readObject exception set with \
		"throws IOException, ClassNotFoundException" to match the signature \
		in java.io.Serializable: ...readObject(ObjectInputStream in) \
		throws IOException, ClassNotFoundException;

################################################################################

detectMultipleIterations.name = Detect Multiple Iterations
detectMultipleIterations.longName = Detect multiple iterations over a single collection
detectMultipleIterations.description = \
	<b>Summary</b>\
	<br/>\
	Detect multiple iterations over a single collection.\
	<p>\
	<b>Description</b>\
	<br/>\
	A single method that contains multiple loops that iterate over the contents \
	of a single collection may be improved by rewriting it. If it is possible \
	to use a single loop then the loop maintenance overhead can be eliminated.\
	<p>\
	<b>Example</b>\
	<br/>\
	The second for loop would be flagged as a violation:\
	<p><code>\
	\tfor (int i = 0; i < array.length; i++) {<br>\
	\t\t...<br>\
	\t}<br>\
	\t...<br>\
	\tfor (int i = 0; i < array.length; i++) {<br>\
	\t\t...<br>\
	\t}<br>\
	</code>

detectMultipleIterations.multipleIterations.description = \
	Multiple iterations detected
detectMultipleIterations.multipleIterations.explanation = \
	A single collection is iterated in multiple loops.

	detectMultipleIterations.multipleIterations.recommendation.name = Recommendation...
	detectMultipleIterations.multipleIterations.recommendation.description = \
		Consider rewriting the loops to perform one iteration, if possible.

################################################################################

disallowArrayInitializers.name = Disallow Array Initializers
disallowArrayInitializers.longName = \
	Arrays should not be statically initialized
disallowArrayInitializers.description = \
	<b>Summary</b>\
	<br/>\
	Arrays should not be statically initialized by an array initializer.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for array variables that are initialized (either in \
	the initializer or in an assignment statement) using an array initializer.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following array declaration would be flagged because of the use of \
	an array initializer:\
	<p><code>\
	\tint[] values = {0, 1, 2};\
	</code>

disallowArrayInitializers.used.description = \
	Statically initialized array
disallowArrayInitializers.used.explanation = \
	An array initializer is being used to initialize an array.

	disallowArrayInitializers.used.recommendation.name = Recommendation...
	disallowArrayInitializers.used.recommendation.description = \
		The array should be initialized dynamically.

################################################################################

disallowASTToString.name = Disallow AST toString()
disallowASTToString.longName = \
	The method toString() should never be invoked for AST nodes
disallowASTToString.description = \
	<b>Summary</b>\
	<br/>\
	The method toString() should never be invoked for AST nodes.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for invocations of the method toString() on AST nodes. \
	The toString() method produces a string that should only be used for \
	debugging purposes, so it is almost never the right method to use.\
	<p>\
	<b>Example</b>\
	<br/>\
	Given the following declaration:\
	<p><code>\
	\tSimpleName name;\
	</code><p>\
	The following invocation would be flagged:\
	<p><code>\
	\tname.toString()\
	</code>

disallowASTToString.reference.description = \
	toString() invoked on AST node
disallowASTToString.reference.explanation = \
	The method toString() is being invoked on an AST node. 

	disallowASTToString.reference.recommendation.name = Recommendation...
	disallowASTToString.reference.recommendation.description = \
		Replace with an appropriate method.

################################################################################

disallowDefaultPackage.name = Disallow Default Package
disallowDefaultPackage.longName = \
	Code should not be defined in the default package
disallowDefaultPackage.description = \
	<b>Summary</b>\
	<br/>\
	Code should not be defined in the default package.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for compilation units that are declared in the \
	default package. All code should be structured into packages.

disallowDefaultPackage.default.description = \
	Default package found
disallowDefaultPackage.default.explanation = \
	A compilation unit was found in the default package. 

	disallowDefaultPackage.default.recommendation.name = Recommendation...
	disallowDefaultPackage.default.recommendation.description = \
		The class or interface should be given a package name.

################################################################################

disallowAWTPeerUsage.name = Disallow Use of AWT Peer Classes
disallowAWTPeerUsage.longName = \
	Don't reference AWT peer classes
disallowAWTPeerUsage.description = \
	<b>Summary</b>\
	<br/>\
	AWT peer classes should not be referenced because they are platform \
	dependent.\
	<p>\
	<b>Description</b>\
	<br/>\
	The AWT peer classes provide a platform-specific implementation of the AWT \
	widgets. Referencing any of these classes directly will result in platform \
	dependent code.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following reference to the class sun.awt.windows.WButtonPeer would be \
	flagged as a violation because it is specific to the Windows platform:\
	<p><code>\
	\tif (peer instanceof sun.awt.windows.WButtonPeer)\
	</code>

disallowAWTPeerUsage.usage.description = \
	Reference to AWT peer class
disallowAWTPeerUsage.usage.explanation = \
	AWT peer classes should not be referenced because they are platform \
	dependent.

	disallowAWTPeerUsage.usage.recommendation.name = Recommendation...
	disallowAWTPeerUsage.usage.recommendation.description = \
		Use the platform independent AWT and Swing classes instead.

################################################################################

disallowDeprecatedMethodUsage.name = Disallow Use of Deprecated Thread Methods
disallowDeprecatedMethodUsage.longName = \
	Don't use deprecated methods when writing multi-threaded code
disallowDeprecatedMethodUsage.description = \
	<b>Summary</b>\
	<br/>\
	Don't use deprecated methods when writing multi-threaded code.\
	<p>\
	<b>Description</b>\
	<br/>\
	The methods Thread.resume(), Thread.stop(), Thread.suspend(), \
	Thread.destroy() and Runtime.runFinalizersOnExit() have been deprecated \
	and should not be used because they are inherently unsafe.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following use of the suspend() method would be flagged as a \
	violation:\
	<p><code>\
	\tprocessingThread.suspend();\
	</code>

# {0} = class name + "." + method name
disallowDeprecatedMethodUsage.usage.description = \
	Use of the deprecated {0}() method
disallowDeprecatedMethodUsage.usage.explanation = \
	The deprecated method {0}() should not be used because it is unsafe.

	disallowDeprecatedMethodUsage.usage.recommendation.name = Recommendation...
	disallowDeprecatedMethodUsage.usage.recommendation.description = \
		Use wait() and notifyAll() to control the execution of threads.

################################################################################

disallowedFile.name = Disallowed File
disallowedFile.longName = \
	Some files should not exist in a project
disallowedFile.description = \
	<b>Summary</b>\
	<br/>\
	Some files should not exist in a project.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds files within projects that should be deleted. The list \
	of files is configurable, but typically includes auxilliary files created by \
	utility programs.

# {0} = file name
disallowedFile.disallowed.description = \
	Disallowed file {0}
disallowedFile.disallowed.explanation = \
	The file {0} should not be included in this project.

	disallowedFile.disallowed.delete.name = Delete the file
	disallowedFile.disallowed.delete.description = \
		The file should be deleted.

################################################################################

disallowHTMLComments.name = Don't use HTML Comments
disallowHTMLComments.longName = \
	JSP pages should not use HTML comments
disallowHTMLComments.description = \
	<b>Summary</b>\
	<br/>\
	JSP pages should not use HTML comments.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for uses of HTML comments within JSP pages. HTML \
	comments should not be used because they end up being sent to the client, \
	increasing network traffic and potentially making internal implementation \
	details visible.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following uses of an HTML comment would be flagged as a violation:\
	<p><code>\
	\t&lt;!-- Backdoor hack --&gt;\
	</code>

disallowHTMLComments.htmlComment.description = \
	HTML comment
disallowHTMLComments.htmlComment.explanation = \
	An HTML comment has been found in a JSP page.

	disallowHTMLComments.htmlComment.replaceWithJava.name = Replace with Java Comment
	disallowHTMLComments.htmlComment.replaceWithJava.description = \
		Replace the HTML comment with an embedded Java comment.

	disallowHTMLComments.htmlComment.replaceWithJSP.name = Replace with JSP Comment
	disallowHTMLComments.htmlComment.replaceWithJSP.description = \
		Replace the HTML comment with a JSP comment.

################################################################################

disallowInstanceof.name = Avoid Using "instanceof"
disallowInstanceof.longName = \
	Don't use the instanceof operator
disallowInstanceof.description = \
	<b>Summary</b>\
	<br/>\
	Use polymorphism instead of instanceof (except when used with \
	interfaces).\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for uses of "instanceof". In general, one should \
	use polymorphism instead of instanceof. Optionally, require that \
	"instanceof" only be used on interfaces.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following uses of the instanceof operator would be flagged as \
	violations:\
	<p><code>\
	\tif (employee instanceof AccountingEmployee) {<br>\
	\t\treturn "Accounting";<br>\
	\t} else if (employee instanceof DevelopmentEmployee) {<br>\
	\t\treturn "Development";<br>\
	\t...\
	</code>

disallowInstanceof.useInterfaces.description = \
	"instanceof" should only be used with interfaces
disallowInstanceof.useInterfaces.explanation = \
	"instanceof" should only be used with interfaces in order to improve \
	the flexibility of the program.

	disallowInstanceof.useInterfaces.recommendation.name = Recommendation...
	disallowInstanceof.useInterfaces.recommendation.description = \
		Use polymorphism rather than "instanceof".

disallowInstanceof.usePolymorphism.description = \
	Use polymorphism instead of "instanceof"
disallowInstanceof.usePolymorphism.explanation = \
	Proper OO principle dictate that polymorphism should be used \
	rather than "instanceof".

	disallowInstanceof.usePolymorphism.recommendation.name = Recommendation...
	disallowInstanceof.usePolymorphism.recommendation.description = \
		Use polymorphism rather than "instanceof".

################################################################################

disallowNativeMethods.name = Disallow Native Methods
disallowNativeMethods.longName = \
	Don't use native methods
disallowNativeMethods.description = \
	<b>Summary</b>\
	<br/>\
	Native methods should be avoided because they are often platform \
	dependent.\
	<p>\
	<b>Description</b>\
	<br/>\
	Native methods should be avoided because they are often platform \
	dependent.\
	<p>\
	<b>Security Implications</b>\
	<br/>\
	When native methods are executed, the execution path leaves the Java API, \
	leaving behind all Java security features, including any setup security \
	managers.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following method declaration would be flagged as a violation because \
	it is implemented as a native method:\
	<p><code>\
	\tpublic int native getUID();\
	</code>

disallowNativeMethods.native.description = \
	Avoid use of native methods
disallowNativeMethods.native.explanation = \
	Native methods should be avoided because they are often platform dependent.

	disallowNativeMethods.native.recommendation.name = Recommendation...
	disallowNativeMethods.native.recommendation.description = \
		Attempt to find a platform independent way of implementing the same \
		functionality.

################################################################################

disallowNotifyUsage.name = Disallow Notify Usage
disallowNotifyUsage.longName = \
	Don't use the notify() method
disallowNotifyUsage.description = \
	<b>Summary</b>\
	<br/>\
	The notify() method should not be used.\
	<p>\
	<b>Description</b>\
	<br/>\
	The method notifyAll() should be used rather than notify() because it will \
	generally lead to a better scheduling of waiting threads.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following invocation of the notify() method would be flagged as a \
	violation:\
	<p><code>\
	\tsynchronize (monitor) {<br>\
	\t\tmonitor.notify();<br>\
	\t}\
	</code>

disallowNotifyUsage.usage.description = \
	Invocation of the method notify()
disallowNotifyUsage.usage.explanation = \
	The notify() method should not be used.

	disallowNotifyUsage.usage.recommendation.name = Recommendation...
	disallowNotifyUsage.usage.recommendation.description = \
		Use the method notifyAll() instead of notify().

################################################################################

disallowReturnMutable.name = Don't Return Mutable Types
disallowReturnMutable.longName = Checks for methods whose return type is mutable
disallowReturnMutable.description = \
	<b>Summary</b>\
	<br/>\
	Don't return mutable types from methods.\
	<p>\
	<b>Description</b>\
	<br/>\
	Checks that returned types are either default immutable types \
	like java.lang.Integer or are declared immutable in the audit rule \
	preferences.\
	<p>\
	<b>Security Implications</b>\
	<br/>\
	Methods that return sensitive data that is passed in a mutable form can \
	potentially allow malicious users access to change the data.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following method declaration would be flagged (assuming "MutableType" \
	is not declared as immutable in the audit rule preferences):\
	<p><code>\
	\tpublic MutableType getData() {<br>\
	\t\treturn new MutableType();<br>\
	\t}\
	</code>

# {0} = method name of the method found in violation
# {1} = return type of the method found in violation

disallowReturnMutable.returnedMutable.description = \
	Mutable type "{1}" declared as the return type
disallowReturnMutable.returnedMutable.explanation = \
	Method "{0}" found returning a mutable type.

	disallowReturnMutable.returnedMutable.recommendation.name = Recommendation...
	disallowReturnMutable.returnedMutable.recommendation.description = \
		Do not return this object since it is a mutable type.

	disallowReturnMutable.returnedMutable.setImmutable.name = Declare Immutable
	disallowReturnMutable.returnedMutable.setImmutable.description = \
		Declare the type {0} to be immutable. The type will be treated as such \
		by all audit rules.

################################################################################

disallowSleepUsage.name = Disallow Sleep Usage
disallowSleepUsage.longName = \
	Don't use the sleep() method 
disallowSleepUsage.description = \
	<b>Summary</b>\
	<br/>\
	The sleep() method should not be used.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for invocations of the method Thread.sleep(). If you \
	are waiting for some specific state to be reached, you should instead use \
	the wait() method so that you can be notified when the state has been reached. \
	This will improve both the performance and reliability of your code. \
	<p>\
	<b>Example</b>\
	<br/>\
	The following invocation of the sleep() method would be flagged as a \
	violation:\
	<p><code>\
	\tsleep(1000);\
	</code>

disallowSleepUsage.invalid.description = \
	Invocation of sleep()
disallowSleepUsage.invalid.explanation = \
	The method sleep() should not be invoked.

	disallowSleepUsage.invalid.recommendation.name = Recommendation...
	disallowSleepUsage.invalid.recommendation.description = \
		Use wait() and notify() to block the thread until it is possible for \
		execution to proceed.

################################################################################

disallowSleepInsideWhile.name = Disallow Sleep Inside While
disallowSleepInsideWhile.longName = \
	Don't use the sleep() method within a while loop
disallowSleepInsideWhile.description = \
	<b>Summary</b>\
	<br/>\
	The sleep() method should not be used within a while loop.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for invocations of the sleep() method that occur \
	inside of a while loop. Such occurrences usually indicate that the code \
	implements a busy-wait loop, which is inefficient. Instead, the code \
	should use wait() and notify() to block the thread until it is possible \
	for execution to proceed.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following invocation of the sleep() method would be flagged as a \
	violation:\
	<p><code>\
	\twhile (eventQueue.isEmpty()) {<br>\
	\t\tThread.sleep();<br>\
	\t}\
	</code>

disallowSleepInsideWhile.invalid.description = \
	Invocation of sleep() inside while loop
disallowSleepInsideWhile.invalid.explanation = \
	The method sleep() should not be invoked within the body of a while loop.

	disallowSleepInsideWhile.invalid.recommendation.name = Recommendation...
	disallowSleepInsideWhile.invalid.recommendation.description = \
		Use wait() and notify() to block the thread until it is possible for \
		execution to proceed.

################################################################################

disallowStoringMutable.name = Don't Store Mutable Types
disallowStoringMutable.longName = Checks for declared mutable types.
disallowStoringMutable.description = \
	<b>Summary</b>\
	<br/>\
	Don't declare and allocate memory for mutable types.\
	<p>\
	<b>Description</b>\
	<br/>\
	Checks that data assigned to a field is either a default immutable type \
	like java.lang.Integer or is a declared as an immutable type in the \
	audit rule preferences.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following assignment statement would be flagged:\
	<p><code>\
	\tMutableType x = new MutableType();\
	</code>

# {0} = Mutable type

disallowStoringMutable.storingMutable.description = \
	Mutable type "{0}" declared as the type stored.
disallowStoringMutable.storingMutable.explanation = \
	Found mutable data stored to stack.

	disallowStoringMutable.storingMutable.recommendation.name = Recommendation...
	disallowStoringMutable.storingMutable.recommendation.description = \
		Do not store this mutable type in memory.

	disallowStoringMutable.storingMutable.setImmutable.name = Declare Immutable
	disallowStoringMutable.storingMutable.setImmutable.description = \
		Declare the type {0} to be immutable. The type will be treated as such \
		by all audit rules.

################################################################################

disallowStringConcatenation.name = String Concatenation
disallowStringConcatenation.longName = \
	Use the class MessageFormat to form user messages from pieces
disallowStringConcatenation.description = \
	<b>Summary</b>\
	<br/>\
	Strings should not be concatenated.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds places where two Strings are concatenated. \
	Concatenation of localized strings to produce a longer string is not valid \
	because the word order can change from one locale to the next. Instead, the \
	class MessageFormat should be used to construct the string based on a \
	pattern that can be localized for each locale.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following expression would be flagged as a violation:\
	<p><code>\
	\treturn "The button was clicked " + clickCount + " times.";\
	</code>

disallowStringConcatenation.invalid.description = \
	Cannot concatenate Strings
disallowStringConcatenation.invalid.explanation = \
	Concatenation of localized strings to produce a longer string is not valid \
	because the word order can change from one locale to the next.

	disallowStringConcatenation.invalid.recommendation.name = Recommendation...
	disallowStringConcatenation.invalid.recommendation.description = \
		Use the class MessageFormat to construct the string based on a pattern \
		that can be localized for each locale.

################################################################################

disallowTemporarySessions.name = Disallow Temporary Sessions
disallowTemporarySessions.longName = \
	JSP pages should not allow temporary sessions
disallowTemporarySessions.description = \
	<b>Summary</b>\
	<br/>\
	JSP pages should not allow temporary sessions.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for JSP files that do not contain a page directive \
	that explicitly disallows temporary sessions.

disallowTemporarySessions.allowed.description = \
	Missing page directive for temporary sessions
disallowTemporarySessions.allowed.explanation = \
	The JSP file does not contain a page directive disallowing temporary \
	sessions.

	disallowTemporarySessions.allowed.recommendation.name = Recommendation...
	disallowTemporarySessions.allowed.recommendation.description = \
		Add a page directive that disallows temporary sessions.

################################################################################

disallowTestAnnotation.name = Disallow @Test Annotation
disallowTestAnnotation.longName = \
	Don't use the @Test annotation
disallowTestAnnotation.description = \
	<b>Summary</b>\
	<br/>\
	The @Test annotation should not be used.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds uses of the @Test annotation.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following annotation would be flagged as a violation:\
	<p><code>\
	\t@Test<br>\
	\tpublic void testIt()\
	</code>

disallowTestAnnotation.disallowed.description = \
	@Test used
disallowTestAnnotation.disallowed.explanation = \
	The @Test annotation should not be used.

	disallowTestAnnotation.disallowed.remove.name = Remove Annotation
	disallowTestAnnotation.disallowed.remove.description = \
		Remove the @Test annotation.

################################################################################

disallowThreadGroupUsage.name = Disallow ThreadGroup Usage
disallowThreadGroupUsage.longName = \
	Don't use the class ThreadGroup
disallowThreadGroupUsage.description = \
	<b>Summary</b>\
	<br/>\
	The class ThreadGroup should not be used.\
	<p>\
	<b>Description</b>\
	<br/>\
	The class ThreadGroup should not be used in multi-threaded applications \
	because its implementation is not thread safe.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following instance creation would be flagged as a violation because \
	it is creating an instance of the class java.lang.ThreadGroup:\
	<p><code>\
	\tnew ThreadGroup("Background Threads")\
	</code>

disallowThreadGroupUsage.usage.description = \
	Variable of type ThreadGroup declared
disallowThreadGroupUsage.usage.explanation = \
	The class ThreadGroup should not be used in multi-threaded applications \
	because its implementation is not thread safe.

	disallowThreadGroupUsage.usage.recommendation.name = Recommendation...
	disallowThreadGroupUsage.usage.recommendation.description = \
		Implement thread-safe support for managing the threads in your \
		application.

################################################################################

disallowUnnamedThreadUsage.name = Disallow Unnamed Thread Usage
disallowUnnamedThreadUsage.longName = \
	Don't use unnamed threads
disallowUnnamedThreadUsage.description = \
	<b>Summary</b>\
	<br/>\
	Threads should be named to aid in debugging.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for the creation of threads that are not given a \
	name. Threads should be named in order to make it easier to debug the \
	application.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following thread creation would be flagged as a violation because \
	a name is not provided:\
	<p><code>\
	\tnew Thread(new Runnable() { ... });\
	</code>

disallowUnnamedThreadUsage.usage.description = \
	Thread declared without a name

disallowUnnamedThreadUsage.usage.explanation = \
	Thread should be named in order to make it easier to debug the \
	application.

	disallowUnnamedThreadUsage.usage.recommendation.name = Recommendation...
	disallowUnnamedThreadUsage.usage.recommendation.description = \
		Name the thread.

################################################################################

disallowYieldUsage.name = Disallow Yield Usage
disallowYieldUsage.longName = \
	Don't use the method Thread.yield()
disallowYieldUsage.description = \
	<b>Summary</b>\
	<br/>\
	The method Thread.yield() should not be used.\
	<p>\
	<b>Description</b>\
	<br/>\
	The method Thread.yield() should not be used because its behavior is not \
	consistent across all platforms.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following invocation of the yield() method would be flagged as a \
	violation:\
	<p><code>\
	\tbackgroundTask.yield();\
	</code>

disallowYieldUsage.usage.description = \
	Invocation of the method Thread.yield()
disallowYieldUsage.usage.explanation = \
	The method Thread.yield() should not be used because its behavior is not \
	consistent across all platforms.

	disallowYieldUsage.usage.recommendation.name = Recommendation...
	disallowYieldUsage.usage.recommendation.description = \
		Use wait() and notify() to block the thread until it is possible for \
		execution to proceed.

################################################################################

doNotCreateFinalizableObjects.name = Do Not Create Finalizable Objects
doNotCreateFinalizableObjects.longName = \
	Finalizable objects should not be instantiated
doNotCreateFinalizableObjects.description = \
	<b>Summary</b>\
	<br/>\
	Finalizable objects should not be instantiated.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for instance creation expressions in which the \
	object being created implements the finalize() method. Finalization is \
	expensive and error prone, so finalizable objects should not be used.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the class ResourceHandle defines the finalize method, then the \
	following instance creation expression would be flagged as a violation:\
	<p><code>\
	\tResourceHandle handle = new ResourceHandle(resourceId);\
	</code>

# {0} = created type
# {1} = finalizable type
doNotCreateFinalizableObjects.directlyFinalizable.description = \
	Creation of a finalizable object
doNotCreateFinalizableObjects.directlyFinalizable.explanation = \
	The class {0} defines the finalize() method, and should therefore not \
	be used.

	doNotCreateFinalizableObjects.directlyFinalizable.recommendation.name = Recommendation...
	doNotCreateFinalizableObjects.directlyFinalizable.recommendation.description = \
		Replace the object with a non-finalizable object.

# {0} = created type
# {1} = finalizable type
doNotCreateFinalizableObjects.indirectlyFinalizable.description = \
	Creation of a finalizable object
doNotCreateFinalizableObjects.indirectlyFinalizable.explanation = \
	The class {0} inherits the finalize() method from the class {1}, and \
	should therefore not be used.

	doNotCreateFinalizableObjects.indirectlyFinalizable.recommendation.name = Recommendation...
	doNotCreateFinalizableObjects.indirectlyFinalizable.recommendation.description = \
		Replace the object with a non-finalizable object.

################################################################################

doNotImplementOutdatedInterfaces.name = Do Not Implement Outdated Interfaces
doNotImplementOutdatedInterfaces.longName = \
	Do Not Implement Outdated Interfaces
doNotImplementOutdatedInterfaces.description = \
	<b>Summary</b>\
	<br/>\
	Outdated interfaces should not be implemented. Instead, implement the ones that \
	superseded them \
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule flags classes that implement outdated interface, or extend \
	outdated abstract classes.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following would be flagged because Iterator could be implemented instead: \
	<p><code>\
	\t\tpublic class Foo extends Enumeration{}\
	</code>

# {0} = Outdated interface
# {1} = Suggested replacement interface
doNotImplementOutdatedInterfaces.found.description = \
	Inheriting from {0}
doNotImplementOutdatedInterfaces.found.explanation = \
	The interface or abstract class <code>{0}</code> is outdated.

	doNotImplementOutdatedInterfaces.found.recommendation.name = Recommendation...
	doNotImplementOutdatedInterfaces.found.recommendation.description = \
		Consider implementing the interface <code>{1}</code>, which provides a similar \
		contract to <code>{0}</code>, but is more commonly used.

################################################################################

doNotImplementSerializable.name = Do Not Implement Serializable
doNotImplementSerializable.longName = \
	Do not declare objects or interfaces as Serializable
doNotImplementSerializable.description = \
	<b>Summary</b>\
	<br/>\
	Objects and interfaces should not be declared as Serializable.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule violates classes and interfaces that implement Serializable.\
	<p>\
	<b>Security Implications</b>\
	<br/>\
	When an object is serialized it is outside of the JRE and thus outside of \
	all security measures enforced by the JRE. In many cases, packages or \
	entire projects should not declare objects or interfaces as Serializable.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following class would be flagged:\
	<p><code>\
	\tclass A implements java.io.Serializable ...\
	</code>

#{0}: name of the type
doNotImplementSerializable.serializable.description = \
	The object or interface "{0}" is declared as Serializable
doNotImplementSerializable.serializable.explanation = \
	When an object is serialized it is outside of the JRE and thus a security \
	risk.

	doNotImplementSerializable.serializable.recommendation.name = Recommendation...
	doNotImplementSerializable.serializable.recommendation.description = \
		Do not declare this type as Serializable.

################################################################################

doNotInstantiateBeans.name = Don't Instantiate Beans
doNotInstantiateBeans.longName = \
	The method instantiate() should not be used to instantiate beans
doNotInstantiateBeans.description = \
	<b>Summary</b>\
	<br/>\
	The method instantiate() should not be used to instantiate beans.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for places where one of the instantiate() methods \
	is being used to instantiate a bean.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following use of the instantiate() method would be flagged:\
	<p><code>\
	\tnewBean = Beans.instantiate(classLoader, className);\
	</code>

doNotInstantiateBeans.instantiation.description = \
	Use of an instantiate() method
doNotInstantiateBeans.instantiation.explanation = \
	One of the instantiate() methods is being used to instantiate a bean.

	doNotInstantiateBeans.instantiation.recommendation.name = Recommendation...
	doNotInstantiateBeans.instantiation.recommendation.description = \
		Find another way to create the bean.

################################################################################

doNotInvokeSetSizeInComponentResized.name = Do Not Invoke setSize()
doNotInvokeSetSizeInComponentResized.longName = \
	Do not invoke Component.setSize() from within ComponentListener.componentResized()
doNotInvokeSetSizeInComponentResized.description = \
	<b>Summary</b>\
	<br/>\
	The method Component.setSize() should not be invoked within \
	ComponentListener.componentResized().\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for invocations of the method Component.setSize() within methods \
	that override the method ComponentListener.componentResized(). The method \
	setSize() causes the method componentResized() to be invoked, thus \
	leading to a stack overflow.\
	<p>\
	<b>Example</b>\
	<br/>\
	The given invocation of the method setSize() in the following method would be \
	flagged as a violation:\
	<p><code>\
	\tclass MyComponentListener extends Component implements ComponentListener {<br>\
	\t\tpublic void componentResized(ComponentEvent event) {<br>\
	\t\t\tsetSize(100, 100);<br>\
	\t\t}<br>\
	\t\t...<br>\
	\t}\
	</code>

doNotInvokeSetSizeInComponentResized.calledSetSize.description = \
	setSize() invocation found within componentResized()
doNotInvokeSetSizeInComponentResized.calledSetSize.explanation = \
	The method setSize() was found within a method overriding \
	ComponentListener.componentResized().

	doNotInvokeSetSizeInComponentResized.calledSetSize.recommendation.name = Recommendation...
	doNotInvokeSetSizeInComponentResized.calledSetSize.recommendation.description = \
		Do not call setSize() within a method overriding ComponentListener.componentResized().

################################################################################

doNotSerializeByteArrays.name = Do Not Serialize Byte Arrays
doNotSerializeByteArrays.longName = \
	Do not serialize byte arrays using ObjectOutputStream.write(byte[])
doNotSerializeByteArrays.description = \
	<b>Summary</b>\
	<br/>\
	Do not serialize byte arrays using the ObjectOutputStream.write(byte[]) \
	method.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule violates invocations of the method \
	ObjectOutputStream.write(byte[]).\
	<p>\
	<b>Security Implications</b>\
	<br/>\
	Byte arrays should not be serialized using <code>write(byte[])</code> \
	because the method is not final, allowing subclasses of ObjectOutputStream \
	to override the method and get access to internal data.\
	<p>\
	<b>Example</b>\
	<br/>\
	Given the following field declaration:\
	<p>\
	\tprivate byte[] key;\
	<p>\
	The following invocation of the write method would be flagged:\
	<p><code>\
	\tprivate void writeObject(ObjectOutputStream stream)<br>\
	\t{<br>\
	\t\tstream.write(key);<br>\
	\t}\
	</code>

doNotSerializeByteArrays.writeBytes.description = \
	Found invocation of write(byte[])
doNotSerializeByteArrays.writeBytes.explanation = \
	Ensure that Object data is not being written to an output stream via a \
	byte array.

	doNotSerializeByteArrays.writeBytes.recommendation.name = Recommendation...
	doNotSerializeByteArrays.writeBytes.recommendation.description = \
		Use writeObject(Object) to write the byte array.

################################################################################

doNotSubclassClassLoader.name = Do Not Subclass ClassLoader
doNotSubclassClassLoader.longName = \
	Classes should not subclass java.lang.ClassLoader
doNotSubclassClassLoader.description = \
	<b>Summary</b>\
	<br/>\
	Do not extend <code>java.lang.ClassLoader</code>\
	<p>\
	<b>Description</b>\
	<br/>\
	Subclasses of <code>java.lang.ClassLoader</code> are flagged. In instances \
	where <code>ClassLoader</code> needs to be subclassed, use \
	<code>java.security.SecureClassLoader</code>.\
	<p>\
	<b>Security Implications</b>\
	<br/>\
	By subclassing <code>SecureClassLoader</code> instead of <code>ClassLoader</code>, additional \
	Java security measures are taken to protect against class loading \
	vulnerabilities.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following class would be flagged as a violation:\
	<p><code>\
	\tclass A extends ClassLoader {...}\
	</code>

doNotSubclassClassLoader.subclassedClassLoader.description = \
	Found a class extending ClassLoader
doNotSubclassClassLoader.subclassedClassLoader.explanation = \
	Classes should not extend ClassLoader

	doNotSubclassClassLoader.subclassedClassLoader.recommendation.name = Recommendation...
	doNotSubclassClassLoader.subclassedClassLoader.recommendation.description = \
		Do not extend ClassLoader.

################################################################################

doNotUseConcatenationToConvertToString.name = Don't use concatenation to convert to String
doNotUseConcatenationToConvertToString.longName = \
	Don't use concatenation to convert to String
doNotUseConcatenationToConvertToString.description = \
	<b>Summary</b>\
	<br/>\
	Don't use concatenation to convert to String.\
	<p>\
	<b>Description</b>\
	<br/>\
	Concatenation with the empty string should never be used to convert \
	something to a string. It is more efficient to use String.valueOf() \
	to convert primitives, or toString() to convert objects.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following would be flagged as a violation:\
	<p><code>\
	\tcount = 5;\
	\treturn count + "";\
	</code>

doNotUseConcatenationToConvertToString.concatenation.description = \
	Concatenating with the empty string
doNotUseConcatenationToConvertToString.concatenation.explanation = \
	Primitives should be converted to Strings using String.valueOf(primitive);\
	objects should be converted using their toString() methods.
	
	doNotUseConcatenationToConvertToString.concatenation.fix.name = Replace concatenation
	doNotUseConcatenationToConvertToString.concatenation.fix.description = \
		Replace the unnecessary concatenation with toString() or String.valueOf(), as appropriate.

doNotUseConcatenationToConvertToString.concatenationAndArray.description = \
	Concatenating an array with the empty string
doNotUseConcatenationToConvertToString.concatenationAndArray.explanation = \
	Arrays should be converted to Strings by using java.util.Arrays.toString().
	
	doNotUseConcatenationToConvertToString.concatenationAndArray.recommendation.name = Recommendation...
	doNotUseConcatenationToConvertToString.concatenationAndArray.recommendation.description = \
		Use java.util.Arrays.toString() to convert the array to a String.

################################################################################

documentClosingBraces.name = Document Closing Braces
documentClosingBraces.longName = \
	Closing braces should be documented with a comment
documentClosingBraces.description = \
	<b>Summary</b>\
	<br/>\
	Closing braces should be documented with a comment.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for closing braces for specified statements that \
	are not followed by a specified end-of-line comment. The comments are \
	used to make it easier for readers to see the structure of the code.\
	<p>\
	<b>Example</b>\
	<br/>\
	The closing brace for the following if statement would be flagged as \
	needing to be commented:\
	<p><code>\
	\tif (employee.isHourly()) {<br>\
	\t\t...<br>\
	\t}\
	</code>

documentClosingBraces.noComment.description = \
	Undocumented closing brace
documentClosingBraces.noComment.explanation = \
	The closing brace needs to be documented to show which statement it is \
	associated with.

	documentClosingBraces.noComment.addComment.name = Add Comment...
	documentClosingBraces.noComment.addComment.description = \
		Add the appropriate comment after the closing brace.

################################################################################

duplicateImport.name = Duplicate Import Declarations
duplicateImport.longName = \
	Only import a type or package once per compilation unit
duplicateImport.description = \
	<b>Summary</b>\
	<br/>\
	Types and packages should only be imported once within a compilation \
	unit.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks to ensure that there are never more than one import \
	declaration with the same package or type name. This does not flag the \
	case where a package is imported (a demand import) and a type from the \
	package is separately imported explicitly. (Such a situation is sometimes \
	required to disambiguate names.)\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\timport java.util.Vector;<br>\
	\timport java.util.Vector;\
	</code>

# {0} = import statement
duplicateImport.duplicate.description = \
	Duplicate import: {0}
duplicateImport.duplicate.explanation = \
	The import statement {0} is a duplicate of another import statement that \
	appears before it in the file.

	duplicateImport.duplicate.delete.name = Delete the import
	duplicateImport.duplicate.delete.description = \
		Delete the duplicate import.

################################################################################

duplicatePropertyName.name = Duplicate Property Name
duplicatePropertyName.longName = \
	Only define a property once per property file
duplicatePropertyName.description = \
	<b>Summary</b>\
	<br/>\
	Properties should only be declared once.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks to ensure that there is never more than one \
	property declaration with the same name in the same file. Declaring \
	multiple properties with the same name is usually a mistake because only \
	the last such property will be visible to the code.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tapplicationName = CoolApp<br>\
	\tapplicationName = Ice Machine Controller<br>\
	</code>

# {0} = property name
duplicatePropertyName.duplicateName.description = \
	Duplicate property name: {0}
duplicatePropertyName.duplicateName.explanation = \
	The property named {0} is a duplicate of another property declaration that \
	appears before it in the file.

	duplicatePropertyName.duplicateName.delete.name = Delete the property
	duplicatePropertyName.duplicateName.delete.description = \
		Delete the duplicate property.

################################################################################

duplicatePropertyValue.name = Duplicate Property Value
duplicatePropertyValue.longName = \
	Only define one name for each unique property value
duplicatePropertyValue.description = \
	<b>Summary</b>\
	<br/>\
	Properties should only be declared once.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks to ensure that there is never more than one \
	property declaration with the same value in the same file. Declaring \
	multiple properties with the same value can needlessly increase the amount \
	of effort required to translate the property values into another locale.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\timportBottonLabel = Import...<br>\
	\timportMenuLabel = Import...\
	</code>

# {0} = property value
duplicatePropertyValue.duplicateValue.description = \
	Duplicate property value: {0}
duplicatePropertyValue.duplicateValue.explanation = \
	The property value {0} is a duplicate of another property declaration that \
	appears before it in the file.

	duplicatePropertyValue.duplicateValue.delete.name = Delete the property
	duplicatePropertyValue.duplicateValue.delete.description = \
		Delete the duplicate property.

################################################################################

dynamicallyComposeTestSuites.name = Dynamically Compose Test Suites
dynamicallyComposeTestSuites.longName = \
	Test suites should be dynamically composed
dynamicallyComposeTestSuites.description = \
	<b>Summary</b>\
	<br/>\
	Test suites should be dynamically composed.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for test cases that implement the static method \
	suite(). Implementing this method makes it harder to extend your test \
	suite because you have to remember to manually add any newly added test \
	methods to the suite manually. You should take advantage of JUnit's \
	ability to dynamically compute the test suite based on test method names. \
	<p>\
	<b>Example</b>\
	<br/>\
	The following method would be flagged if it appeared within a test case:\
	<p><code>\
	\tpublic static Test suite()<br>\
	\t{<br>\
	\t\t...<br>\
	\t}\
	</code>

dynamicallyComposeTestSuites.declared.description = \
	suite() method declared
dynamicallyComposeTestSuites.declared.explanation = \
	The static method suite() has been declared.

	dynamicallyComposeTestSuites.declared.recommendation.name = Recommendation...
	dynamicallyComposeTestSuites.declared.recommendation.description = \
		Delete the suite() method so that the contents of the test suite \
		will be dynamically computed by the JUnit framework.

################################################################################

efficientExpression.name = Efficient Expression
efficientExpression.longName = \
	Use the most efficient code possible
efficientExpression.description = \
	<b>Summary</b>\
	<br/>\
	Some expressions are more efficient than others.\
	<p>\
	<b>Description</b>\
	<br/>\
	This rule finds expressions that can be replaced with other \
	equivalent and more efficient expressions.\
	<p>\
	<b>Example</b>\
	<br/>\
	The expression\
	<p><code>\
	\t(new Integer("1234")).intValue()\
	</code><p>\
	should be replaced by\
	<p><code>\
	\tInteger.parseInt("1234")\
	</code><p>\
	because the latter expression does not create an intermediate Integer \
	object and thus is more efficient.

efficientExpression.replacementExpression.description = \
	Expression can be replaced by {1}
efficientExpression.replacementExpression.explanation = \
	The expression {0} is not as efficient as, and thus can be replaced by {1}

	efficientExpression.replacementExpression.replace.name = Replace expression
	efficientExpression.replacementExpression.replace.description = \
		Replace the expression with the more efficient code.

################################################################################

explicitInvocationOfFinalize.name = Explicit Invocation of Finalize
explicitInvocationOfFinalize.longName = \
	Finalize should never be explicitly called
explicitInvocationOfFinalize.description = \
	<b>Summary</b>\
	<br/>\
	The method finalize() should never be explicitly called.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for explicit invocations of the method finalize(). \
	The finalize method should only be invoked by the VM.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following method invocation would be flagged as a violation: \
	<p><code>\
	\tobject.finalize();\
	</code>

explicitInvocationOfFinalize.used.description = \
	The call to finalize should be deleted
explicitInvocationOfFinalize.used.explanation = \
	Finalize should only be called by the VM. 

	explicitInvocationOfFinalize.used.recommendation.name = Delete expression
	explicitInvocationOfFinalize.used.recommendation.description = \
		The invocation of finalize should be deleted.

################################################################################

emptyCatchClause.name = Empty Catch Clause
emptyCatchClause.longName = \
	Explicitly handle all caught exceptions
emptyCatchClause.description = \
	<b>Summary</b>\
	<br/>\
	Catch clauses should not be empty.\
	<p>\
	<b>Description</b>\
	<br/>\
	This rule finds places where an exception is caught and nothing is done. \
	It can be configured to allow the existence of a comment to substitute for \
	actual Java code.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\ttry {<br>\
	\t\t...<br>\
	\t} catch (Exception exception) {<br>\
	\t}\
	</code>

emptyCatchClause.empty.description = \
	Empty catch clause for exception {0}
emptyCatchClause.empty.explanation = \
	The exception {0} is caught, but nothing is done with the knowledge that \
	the exception was thrown. This usually indicates a problem in the program.

	emptyCatchClause.empty.delete.name = Delete catch clause
	emptyCatchClause.empty.delete.description = \
		Delete the empty catch clause.

################################################################################

emptyClass.name = Empty Class
emptyClass.longName = Don't declare empty classes
emptyClass.description = \
	<b>Summary</b>\
	<br/>\
	Empty classes should not be declared.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for class declarations that do not include any \
	members (fields, methods, or inner classes). Such classes usually occur if \
	either the implementation was not finished or if the class was being used \
	as a marker. In the latter case the class should be replaced by an interface.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following class definition would be flagged as being a violation:\
	<p><code>\
	\tpublic class EmptyClass<br>\
	\t{<br>\
	\t}</code>

emptyClass.emptyClass.description = \
	An empty class definition was found
emptyClass.emptyClass.explanation = \
	Empty classes often indicate the implementation was not finished, or the \
	class is being used as a marker.

	emptyClass.emptyClass.recommendation.name = Recommendation...
	emptyClass.emptyClass.recommendation.description = \
		Remove the class, complete its definition, or change it to an interface.

################################################################################

emptyDoStatement.name = Empty Do Statement
emptyDoStatement.longName = \
	Empty Do Statement
emptyDoStatement.description = \
	<b>Summary</b>\
	<br/>\
	Do statements should not be empty.\
	<p>\
	<b>Description</b>\
	<br/>\
	This rule finds do statements whose body is empty.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tdo {<br>\
	\t} while(someCondition());\
	</code>

emptyDoStatement.emptyBody.description = \
	Empty do statement
emptyDoStatement.emptyBody.explanation = \
	The do statement is empty.

	emptyDoStatement.emptyBody.recommendation.name = Recommendation...
	emptyDoStatement.emptyBody.recommendation.description = \
		Remove the do statement or fix the code so that its body is no \
		longer empty.

################################################################################

emptyEnhancedForStatement.name = Empty Enhanced For Statement
emptyEnhancedForStatement.longName = \
	Don't write empty enhanced for loops
emptyEnhancedForStatement.description = \
	<b>Summary</b>\
	<br/>\
	The body of an enhanced for loop should never be empty.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds enhanced for loops whose body is empty.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tfor (int count : counts) {<br>\
	\t}\
	</code>

emptyEnhancedForStatement.emptyBody.description = \
	Empty enhanced for loop
emptyEnhancedForStatement.emptyBody.explanation = \
	The enhanced for loop is empty.

	emptyEnhancedForStatement.emptyBody.recommendation.name = Recommendation...
	emptyEnhancedForStatement.emptyBody.recommendation.description = \
		Restructure the enhanced for loop so that it is more obvious what is \
		suppose to be happening each time through the loop.

################################################################################

emptyFinalizeMethod.name = Empty Finalize Method
emptyFinalizeMethod.longName = \
	Don't write empty finalize methods
emptyFinalizeMethod.description = \
	<b>Summary</b>\
	<br/>\
	The body of a finalize method should never be empty.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds finalize methods whose body is empty.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tprotected void finalize()<br>\
	\t{<br>\
	\t}\
	</code>

emptyFinalizeMethod.empty.description = \
	Empty finalize method
emptyFinalizeMethod.empty.explanation = \
	The finalize method is empty.

	emptyFinalizeMethod.empty.delete.name = Delete finalize method
	emptyFinalizeMethod.empty.delete.description = \
		Delete the finalize method.

################################################################################

emptyFinallyClause.name = Empty Finally Clause
emptyFinallyClause.longName = \
	Finally clauses should never be empty
emptyFinallyClause.description = \
	<b>Summary</b>\
	<br/>\
	Finally clauses should never be empty.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds finally clauses whose block is empty.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\ttry {<br>\
	\t\t...<br>\
	\t} finally {<br>\
	\t}\
	</code>

emptyFinallyClause.empty.description = \
	Empty finally clause
emptyFinallyClause.empty.explanation = \
	The finally clause is empty, making it totally superfluous. It should be \
	removed.

	emptyFinallyClause.empty.delete.name = Delete finally clause
	emptyFinallyClause.empty.delete.description = \
		Delete the empty finally clause.

################################################################################

emptyForStatement.name = Empty For Statement
emptyForStatement.longName = \
	Don't write empty for loops
emptyForStatement.description = \
	<b>Summary</b>\
	<br/>\
	The body of a for loop should never be empty.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds for loops whose body is empty.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tfor (int i = 0; i &lt; array.length; i++) {<br>\
	\t}\
	</code>

emptyForStatement.emptyBody.description = \
	Empty for loop
emptyForStatement.emptyBody.explanation = \
	The for loop is empty.

	emptyForStatement.emptyBody.recommendation.name = Recommendation...
	emptyForStatement.emptyBody.recommendation.description = \
		Restructure the for loop so that it is more obvious what is suppose to \
		be happening each time through the loop.

################################################################################

emptyIfStatement.name = Empty If Statement
emptyIfStatement.longName = \
	Don't write empty if statements
emptyIfStatement.description = \
	<b>Summary</b>\
	<br/>\
	The clauses of an if statement should never be empty.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds if statements whose then or else clauses are empty.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tif (this == that) {<br>\
	\t}\
	</code>

emptyIfStatement.emptyThenAndElse.description = \
	Empty if statement
emptyIfStatement.emptyThenAndElse.explanation = \
	The if statement has neither a then nor an else clause.

	emptyIfStatement.emptyThenAndElse.recommendation.name = Recommendation...
	emptyIfStatement.emptyThenAndElse.recommendation.description = \
		The if statement has no effect (unless the condition produces a \
		side-effect), so it should be removed.

emptyIfStatement.emptyThen.description = \
	Empty then clause
emptyIfStatement.emptyThen.explanation = \
	The then clause is empty.

	emptyIfStatement.emptyThen.recommendation.name = Recommendation...
	emptyIfStatement.emptyThen.recommendation.description = \
		Unless there is suppose to be something in the then clause, invert the \
		condition and move the else clause to the then clause.

emptyIfStatement.emptyElse.description = \
	Empty else clause
emptyIfStatement.emptyElse.explanation = \
	The else clause is empty.

	emptyIfStatement.emptyElse.recommendation.name = Recommendation...
	emptyIfStatement.emptyElse.recommendation.description = \
		Unless there is suppose to be something in the else clause, delete it.

################################################################################

emptyInitializer.name = Empty Initializer
emptyInitializer.longName = \
	Don't write empty initializers
emptyInitializer.description = \
	<b>Summary</b>\
	<br/>\
	The body of an initializer should never be empty.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds initializers whose body is empty.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tstatic {<br>\
	\t}\
	</code>

emptyInitializer.emptyBody.description = \
	Empty initializer
emptyInitializer.emptyBody.explanation = \
	The initializer is empty.

	emptyInitializer.emptyBody.recommendation.name = Recommendation...
	emptyInitializer.emptyBody.recommendation.description = \
		Remove the initializer or fix the code so that its body is no \
		longer empty.

################################################################################

emptyMethod.name = Empty Method
emptyMethod.longName = \
	Remove empty methods
emptyMethod.description = \
	<b>Summary</b>\
	<br/>\
	Empty methods should never be used.\
	<p>\
	<b>Description</b>\
	<br/>\
	Methods with an empty body usually occur only when someone has forgotten to \
	implement the method. This audit rule finds methods whose body is empty. \
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tpublic void doSomething()<br>\
	\t{<br>\
	\t}\
	</code>

emptyMethod.emptyBody.description = \
	Empty method
emptyMethod.emptyBody.explanation = \
	The existence of an empty method usually occurs when it is forgotten to \
	be implemented.

	emptyMethod.emptyBody.recommendation.name = Delete empty method
	emptyMethod.emptyBody.recommendation.description = \
		Delete the empty method.


################################################################################

emptyStatement.name = Empty Statement
emptyStatement.longName = \
	Remove empty statements to avoid confusion
emptyStatement.description = \
	<b>Summary</b>\
	<br/>\
	Empty statements should never be used.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds places where an empty statement occurs within a \
	control structure. (An empty statement is a semicolon appearing alone in \
	a place where a statement is allowed). The existence of an empty statement \
	usually indicates a problem, such as a piece of code that was \
	unintentionally removed or a semicolon added in the wrong place.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tif (hasBeenAuthenticated);<br>\
	\t\tgrantSpecialAccess();\
	</code>

emptyStatement.empty.description = \
	Empty statement
emptyStatement.empty.explanation = \
	The existence of an empty statement usually indicates a problem such as a \
	piece of code that was unintentionally removed.

	emptyStatement.empty.delete.name = Delete empty statement
	emptyStatement.empty.delete.description = \
		Delete the empty statement.

################################################################################

emptyStringDetection.name = Empty String Detection
emptyStringDetection.longName = \
	The method equals(&lt;String&gt;) should not be used to determine if a String is empty
emptyStringDetection.description = \
	<b>Summary</b>\
	<br/>\
	The method equals("") should not be used to determine if a String is empty.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule detects instances where Strings are detected to be empty \
	with the &lt;String&gt;.equals("") method. Instances of \
	"".equals(&lt;String&gt;) are also flagged as violations.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following would be flagged:\
	<p><code>\
	\tString str = ...;<br>\
	\tif(str.equals("")) {<br>\
	\t\t...<br>\
	\t}\
	</code>

emptyStringDetection.badDetection.description = \
	String.equals("") used
emptyStringDetection.badDetection.explanation = \
	To detect if a String is empty, <String>.length()==0 takes less time than \
	<String>.equals("").

	emptyStringDetection.badDetection.useLength.name = Replace with <String>.length()==0
	emptyStringDetection.badDetection.useLength.description = \
		Replace <String>.equals("") (or !<String>.equals("")) with <String>.length()==0 (or !=).

################################################################################

emptySwitchStatement.name = Empty Switch Statement
emptySwitchStatement.longName = \
	Don't write empty switch statements
emptySwitchStatement.description = \
	<b>Summary</b>\
	<br/>\
	The body of a switch statement should never be empty.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds switch statements whose body is empty.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tswitch (value) {<br>\
	\t}\
	</code>

emptySwitchStatement.emptyBody.description = \
	Empty switch statement
emptySwitchStatement.emptyBody.explanation = \
	The switch statement is empty.

	emptySwitchStatement.emptyBody.recommendation.name = Recommendation...
	emptySwitchStatement.emptyBody.recommendation.description = \
		Remove the switch statement or fix the code so that its body is no \
		longer empty.

################################################################################

emptySynchronizedStatement.name = Empty Synchronized Statement
emptySynchronizedStatement.longName = \
	Don't write empty synchronized statements
emptySynchronizedStatement.description = \
	<b>Summary</b>\
	<br/>\
	Synchronized statements should never be empty.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds empty synchronized statements.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tsynchronized (monitor) {<br>\
	\t}\
	</code>

emptySynchronizedStatement.empty.description = \
	Empty synchronized statement
emptySynchronizedStatement.empty.explanation = \
	The synchronized statement is empty, making it totally superfluous. It \
	should be removed.

	emptySynchronizedStatement.empty.delete.name = Delete synchronize statement
	emptySynchronizedStatement.empty.delete.description = \
		Delete the empty synchronize statement.

################################################################################

emptyTryStatement.name = Empty Try Statement
emptyTryStatement.longName = \
	Don't write empty try statements
emptyTryStatement.description = \
	<b>Summary</b>\
	<br/>\
	The body of a try statement should never be empty.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds try statements whose body is empty.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\ttry {<br>\
	\t} finally {<br>\
	\t\tfile.close();<br>\
	\t}\
	</code>

emptyTryStatement.emptyBody.description = \
	Empty try statement
emptyTryStatement.emptyBody.explanation = \
	The try statement is empty.

	emptyTryStatement.emptyBody.recommendation.name = Recommendation...
	emptyTryStatement.emptyBody.recommendation.description = \
		Remove the try statement or fix the code so that its body is no \
		longer empty.

################################################################################

emptyWhileStatement.name = Empty While Statement
emptyWhileStatement.longName = \
	Don't write empty while statements
emptyWhileStatement.description = \
	<b>Summary</b>\
	<br/>\
	The body of a while statement should never be empty.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds while statements whose body is empty.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\twhile (index &lt; count) {<br>\
	\t}\
	</code>

emptyWhileStatement.emptyBody.description = \
	Empty while statement
emptyWhileStatement.emptyBody.explanation = \
	The while statement is empty.

	emptyWhileStatement.emptyBody.recommendation.name = Recommendation...
	emptyWhileStatement.emptyBody.recommendation.description = \
		Remove the while statement or fix the code so that its body is no \
		longer empty.

################################################################################

enforceCloneableUsageSecurity.name = Enforce Cloneable Usage
enforceCloneableUsageSecurity.longName = \
	Always override clone()
enforceCloneableUsageSecurity.description = \
	<b>Summary</b>\
	<br/>\
	When an Object is cloned, Object data is copied and returned, because of this \
	secure classes must be conscious of Cloneable.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule aims to prevent adversaries from accessing data by extending \
	classes and creating clone methods. Specifically, this rule flags non-anonymous \
	classes that:<br>\
	(1) do not implement Cloneable (so that the rule doesn't flag appropriate uses \
	of Cloneable utilities),<br>\
	(2) are non-final (final classes can't be extended),<br>\
	(3) do not inherit a clone method (since inserting a clone method would be \
	unnecessarily repetitive),<br>\
	(4) and do not override clone():\
	<p><code>\
	public Object clone() throws CloneNotSupportedException;\
	</code><p>\
	and may enforce the following as the body of the clone method:\
	<p><code>\
	{<br>\
	\tthrows java.lang.CloneNotSupportedException("Type not cloneable");<br>\
	}\
	</code><p>\
	without, or with, a String input description.\
	<p>\
	Note: Even though classes that do not implement the Cloneable interface \
	throw CloneNotSupportedException, adversaries are not prevented from \
	extending a class, implementing the Cloneable interface, and then calling \
	clone() to retrieve a copy of an instance of the class.\
	<p>\
	For more audit rule options concerning clone(), see Clone Method Usage \
	and Override Clone Judiciously under Semantic Errors.\
	<p>\
	<b>Security Implications</b>\
	<br/>\
	Classes that do not override clone() risk allowing a malicious user to \
	subclass and override the clone method allowing them to gain access to data \
	not intended by the application.\
	<p>\
	<b>Example</b>\
	<br/>\
	The classes A, B and C below will not be flagged, but D will be.\
	<p><code>\
	\tclass A {<br>\
	\t\tpublic Object clone() {<br>\
	\t\t\tthrow new java.lang.CloneNotSupportedException();<br>\
	\t\t}<br>\
	\t}<br>\
	<br>\
	\tclass B extends A {}<br>\
	<br>\
	\tfinal class C{}<br>\
	<br>\
	\tclass D {}\
	</code>

enforceCloneableUsageSecurity.noClone.description = \
	"{0}" does not override clone()
enforceCloneableUsageSecurity.noClone.explanation = \
	To prevent "{0}" from creating possible un-secure clones, this audit \
	rule requires "{0}" to override the clone method.

	enforceCloneableUsageSecurity.noClone.recommendation.name = \
	Missing clone method.
	enforceCloneableUsageSecurity.noClone.recommendation.recommendation = \
	Override clone().

enforceCloneableUsageSecurity.notFinal.description = \
	clone() is not final in "{0}"
enforceCloneableUsageSecurity.notFinal.explanation = \
	By setting clone() final, all children of this class will not have to \
	declare a clone method to get class as secure as this clone method.
	
	enforceCloneableUsageSecurity.notFinal.makeFinal.name = \
	make clone() final
	enforceCloneableUsageSecurity.notFinal.makeFinal.recommendation = \
	Either make this clone method final or declare equivalent method in \
	all subclasses.

enforceCloneableUsageSecurity.noException.description = \
	clone() in "{0}" does not have correct method body
enforceCloneableUsageSecurity.noException.explanation = \
	To prevent children of "{0}" from creating possibly un-secure clones, \
	have throw CloneNotSupportedException.

	enforceCloneableUsageSecurity.noException.recommendation.name = \
	Missing correct clone method.
	enforceCloneableUsageSecurity.noException.recommendation.recommendation = \
	Replace current clone method body with: throw new java.lang.CloneNotSupportedException();

################################################################################

enforceTheSingletonPropertyWithAPrivateConstructor.name = Enforce Singleton Property with Private Constructor
enforceTheSingletonPropertyWithAPrivateConstructor.longName = \
	Define a private constructor for singleton classes
enforceTheSingletonPropertyWithAPrivateConstructor.description = \
	<b>Summary</b>\
	<br/>\
	Flag classes that appear to follow the Singleton pattern but have a \
	non-private constructor.\
	<p>\
	<b>Description</b>\
	<br/>\
	Ensure that a class defined as a singleton follows specific rules that \
	disallow multiple instances to be created. Singleton classes should have a \
	single, private constructor and static access to the instance.

enforceTheSingletonPropertyWithAPrivateConstructor.nonprivateConstructor.description = \
	{0} has a constructor that is not private
enforceTheSingletonPropertyWithAPrivateConstructor.nonprivateConstructor.explanation = \
	Singleton classes should have a private constructor to disallow \
	instantiation of the class.

	enforceTheSingletonPropertyWithAPrivateConstructor.nonprivateConstructor.makePrivate.name = Make the constructor private
	enforceTheSingletonPropertyWithAPrivateConstructor.nonprivateConstructor.makePrivate.description = \
		Change the constructor declaration to make it private.

################################################################################

entitybean.name = Entity Beans
entitybean.longName = \
	Make entity beans conform to the specification
entitybean.description = \
	<b>Summary</b>\
	<br/>\
	Entity Beans should be properly defined.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds problems with Entity Beans:<br>\
	\t- Entity bean should be declared public<br>\
	\t- Entity bean name should end with 'Bean'<br>\
	\t- Entity bean not implement a finalize() method<br>\
	\t- ejbCreate() method should be declared public<br>\
	\t- ejbCreate() method should not be declared as static or final<br>\
	\t- ejbCreate() method should be declared void<br>\
	\t- Entity bean should implement at least one ejbCreate() method<br>\
	\t- Entity bean should implement a no-argument constructor<br>\
	\t- One ejbPostCreate() method for each ejbCreate() method<br>\
	\t- ejbPostCreate() method should be declared public<br>\
	\t- ejbPostCreate() method should not be declared as static or final<br>\
	\t- ejbPostCreate() method should be declared void<br>\
	\t- ejbPostCreate() parameters should match ejbCreate() method<br>\
	\t- ejbPostCreate() name should match ejbCreate() name<br>\
	\t- ejbFind() method should be declared public<br>\
	\t- ejbFind() method should not be declared as static or final<br>\
	\t- ejbSelect() method should be declared public<br>\
	\t- ejbSelect() method should be declared abstract<br>\
	\t- ejbSelect() method should throw the javax.ejb.FinderException exception<br>\
	\t- ejbHome() method should be declared public<br>\
	\t- ejbHome() method should not be declared static<br>\
	\t- ejbHome() method should not throw the javax.ejb.RemoteException exception<br>\

entitybean.notPublic.description = \
	The entity bean {0} should be declared public
entitybean.notPublic.explanation = \
	Enterprise entity beans like {0} must be declared with public access.<br>\
	See EJB 2.0 - 10.6.2 and 12.2.2.

	entitybean.notPublic.makePublic.name = Make public
	entitybean.notPublic.makePublic.description = \
		Change the visibility of the entity bean to be public.

entitybean.badName.description = \
	The name of the entity bean {0} should end with "Bean"
entitybean.badName.explanation = \
	Entity beans like {0} should have names ending with "Bean".

	entitybean.badName.rename.name = Rename class to "{1}"
	entitybean.badName.rename.description = \
		Rename the class from "{0}" to "{1}" to include the suffix "Bean".

entitybean.finalize.description = \
	The entity bean should not implement the finalize() method
entitybean.finalize.explanation = \
	Entity beans should not implement the finalize() method.<br>\
	See EJB 2.0 - 10.6.2 and 12.2.2.

	entitybean.finalize.delete.name = Delete finalize()
	entitybean.finalize.delete.description = \
		Delete the finalize() method.

entitybean.ejbCreate.notPublic.description = \
	The {0} method should be declared public
entitybean.ejbCreate.notPublic.explanation = \
	Entity beans should declare {0} methods as public.<br>\
	See EJB 2.0 - 10.6.4 and 12.2.3.

	entitybean.ejbCreate.notPublic.makePublic.name = Make public
	entitybean.ejbCreate.notPublic.makePublic.description = \
		Change the visibility of the method to be public.

entitybean.ejbCreate.static.description = \
	The {0} method should not be declared static
entitybean.ejbCreate.static.explanation = \
	Entity beans should not declare {0} methods as static.<br>\
	See EJB 2.0 - 10.6.4 and 12.2.3.

	entitybean.ejbCreate.static.removeStatic.name = Remove static
	entitybean.ejbCreate.static.removeStatic.description = \
		Remove the static modifier.

entitybean.ejbCreate.final.description = \
	The {0} method should not be declared final
entitybean.ejbCreate.final.explanation = \
	Entity beans should not declare {0} methods as final.<br>\
	See EJB 2.0 - 10.6.4 and 12.2.3.

	entitybean.ejbCreate.final.removeFinal.name = Remove final
	entitybean.ejbCreate.final.removeFinal.description = \
		Remove the final modifier.

entitybean.ejbCreate.notVoid.description = \
	The {0} method should not be declared void
entitybean.ejbCreate.notVoid.explanation = \
	Entity beans should not declare {0} methods to return void.<br>\
	See EJB 2.0 - 10.6.4 and 12.2.3.

	entitybean.ejbCreate.notVoid.recommendation.name = Recommendation...
	entitybean.ejbCreate.notVoid.recommendation.description = \
		Do not declare the method to return void.

entitybean.ejbCreate.missing.description = \
	The entity bean {0} should implement one or more ejbCreate() methods
entitybean.ejbCreate.missing.explanation = \
	Entity beans like {0} should implement one or more ejbCreate() methods.<br>\
	See EJB 2.0 - 10.6.4 and 12.2.3.

	entitybean.ejbCreate.missing.recommendation.name = Recommendation...
	entitybean.ejbCreate.missing.recommendation.description = \
		Implement one or more ejbCreate() methods.

entitybean.noArgConstructor.missing.description = \
	The entity bean {0} should implement a no-argument constructor
entitybean.noArgConstructor.missing.explanation = \
	Entity beans like {0} should implement a no-argument constructor.<br>\
	See EJB 2.0 - 10.6.2 and 12.2.2.

	entitybean.noArgConstructor.missing.recommendation.name = Recommendation...
	entitybean.noArgConstructor.missing.recommendation.description = \
		Implement a no-argument constructor.

entitybean.ejbPostCreate.missing.description = \
	The entity bean should implement a matching ejbPostCreate() method 
entitybean.ejbPostCreate.missing.explanation = \
	Entity beans like should implement an ejbPostCreate() method \
	that matches each ejbCreate() method.<br>\
	See EJB 2.0 - 10.6.5 and 12.2.4.

	entitybean.ejbPostCreate.missing.recommendation.name = Recommendation...
	entitybean.ejbPostCreate.missing.recommendation.description = \
		Implement a ejbPostCreate() method for each ejbCreate() method.

entitybean.ejbPostCreate.notPublic.description = \
	The {0} method should be declared public
entitybean.ejbPostCreate.notPublic.explanation = \
	Entity beans should declare {0} methods as public.<br>\
	See EJB 2.0 - 10.6.5 and 12.2.4.

	entitybean.ejbPostCreate.notPublic.makePublic.name = Make public
	entitybean.ejbPostCreate.notPublic.makePublic.description = \
		Change the visibility of the method to be public.

entitybean.ejbPostCreate.static.description = \
	The {0} method should not be declared static
entitybean.ejbPostCreate.static.explanation = \
	Entity beans should not declare {0} methods as static.<br>\
	See EJB 2.0 - 10.6.5 and 12.2.4.

	entitybean.ejbPostCreate.static.removeStatic.name = Remove static
	entitybean.ejbPostCreate.static.removeStatic.description = \
		Remove the static modifier.

entitybean.ejbPostCreate.final.description = \
	The {0} method should not be declared final
entitybean.ejbPostCreate.final.explanation = \
	Entity beans should not declare {0} methods as final.<br>\
	See EJB 2.0 - 10.6.5 and 12.2.4.

	entitybean.ejbPostCreate.final.removeFinal.name = Remove final
	entitybean.ejbPostCreate.final.removeFinal.description = \
		Remove the final modifier.

entitybean.ejbPostCreate.notVoid.description = \
	The {0} method should be declared void
entitybean.ejbPostCreate.notVoid.explanation = \
	Entity beans should declare {0} methods to return void.<br>\
	See EJB 2.0 - 10.6.5 and 12.2.4.

	entitybean.ejbPostCreate.notVoid.recommendation.name = Recommendation...
	entitybean.ejbPostCreate.notVoid.recommendation.description = \
		Declare the method to return void.

entitybean.ejbPostCreate.noMatchParams.description = \
	The {0} method parameters do not match ejbCreate()
entitybean.ejbPostCreate.noMatchParams.explanation = \
	Entity beans should declare {0} methods with the same parameters \
	as their corresponding ejbCreate() methods.<br>\
	See EJB 2.0 - 10.6.5 and 12.2.4.

	entitybean.ejbPostCreate.noMatchParams.delete.name = Delete ejbPostCreate()
	entitybean.ejbPostCreate.noMatchParams.delete.description = \
		Delete the ejbPostCreate() method.

entitybean.ejbPostCreate.noMatchName.description = \
	The {0} method does not match any ejbCreate() method
entitybean.ejbPostCreate.noMatchName.explanation = \
	Entity beans should declare {0} methods with the same names \
	as their corresponding ejbCreate() methods.<br>\
	See EJB 2.0 - 10.6.5 and 12.2.4.

	entitybean.ejbPostCreate.noMatchName.delete.name = Delete ejbPostCreate()
	entitybean.ejbPostCreate.noMatchName.delete.description = \
		Delete the ejbPostCreate() method.

entitybean.ejbFind.notPublic.description = \
	The {0} method should be declared public
entitybean.ejbFind.notPublic.explanation = \
	Entity beans should declare {0} methods as public.<br>\
	See EJB 2.0 - 12.2.5.

	entitybean.ejbFind.notPublic.makePublic.name = Make public
	entitybean.ejbFind.notPublic.makePublic.description = \
		Change the visibility of the method to be public.

entitybean.ejbFind.static.description = \
	The {0} method should not be declared static
entitybean.ejbFind.static.explanation = \
	Entity beans should not declare {0} methods as static.<br>\
	See EJB 2.0 - 12.2.5.

	entitybean.ejbFind.static.removeStatic.name = Remove static
	entitybean.ejbFind.static.removeStatic.description = \
		Remove the static modifier.

entitybean.ejbFind.final.description = \
	The {0} method should not be declared final
entitybean.ejbFind.final.explanation = \
	Entity beans should not declare {0} methods as final.<br>\
	See EJB 2.0 - 12.2.5.

	entitybean.ejbFind.final.removeFinal.name = Remove final
	entitybean.ejbFind.final.removeFinal.description = \
		Remove the final modifier.

entitybean.ejbSelect.notPublic.description = \
	The {0} method should be declared public
entitybean.ejbSelect.notPublic.explanation = \
	Entity beans should declare {0} methods as public.<br>\
	See EJB 2.0 - 10.6.7.

	entitybean.ejbSelect.notPublic.makePublic.name = Make public
	entitybean.ejbSelect.notPublic.makePublic.description = \
		Change the visibility of the method to be public.

entitybean.ejbSelect.notAbstract.description = \
	The {0} method should be declared abstract
entitybean.ejbSelect.notAbstract.explanation = \
	Entity beans should declare {0} methods as abstract.<br>\
	See EJB 2.0 - 10.6.7.

	entitybean.ejbSelect.notAbstract.recommendation.name = Recommendation...
	entitybean.ejbSelect.notAbstract.recommendation.description = \
		Do not declare the method abstract.

entitybean.ejbSelect.noFinderException.description = \
	The {0} method should throw the javax.ejb.FinderException exception
entitybean.ejbSelect.noFinderException.explanation = \
	Entity beans should declare {0} methods to throw the \
	javax.ejb.FinderException exception.<br>\
	See EJB 2.0 - 10.6.7.

	entitybean.ejbSelect.noFinderException.recommendation.name = Recommendation...
	entitybean.ejbSelect.noFinderException.recommendation.description = \
		Declare the method to throw the javax.ejb.FinderException exception.

entitybean.ejbHome.notPublic.description = \
	The {0} method should be declared public
entitybean.ejbHome.notPublic.explanation = \
	Entity beans should declare {0} methods as public.<br>\
	See EJB 2.0 - 10.6.6 and 12.2.6.

	entitybean.ejbHome.notPublic.makePublic.name = Make public
	entitybean.ejbHome.notPublic.makePublic.description = \
		Change the visibility of the method to be public.

entitybean.ejbHome.static.description = \
	The {0} method should not be declared static
entitybean.ejbHome.static.explanation = \
	Entity beans should not declare {0} methods as static.<br>\
	See EJB 2.0 - 10.6.6 and 12.2.6.

	entitybean.ejbHome.static.removeStatic.name = Remove static
	entitybean.ejbHome.static.removeStatic.description = \
		Remove the static modifier.

entitybean.ejbHome.remoteException.description = \
	The {0} method should not throw the javax.ejb.RemoteException exception
entitybean.ejbHome.remoteException.explanation = \
	Entity beans should not declare {0} methods to throw the \
	javax.ejb.RemoteException exception.<br>\
	See EJB 2.0 - 10.6.6 and 12.2.6.

	entitybean.ejbHome.remoteException.recommendation.name = Recommendation...
	entitybean.ejbHome.remoteException.recommendation.description = \
		Declare the method to throw the javax.ejb.RemoteException exception.

################################################################################

entryPointMethod.name = Entry Point Method
entryPointMethod.longName = \
	Correctly define the main method
entryPointMethod.description = \
	<b>Summary</b>\
	<br/>\
	The main() method should be defined as "public static void \
	main(java.lang.String[])".\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds main() methods that are not defined as \
	"public static void main(java.lang.String[])". The main() method \
	should only be used as the entry point for a class.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following method would be flagged as a violation because it is not \
	declared to be a static method:\
	<p><code>\
	\tpublic void main(String[] args)<br>\
	\t{<br>\
	\t\t...<br>\
	\t}\
	</code>

entryPointMethod.main.description = \
	Define main() method as "public static void main(String[])"
entryPointMethod.main.explanation = \
	The main() method should only be used as the entry point for a class \
	and should be defined as "public static void main(java.lang.String[])".

	entryPointMethod.main.rename.name = Rename the method
	entryPointMethod.main.rename.description = \
		Rename the method.

################################################################################

enumeratedTypeNamingConvention.name = Enumerated Type Naming Convention
enumeratedTypeNamingConvention.longName = \
	Use the standard naming convention for enumerated types
enumeratedTypeNamingConvention.description = \
	<b>Summary</b>\
	<br/>\
	Enumerated type names should conform to the defined standard.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks the names of all enumerated types.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule were configured to require that all enumerated type names start \
	with a capital letter, the following declaration would be flagged as a \
	violation:\
	<p><code>\
	\tpublic enum response {stronglyAgree, agree, disagree, stringlyDisagree, noOpinion}\
	</code>

enumeratedTypeNamingConvention.invalidName.description = \
	Invalid enumerated type name: "{0}" {1}
enumeratedTypeNamingConvention.invalidName.explanation = \
	The enumerated type name "{0}" does not conform because it {1}.

	enumeratedTypeNamingConvention.invalidName.rename.name = Rename enumerated type to "{1}"
	enumeratedTypeNamingConvention.invalidName.rename.description = \
		Rename the enumerated type from "{0}" to "{1}".

################################################################################

enumerationConstantNamingConvention.name = Enumeration Constant Naming Convention
enumerationConstantNamingConvention.longName = \
	Use the standard naming convention for enumeration constants
enumerationConstantNamingConvention.description = \
	<b>Summary</b>\
	<br/>\
	Enumeration constant names should conform to the defined standard.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks the names of all enumeration constants.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule were configured to require that all enumeration constant names \
	start with a capital letter, the following declaration would be flagged as \
	a violation:\
	<p><code>\
	\tpublic enum response {stronglyAgree, agree, disagree, stringlyDisagree, noOpinion}\
	</code>

enumerationConstantNamingConvention.invalidName.description = \
	Invalid enumeration constant name: "{0}" {1}
enumerationConstantNamingConvention.invalidName.explanation = \
	The enumeration constant name "{0}" does not conform because it {1}.

	enumerationConstantNamingConvention.invalidName.rename.name = Rename enumeration constant to "{1}"
	enumerationConstantNamingConvention.invalidName.rename.description = \
		Rename the enumeration constant from "{0}" to "{1}".

################################################################################

environmentVariableAccess.name = Environment Variable Access
environmentVariableAccess.longName = \
	Don't access environment variables
environmentVariableAccess.description = \
	<b>Summary</b>\
	<br/>\
	Environment variables should not be accessed because not all platforms \
	have support for environment variables.\
	<p>\
	<b>Description</b>\
	<br/>\
	The method System.getenv() should not be used to access environment \
	variables because not all platforms have support for environment \
	variables. Properties should be used instead.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following invocation of the getenv() method would be flagged as a \
	violation:\
	<p><code>\
	\tSystem.getenv("PATH");\
	</code>

environmentVariableAccess.getenv.description = \
	Do not use System.getenv() to access environment variables
environmentVariableAccess.getenv.explanation = \
	The method System.getenv() should not be used to access environment \
	variables because not all platforms have support for environment variables.

	environmentVariableAccess.getenv.recommendation.name = Use system properties
	environmentVariableAccess.getenv.recommendation.description = \
		Use system properties instead of environment variables.

################################################################################

equalityTestWithBooleanLiteral.name = Equality Test with Boolean Literal
equalityTestWithBooleanLiteral.longName = \
	Don't use boolean literals in comparisons
equalityTestWithBooleanLiteral.description = \
	<b>Summary</b>\
	<br/>\
	Boolean literals should never be used in equality tests.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds equality tests (using either == or !=) in which \
	either or both of the operands are a Boolean literal (either true or \
	false).\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tif (todayIsTuesday() == true) {<br>\
	\t\t...<br>\
	\t}\
	</code>

equalityTestWithBooleanLiteral.equalFalse.description = \
	Equality test with boolean literal: false
equalityTestWithBooleanLiteral.equalFalse.explanation = \
	Comparing the result of an expression to the literal value "false" is not \
	necessary and usually makes the code harder to read. Consider negating the \
	expression and removing the equality test.

	equalityTestWithBooleanLiteral.equalFalse.remove.name = Remove the test
	equalityTestWithBooleanLiteral.equalFalse.remove.description = \
		Remove the comparison with false.

equalityTestWithBooleanLiteral.notEqualFalse.description = \
	Inequality test with boolean literal: false
equalityTestWithBooleanLiteral.notEqualFalse.explanation = \
	Comparing the result of an expression to the literal value "false" is not \
	necessary and usually makes the code harder to read. Consider removing the \
	inequality test.

	equalityTestWithBooleanLiteral.notEqualFalse.remove.name = Remove the test
	equalityTestWithBooleanLiteral.notEqualFalse.remove.description = \
		Remove the comparison with false.

equalityTestWithBooleanLiteral.equalTrue.description = \
	Equality test with boolean literal: true
equalityTestWithBooleanLiteral.equalTrue.explanation = \
	Comparing the result of an expression to the literal value "true" is not \
	necessary and usually makes the code harder to read. Consider removing the \
	equality test.

	equalityTestWithBooleanLiteral.equalTrue.remove.name = Remove the test
	equalityTestWithBooleanLiteral.equalTrue.remove.description = \
		Remove the comparison with true.

equalityTestWithBooleanLiteral.notEqualTrue.description = \
	Inequality test with boolean literal: true
equalityTestWithBooleanLiteral.notEqualTrue.explanation = \
	Comparing the result of an expression to the literal value "true" is not \
	necessary and usually makes the code harder to read. Consider negating the \
	expression and removing the inequality test.

	equalityTestWithBooleanLiteral.notEqualTrue.remove.name = Remove the test
	equalityTestWithBooleanLiteral.notEqualTrue.remove.description = \
		Remove the comparison with true.

################################################################################

exceptionCreation.name = Exception Creation
exceptionCreation.longName = \
	Create exceptions with as much information as possible
exceptionCreation.description = \
	<b>Summary</b>\
	<br/>\
	Exceptions should be created with as much information as possible.\
	<p>\
	<b>Description</b>\
	<br/>\
	When exceptions are created they should be given as much information as \
	possible, including a message and, when one is available, the exception \
	that caused the exception being created.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following exception creation would be flagged as a violation because \
	it does not specify a message:\
	<p><code>\
	\tthrow new CriticalApplicationException();\
	</code>

exceptionCreation.missingMessage.description = \
	No message specified when creating exception
exceptionCreation.missingMessage.explanation = \
	No message was specified when creating an instance of the exception class {0}.

	exceptionCreation.missingMessage.recommendation.name = Recommendation...
	exceptionCreation.missingMessage.recommendation.description = \
		Pass a message in when creating the exception.

exceptionCreation.missingCause.description = \
	No cause specified when creating exception
exceptionCreation.missingCause.explanation = \
	No cause was specified when creating an instance of the exception class {0}.

	exceptionCreation.missingCause.recommendation.name = Recommendation...
	exceptionCreation.missingCause.recommendation.description = \
		Pass a cause in when creating the exception (typically the exception \
		that was caught).

################################################################################

exceptionDeclaration.name = Exception Declaration
exceptionDeclaration.longName = \
	Only declare caught exceptions
exceptionDeclaration.description = \
	<b>Summary</b>\
	<br/>\
	Exceptions should be declared to inherit from Exception, but not from \
	either RuntimeException or RemoteException.\
	<p>\
	<b>Description</b>\
	<br/>\
	Exceptions should be declared to inherit from Exception, but not from \
	either RuntimeException or RemoteException.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following class declaration would be flagged as an error because it \
	extends RuntimeException:\
	<p><code>\
	\tpublic class MyException extends RuntimeException<br>\
	\t{<br>\
	\t}\
	</code>

exceptionDeclaration.invalidSuperclass.description = \
	Invalid superclass for exception class
exceptionDeclaration.invalidSuperclass.explanation = \
	The class {0} inherits from an invalid superclass.

	exceptionDeclaration.invalidSuperclass.recommendation.name = Recommendation...
	exceptionDeclaration.invalidSuperclass.recommendation.description = \
		Declare the exception class to be a subclass of Exception (but not of \
		either RuntimeException or RemoteException).

################################################################################

exceptionParameterNamingConvention.name = Exception Parameter Naming Convention
exceptionParameterNamingConvention.longName = \
	Use the standard naming convention for exception parameters
exceptionParameterNamingConvention.description = \
	<b>Summary</b>\
	<br/>\
	Exception parameter names should conform to the defined standard.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks the names of all exception parameters.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule were configured to only allow names of the form "e", \
	the following parameter would be flagged as a violation:\
	<p><code>\
	\tthrow {<br>\
	\t\t...<br>\
	\t} catch (Exception problem) {<br>\
	\t\t...<br>\
	\t}\
	</code>

exceptionParameterNamingConvention.invalidName.description = \
	Invalid exception parameter name: "{0}"
exceptionParameterNamingConvention.invalidName.explanation = \
	The exception parameter name "{0}" does not conform.

	exceptionParameterNamingConvention.invalidName.recommendation.name = Recommendation...
	exceptionParameterNamingConvention.invalidName.recommendation.description = \
		Rename the exception parameter.

################################################################################

explicitSubclassOfObject.name = Explicit Subclass of Object
explicitSubclassOfObject.longName = \
	Don't explicitly subclass Object
explicitSubclassOfObject.description = \
	<b>Summary</b>\
	<br/>\
	The class "Object" should not be explicit specified as a superclass.\
	<p>\
	<b>Description</b>\
	<br/>\
	Subclasses of Object should be declared implicitly by omitting the \
	"extends" clause, not explicitly by including "extends Object" in their \
	declaration.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following class declaration would be flagged as a violation:\
	<p><code>\
	\tpublic class Employee extends Object<br>\
	\t{<br>\
	\t\t...<br>\
	\t}\
	</code>

explicitSubclassOfObject.subclass.description = \
	Explicit subclass of Object
explicitSubclassOfObject.subclass.explanation = \
	The class {0} explicitly lists Object as its superclass.

	explicitSubclassOfObject.subclass.delete.name = Delete the "extends" clause
	explicitSubclassOfObject.subclass.delete.description = \
		Delete the "extends" clause from the type declaration.

################################################################################

explicitThisUsage.name = Explicit "this" Usage
explicitThisUsage.longName = \
	Be consistent in the use of "this"
explicitThisUsage.description = \
	<b>Summary</b>\
	<br/>\
	Instance fields should, or should not, be accessed using "this".\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for the explicit usage of the keyword "this" \
	when accessing instance fields. The rule can be configured to always \
	check for the presence or absence of the keyword.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule is configured to disallow using "this" to qualify fields \
	unless necessary, the following expression would be flagged as a \
	violation:\
	<p><code>\
	\tpublic void incrementCount(int amount)<br>\
	\t{<br>\
	\t\tthis.count += amount;<br>\
	\t}\
	</code>

explicitThisUsage.absent.description = \
	The keyword "this" is missing
explicitThisUsage.absent.explanation = \
	Field access should be explicitly referenced from "this"

	explicitThisUsage.absent.insert.name = Insert "this"
	explicitThisUsage.absent.insert.description = \
		Insert the keyword "this".

explicitThisUsage.present.description = \
	The keyword "this" is unnecessary
explicitThisUsage.present.explanation = \
	Field access does not need to explicitly reference "this"

	explicitThisUsage.present.delete.name = Delete "this"
	explicitThisUsage.present.delete.description = \
		Delete the keyword "this".

################################################################################

expressionHasNoEffect.name = Expression Has No Effect
expressionHasNoEffect.longName = \
	Expression Has No Effect
expressionHasNoEffect.description = \
	<b>Summary</b>\
	<br/>\
	Expressions that have no effect should be removed.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for expressions that have no effect. It finds the \
	following cases:<br>\
	\t1. Addition expressions in which either of the operands is zero.<br>\
	\t2. Subtraction expressions in which the right operand is zero.<br>\
	\t3. Multiplication expressions in which either of the operands is one.<br>\
	\t4. Division expressions in which the right operands is one.<br>\
	\t5. Remainder expressions in which the right operand is non-zero and the absolute \
	value of the left operand is known to be less than the absolute value of the right operand.<br>\
	\t6. Shift expressions in which the right operand is zero.<br>\
	\t7. Bitwise inclusive or exclusive OR expressions in which the right operand is zero. <br>\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\treturn value + 0;\
	</code>

expressionHasNoEffect.zero.description = \
	Zero in expression
expressionHasNoEffect.zero.explanation = \
	Zero in this expression does not do anything and should be deleted.
expressionHasNoEffect.one.description = \
	One in expression
expressionHasNoEffect.one.explanation = \
	One in this expression does not do anything and should be deleted.	

################################################################################

expressionValue.name = Expression Evaluation
expressionValue.longName = \
	Don't write expressions whose value is known at compile time
expressionValue.description = \
	<b>Summary</b>\
	<br/>\
	Expression evaluation.\
	<p>\
	<b>Description</b>\
	<br/>\
	This set of audit rules checks the value of expressions for certain \
	conditions. It detects constant and zero values, divide-by-zero, and \
	others.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following expression would be flagged as a violation because it always \
	produces the same value:\
	<p><code>\
	\tint secondsPerDay = 24 * 60 * 60;\
	</code><p>\
	The following expression would be flagged as a violation because it will \
	always cause a divide by zero exception:\
	<p><code>\
	\treturn 23 / 0;\
	</code>

expressionValue.zero.description = \
	Expression value is zero
expressionValue.zero.explanation = \
	Expression evaluation always produces the value zero

	expressionValue.zero.recommendation.name = Recommendation...
	expressionValue.zero.recommendation.description = \
		Check the expression logic and consider creating a static final constant.

expressionValue.constant.description = \
	Expression value is constant
expressionValue.constant.explanation = \
	Expression evaluation always produces a constant value

	expressionValue.constant.recommendation.name = Recommendation...
	expressionValue.constant.recommendation.description = \
		Check the expression logic and consider creating a static final constant.

expressionValue.divByZero.description = \
	Expression causes division by zero
expressionValue.divByZero.explanation = \
	Expression evaluation always causes division by zero

	expressionValue.divByZero.recommendation.name = Recommendation...
	expressionValue.divByZero.recommendation.description = \
		Check the expression logic and add appropriate guard code.

expressionValue.intOF.description = \
	Expression value causes integer overflow
expressionValue.intOF.explanation = \
	Expression evaluation always produces integer overflow

	expressionValue.intOF.recommendation.name = Recommendation...
	expressionValue.intOF.recommendation.description = \
		Check the expression logic and add appropriate guard code.

expressionValue.intUF.description = \
	Expression value causes integer underflow
expressionValue.intUF.explanation = \
	Expression evaluation always produces integer underflow

	expressionValue.intUF.recommendation.name = Recommendation...
	expressionValue.intUF.recommendation.description = \
		Check the expression logic and add appropriate guard code.

expressionValue.fpInf.description = \
	Expression value is floating-point infinity
expressionValue.fpInf.explanation = \
	Expression evaluation always produces floating-point infinity

	expressionValue.fpInf.recommendation.name = Recommendation...
	expressionValue.fpInf.recommendation.description = \
		Check the expression logic and add appropriate guard code.

expressionValue.fpNaN.description = \
	Expression value is floating-point NaN
expressionValue.fpNaN.explanation = \
	Expression evaluation always produces floating-point NaN

	expressionValue.fpNaN.recommendation.name = Recommendation...
	expressionValue.fpNaN.recommendation.description = \
		Check the expression logic and add appropriate guard code.

################################################################################

extraSemicolon.name = Extra Semicolon
extraSemicolon.longName = \
	Remove extraneous semicolons
extraSemicolon.description = \
	<b>Summary</b>\
	<br/>\
	Extra semicolons clutter the code and serve no useful purpose.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds places where a semicolon occurs but is not needed. \
	While not strictly an error, such semicolons clutter the code and serve no \
	useful purpose.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\twhile (index &lt; count) {<br>\
	\t\tindex = index + 1;;<br>\
	\t};\
	</code>

extraSemicolon.extra.description = \
	Extra semicolon
extraSemicolon.extra.explanation = \
	The existence of an extra semicolon clutters the code and serve no useful \
	purpose.

	extraSemicolon.extra.delete.name = Delete extra semicolon
	extraSemicolon.extra.delete.description = \
		Delete the extra semicolon.

################################################################################

failInvokedInCatch.name = Fail Invoked in Catch
failInvokedInCatch.longName = \
	Don't catch exceptions in order to explicitly fail
failInvokedInCatch.description = \
	<b>Summary</b>\
	<br/>\
	Exceptions representing failure should not be caught.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for test methods that catch exceptions in order \
	to cause the test to fail by invoking one of the fail() methods. It is \
	not necessary to catch the exception because uncaught exceptions will \
	automatically cause the test to fail.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following invocation of the fail() method would be flagged as a \
	violation because it occurs within a catch block:\
	<p><code>\
	\ttry {<br>\
	\t\t...<br>\
	\t} catch (Exception exception) {<br>\
	\t\tfail("exception thrown");<br>\
	\t}\
	</code>

failInvokedInCatch.invoked.description = \
	Fail invoked in catch block
failInvokedInCatch.invoked.explanation = \
	One of the fail methods was invoked in catch block.

	failInvokedInCatch.invoked.recommendation.name = Recommendation...
	failInvokedInCatch.invoked.recommendation.description = \
		Remove the catch clause and let the exception cause the test to \
		fail directly.

################################################################################

favorStaticMemberClassesOverNonStatic.name = Favor Static Member Classes over Non-Static
favorStaticMemberClassesOverNonStatic.longName = \
	Define member classes as static when possible
favorStaticMemberClassesOverNonStatic.description = \
	<b>Summary</b>\
	<br/>\
	Member classes should be defined as static classes when possible.\
	<p>\
	<b>Description</b>\
	<br/>\
	This rule identifies member classes that are not defined as static classes \
	but that could possibly be defined as such.

favorStaticMemberClassesOverNonStatic.nonStaticMemberClass.description = \
	The member class {0} is not static
favorStaticMemberClassesOverNonStatic.nonStaticMemberClass.explanation = \
	Member classes that do not require access to the enclosing instance should \
	be declared static.

	favorStaticMemberClassesOverNonStatic.nonStaticMemberClass.recommendation.name = Recommendation...
	favorStaticMemberClassesOverNonStatic.nonStaticMemberClass.recommendation.description = \
		Define {0} to be a static member class.

################################################################################

fieldJavadoc.name = Field Javadoc Conventions
fieldJavadoc.longName = \
	All fields should have a correct Javadoc comment
fieldJavadoc.description = \
	<b>Summary</b>\
	<br/>\
	All fields should have a Javadoc comment associated with them.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for the existence of a Javadoc comment for each \
	field. It can be configured to only flag fields with the specified \
	visibilities.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following field declaration would be flagged as a violation because \
	it does not have a Javadoc comment associated with it:\
	<p><code>\
	\tprivate String name;\
	</code>

fieldJavadoc.missing.description = \
	Missing Javadoc comment for field
fieldJavadoc.missing.explanation = \
	The field should have a Javadoc comment.

	fieldJavadoc.missing.repair.name = Add missing field Javadoc
	fieldJavadoc.missing.repair.description = \
		Run the Javadoc Repair tool on this field to add missing field Javadoc.

fieldJavadoc.duplicateDeprecated.description = \
	Duplicated @deprecated tag in Javadoc comment for field
fieldJavadoc.duplicateDeprecated.explanation = \
	The field should have at most one @deprecated tag in its Javadoc comment.

	fieldJavadoc.duplicateDeprecated.repair.name = Remove duplicate tag
	fieldJavadoc.duplicateDeprecated.repair.description = \
		Run the Javadoc Repair tool on this field to remove the duplicate tag.

fieldJavadoc.emptyDeprecated.description = \
	Empty @deprecated tag in Javadoc comment for field
fieldJavadoc.emptyDeprecated.explanation = \
	The @deprecated tag should have text describing when the field was \
	deprecated and what to use in its place.

	fieldJavadoc.emptyDeprecated.repair.name = Add description
	fieldJavadoc.emptyDeprecated.repair.description = \
		Run the Javadoc Repair tool on this field to add text to the \
		@deprecated tag.

fieldJavadoc.unknown.description = \
	Unknown tag in Javadoc comment for field
fieldJavadoc.unknown.explanation = \
	Only the standard tags should be included in Javadoc comments.

	fieldJavadoc.unknown.repair.name = Remove unknown tag
	fieldJavadoc.unknown.repair.description = \
		Run the Javadoc Repair tool on this field to remove the unknown tag.

################################################################################

fieldOnlyUsedInInnerClass.name = Field Only Used in Inner Class
fieldOnlyUsedInInnerClass.longName = Instance field only used in inner class
fieldOnlyUsedInInnerClass.description = \
	<b>Summary</b>\
	<br/>\
	Instance fields that are only used in an inner class should be defined in \
	the inner class.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for private instance fields that are only being used \
	within a single inner class. There are valid reasons for structuring code \
	this way, such as when the lifetime of the field needs to be longer than \
	the lifetime of instances of the inner class or when the field needs to be \
	shared by some (but not all) of the instances of the inner class. \
	Generally, however, such fields should be declared by the inner class.

fieldOnlyUsedInInnerClass.localizeField.description = \
	The field {0} is only used within the inner class {1}
fieldOnlyUsedInInnerClass.localizeField.explanation = \
	The field may be defined in the inner class unless the value needs to be \
	visible beyond the scope of a single instance.

	fieldOnlyUsedInInnerClass.localizeField.recommendation.name = Recommendation...
	fieldOnlyUsedInInnerClass.localizeField.recommendation.description = \
		Consider moving the field definition to the inner class.

################################################################################

fileComment.name = File Comment
fileComment.longName = \
	All compilation units should have a file comment
fileComment.description = \
	<b>Summary</b>\
	<br/>\
	Compilation units should have a file comment.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds compilation units that do not have a comment \
	as the first element in the file.\
	<p>\
	<b>Example</b>\
	<br/>\
	A file that begins with a package statement would be flagged as a \
	violation because a comment is expected to appear before anything else.

fileComment.missing.description = \
	Missing file comment
fileComment.missing.explanation = \
	The compilation unit does not have a comment as the first element in the \
	file.

	fileComment.missing.recommendation.name = Recommendation...
	fileComment.missing.recommendation.description = \
		Add the missing file comment.

fileComment.missingFixed.description = \
	Missing file comment
fileComment.missingFixed.explanation = \
	The compilation unit does not have a comment as the first element in the \
	file.

	fileComment.missingFixed.insert.name = Add the standard comment
	fileComment.missingFixed.insert.description = \
		Add the standard file comment.

################################################################################

fileLength.name = File Length
fileLength.longName = \
	Compilation units should be reasonably short
fileLength.description = \
	<b>Summary</b>\
	<br/>\
	Compilation units should not be too long.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds compilation units that are longer than a specified \
	number of lines.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule is configured to allow files of up to 40,000 lines, a file \
	containing 100,000 lines of code would be flagged as a violation.

fileLength.tooManyLines.description = \
	File contains {1} lines, should be less than {0} lines
fileLength.tooManyLines.explanation = \
	Files should be smaller than {0} lines because long files are harder to \
	understand. This file contains {1} lines. Consider moving some of the \
	functionality in this file into other files, possibly other types.

	fileLength.tooManyLines.recommendation.name = Recommendation...
	fileLength.tooManyLines.recommendation.description = \
		Move some of the functionality in this file into other files.

################################################################################

finalizeMethodDefinition.name = Finalize Method Definition
finalizeMethodDefinition.longName = \
	Finalize methods should not have parameters or a non-void return type
finalizeMethodDefinition.description = \
	<b>Summary</b>\
	<br/>\
	Finalize methods should not have parameters or a non-void return type.\
	<p>\
	<b>Description</b>\
	<br/>\
	The only way to declare a finalize method is\
	<p><code>\
	\tprotected void finalize() [throws Throwable]\
	</code><p>\
	You can create other finalize methods that take parameters, but they \
	will not be called automatically by the system, and may confuse anyone \
	reading the code. You should reserve the name finalize for the real \
	finalize method. This audit rule finds finalize() methods that have \
	parameters or do not have a void return type.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following method declaration would be flagged as a violation because \
	the method returns an integer:\
	<p><code>\
	\tprotected int finalize()<br>\
	\t{<br>\
	\t\t...<br>\
	\t}\
	</code>

finalizeMethodDefinition.hasParameters.description = \
	Finalize methods should not have parameters
finalizeMethodDefinition.hasParameters.explanation = \
	The only way to declare a finalize method is protected void finalize() \
	[throws Throwable]. You can create other finalize methods that take \
	parameters, but they will not be called automatically by the system, and \
	may confuse anyone reading the code. You should reserve the name finalize \
	for the real finalize method.

	finalizeMethodDefinition.hasParameters.modifyParameters.name = Modify Parameters
	finalizeMethodDefinition.hasParameters.modifyParameters.description = \
		Remove the additional parameters from the method.

	finalizeMethodDefinition.hasParameters.renameMethod.name = Rename Method
	finalizeMethodDefinition.hasParameters.renameMethod.description = \
		Rename the method.

finalizeMethodDefinition.returnNotVoid.description = \
	Finalize methods should have a void return type
finalizeMethodDefinition.returnNotVoid.explanation = \
	The only way to declare a finalize method is protected void finalize() \
	[throws Throwable]. You can create other finalize methods that do not have \
	void return types, but they will not be called automatically by the \
	system, and may confuse anyone reading the code. You should reserve the \
	name finalize for the real finalize method.

	finalizeMethodDefinition.returnNotVoid.recommendation.name = Recommendation...
	finalizeMethodDefinition.returnNotVoid.recommendation.description = \
		Declare the method to return void or rename the method.

finalizeMethodDefinition.avoidPublic.description = \
	Finalize methods should not be public
finalizeMethodDefinition.avoidPublic.explanation = \
	The best way to declare a finalize method is protected void finalize() \
	[throws Throwable]. You can increase the visibility of the finalize method \
	but this is error prone and unnecessary because the finalize method should \
	never be invoked except by the Java virtual machine.

	finalizeMethodDefinition.avoidPublic.replaceModifier.name = Make protected
	finalizeMethodDefinition.avoidPublic.replaceModifier.description = \
		Declare the finalize() method as protected.

################################################################################

finalizeShouldNotBePublic.name = Finalize Should Not Be Public
finalizeShouldNotBePublic.longName = \
	Finalize methods declared within an Applet should not be public
finalizeShouldNotBePublic.description = \
	<b>Summary</b>\
	<br/>\
	Finalize methods declared within an Applet should not be public\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule flags any declarations of the Object.finalize that are \
	public and within an Applet. If the finalize method is declared properly, \
	then the method should not need to be public.\
	<p>\
	<b>Security Implications</b>\
	<br/>\
	Malicious users can perform attacks on Applets by calling public finalize \
	methods.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following declaration of finalize would be flagged:\
	<p><code>\
	\tclass A extends java.applet.Applet {<br>\
	\t\tpublic void finalize() {}<br>\
	\t}\
	</code>

finalizeShouldNotBePublic.publicFinalizer.description = \
	Do not declare finalize as public
finalizeShouldNotBePublic.publicFinalizer.explanation = \
	Public finalize methods allow malicious users to call the finalize method \
	in some contexts this can be a security risk.

	finalizeShouldNotBePublic.publicFinalizer.recommendation.name = Recommendation...
	finalizeShouldNotBePublic.publicFinalizer.recommendation.description = \
		Declare the method as protected.

################################################################################

finalMethodParameterInInterface.name = Final Method Parameter In Interface
finalMethodParameterInInterface.longName = \
	Method parameters in interfaces should not be final
finalMethodParameterInInterface.description = \
	<b>Summary</b>\
	<br/>\
	Method parameters in interfaces should not be final.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule flags any final method parameters defined in interfaces. \
	It is unnecessary to mark an interface methods's parameters as final, since \
	there is no implementation associated with an interface, and making a \
	parameter final only affects the implementation.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following declaration of the final parameters a and b would be flagged:\
	<p><code>\
	\tinterface foo {<br/>\
	\t\tpublic void add(final int a, final int b);<br/>\
	\t}\
	</code>

finalMethodParameterInInterface.finalParam.description = \
	Final parameter declared in interface
finalMethodParameterInInterface.finalParam.explanation = \
	Interfaces should not declare final parameters, since the final modifier is \
	an implementation detail.

	finalMethodParameterInInterface.finalParam.fix.name = \
		Remove "final".
	finalMethodParameterInInterface.finalParam.fix.description = \
		Remove the final modifier.

################################################################################

floatComparison.name = Float Comparison
floatComparison.longName = \
	Don't use the equal and not equal operators to compare floats
floatComparison.description = \
	<b>Summary</b>\
	<br/>\
	Floating-point values should not be compared using equals (==) or \
	not equals (!=).\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds places where two floating-point values are compared \
	using either the equals (==) or not equals (!=) operators. The problem is \
	that floating-point values are not exact, and floating-point operations \
	sometimes introduce rounding errors. This sometimes results in getting \
	the wrong result from equality-based comparisons.\
	<p>\
	<b>Example</b>\
	<br/>\
	Given two floating point variables:\
	<p><code>\
	\tdouble oneThird = 1.0 / 3.0;<br>\
	\tdouble anotherThird = (2.0 / 3.0) - oneThird;\
	</code><p>\
	The following expression would be flagged as a violation:\
	<p><code>\
	\tif (oneThird == anotherThird)\
	</code>

floatComparison.invalid.description = \
	Cannot compare floating-point values using the {0} operator
floatComparison.invalid.explanation = \
	Comparing floating-point values by using either the equality (==) or \
	inequality (!=) operators is not always accurate because of rounding errors.

	floatComparison.invalid.recommendation.name = Recommendation...
	floatComparison.invalid.recommendation.description = \
		Compare the two float values to see if they are close in value.

################################################################################

floatingPointUse.name = Floating Point Use
floatingPointUse.longName = \
	Floating point values should not be used
floatingPointUse.description = \
	<b>Summary</b>\
	<br/>\
	Floating point values should not be used.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for uses of floating point values. It finds such \
	uses as the declared type of variables, the return type of methods, literal \
	values, references to floating point valued variables, and the invocation \
	of methods that return floating point values. Floating point values should \
	rarely be used because of the potential for rounding errors.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following declaration would be flagged as a violation:\
	<p><code>\
	\tprivate float accountBalance;\
	</code>

floatingPointUse.literal.description = \
	Floating point literal
floatingPointUse.literal.explanation = \
	Don''t use floating point literals.

	floatingPointUse.literal.recommendation.name = Recommendation...
	floatingPointUse.literal.recommendation.description = \
		Use some other representation of the value that doesn''t have rounding \
		issues.

floatingPointUse.returnType.description = \
	Method with floating point return type
floatingPointUse.returnType.explanation = \
	Methods should not be declared to return floating point values.

	floatingPointUse.returnType.recommendation.name = Recommendation...
	floatingPointUse.returnType.recommendation.description = \
		Use some other representation of the value that doesn''t have rounding \
		issues.

floatingPointUse.declaration.description = \
	Variable declaration with floating point type
floatingPointUse.declaration.explanation = \
	Variables should not be declared to have a floating point type.

	floatingPointUse.declaration.recommendation.name = Recommendation...
	floatingPointUse.declaration.recommendation.description = \
		Use some other representation of the value that doesn''t have rounding \
		issues.

floatingPointUse.variable.description = \
	Referenced variable with floating point type
floatingPointUse.variable.explanation = \
	Variables with a floating point type should not be referenced.

	floatingPointUse.variable.recommendation.name = Recommendation...
	floatingPointUse.variable.recommendation.description = \
		Use some other representation of the value that doesn''t have rounding \
		issues.

floatingPointUse.invocation.description = \
	Invocation of method with floating point value
floatingPointUse.invocation.explanation = \
	Methods that return a floating point value should not be invoked.

	floatingPointUse.invocation.recommendation.name = Recommendation...
	floatingPointUse.invocation.recommendation.description = \
		Use some other representation of the value that doesn''t have rounding \
		issues.

floatingPointUse.instanceCreation.description = \
	Creation of wrapper object for floating point values
floatingPointUse.instanceCreation.explanation = \
	Do not create objects that represent floating point values.

	floatingPointUse.instanceCreation.recommendation.name = Recommendation...
	floatingPointUse.instanceCreation.recommendation.description = \
		Use some other representation of the value that doesn''t have rounding \
		issues.

floatingPointUse.arrayCreation.description = \
	Creation of array of floating point values
floatingPointUse.arrayCreation.explanation = \
	Do not create arrays of floating point values.

	floatingPointUse.arrayCreation.recommendation.name = Recommendation...
	floatingPointUse.arrayCreation.recommendation.description = \
		Use some other representation of the value that doesn''t have rounding \
		issues.

################################################################################

fullyParenthesizeExpressions.name = Fully Parenthesize Expressions
fullyParenthesizeExpressions.longName = \
	All nested expressions should be fully parenthesized
fullyParenthesizeExpressions.description = \
	<b>Summary</b>\
	<br/>\
	All nested expressions should be fully parenthesized.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for nested binary expressions that are not fully \
	parenthesized and flags them.\
	<p>\
	<b>Example</b>\
	<br/>\
	The two multiplication expressions in the statement below should each be \
	parenthesized to make clear the order of precedence:\
	<p><code>\
	\tresult = x * x + y * y;\
	</code>

fullyParenthesizeExpressions.needsParentheses.description = \
	Expression needs parentheses
fullyParenthesizeExpressions.needsParentheses.explanation = \
	The inner expression needs to be parenthesized in order to make clear the \
	order of precedence.

	fullyParenthesizeExpressions.needsParentheses.addParentheses.name = Add Parentheses
	fullyParenthesizeExpressions.needsParentheses.addParentheses.description = \
		Enclose the expression in parentheses.

################################################################################

handleNumericParsingErrors.name = Handle Numeric Parsing Errors
handleNumericParsingErrors.longName = \
	Numeric parsing errors should be handled
handleNumericParsingErrors.description = \
	<b>Summary</b>\
	<br/>\
	Numeric parsing errors should be handled where they occur.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds invocations of methods that parse numeric values \
	from Strings (and hence can throw a NumberFormatException) where the \
	exception is not handled (caught) in the same scope.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following invocation of parseInt would be flagged because it is not \
	wrapped in a try statement that catches NumberFormatException:\
	<p><code>\
	\tint value = Integer.parseInt("42");\
	</code>

handleNumericParsingErrors.unhandled.description = \
	Unhandled paring error
handleNumericParsingErrors.unhandled.explanation = \
	The exception NumberFormatException should always be caught.

	handleNumericParsingErrors.unhandled.recommendation.name = Recommendation...
	handleNumericParsingErrors.unhandled.recommendation.description = \
		Catch the exception.

################################################################################

hardcodedPassword.name = Hardcoded Password
hardcodedPassword.longName = \
	Passwords should not be hardcoded
hardcodedPassword.description = \
	<b>Summary</b>\
	<br/>\
	Passwords should not be hardcoded.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule violates any instance where a hardcoded password is passed \
	to <code>java.util.Properties</code> or <code>java.sql.DriverManager</code>. If a such a password is \
	found, and it is also empty, a violation is thrown to create a password.\
	<p>\
	<b>Security Implications</b>\
	<br/>\
	When a password is hardcoded in an application, not only can other \
	developers see the password, but the password can also be extracted from \
	the java byte code.\
	<p>\
	<b>Example</b>\
	<br/>\
	The line "properties.setProperty("password", "somePassword");" would be \
	flagged as "somePassword" is a hardcoded password.\
	<p><code>\
	\tProperties properties = new Properties();<br>\
	\tproperties.setProperty("user", "someUserName");<br>\
	\tproperties.setProperty("password", "somePassword");<br>\
	\tDriverManager.getConnection(..., properties);\
	</code>

hardcodedPassword.password.description = \
	Hardcoded password found
hardcodedPassword.password.explanation = \
	Passwords should not be hardcoded.

	hardcodedPassword.password.recommendation.name = Recommendation...
	hardcodedPassword.password.recommendation.description = \
		Do not hard-code this password into the source.

hardcodedPassword.emptyPassword.description = \
	Empty hardcoded password found
hardcodedPassword.emptyPassword.explanation = \
	Passwords should not be empty, require a password when possible.

	hardcodedPassword.emptyPassword.recommendation.name = Recommendation...
	hardcodedPassword.emptyPassword.recommendation.description = \
		Require a password to access this data source.

################################################################################

hidingInheritedFields.name = Hiding Inherited Fields
hidingInheritedFields.longName = \
	Don't hide inherited fields
hidingInheritedFields.description = \
	<b>Summary</b>\
	<br/>\
	Inherited fields should not be hidden.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds fields that hide inherited fields. That is, it \
	finds fields that have the same name as a visible field from a superclass. \
	Note that private fields are not visible in subclasses, so declarations of \
	fields with the same name as a private field declared in a superclass are \
	not flagged.\
	<p>\
	<b>Example</b>\
	<br/>\
	Given a class declaration like the following:\
	<p><code>\
	\tpublic class Person<br>\
	\t{<br>\
	\t\tprotected String name;<br>\
	\t\t...<br>\
	\t}\
	</code><p>\
	The field declaration in the following class declaration would be flagged \
	as a violation:\
	<p><code>\
	\tpublic class Employee extends Person<br>\
	\t{<br>\
	\t\tprotected String name;<br>\
	\t\t...<br>\
	\t}\
	</code>

hidingInheritedFields.hiddenField.description = \
	Field hides field inherited from {0}
hidingInheritedFields.hiddenField.explanation = \
	The field {1} hides a field with the same name declared in the class {0}. \
	Consider renaming one of the fields to reduce the possibility of confusion.

	hidingInheritedFields.hiddenField.delete.name = Delete field
	hidingInheritedFields.hiddenField.delete.description = \
		Delete the field.

	hidingInheritedFields.hiddenField.rename.name = Rename hiding field
	hidingInheritedFields.hiddenField.rename.description = \
		Rename the field that is hiding the inherited field.

################################################################################

hidingInheritedStaticMethods.name = Hiding Inherited Static Methods
hidingInheritedStaticMethods.longName = \
	Don't hide inherited static methods
hidingInheritedStaticMethods.description = \
	<b>Summary</b>\
	<br/>\
	Inherited static methods should not be hidden.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds methods that hide inherited static methods. That \
	is, it finds methods that have the same name and compatible argument \
	types as a static method from a superclass. The problem with defining \
	methods like this is that it is too easy to miss the fact that the \
	methods are static and that the subclasses method therefore does not \
	override the method from the superclass.\
	<p>\
	<b>Example</b>\
	<br/>\
	Given a class declaration like the following:\
	<p><code>\
	\tpublic class Person<br>\
	\t{<br>\
	\t\tpublic static Person newNamed(String name)<br>\
	\t\t{<br>\
	\t\t\t...<br>\
	\t\t}<br>\
	\t\t...<br>\
	\t}\
	</code><p>\
	The method declaration in the following class declaration would be flagged \
	as a violation:\
	<p><code>\
	\tpublic class Employee extends Person<br>\
	\t{<br>\
	\t\tpublic static Person newNamed(String name)<br>\
	\t\t{<br>\
	\t\t\t...<br>\
	\t\t}<br>\
	\t\t...<br>\
	\t}\
	</code>

hidingInheritedStaticMethods.hiddenStaticMethod.description = \
	Method hides static method inherited from {0}
hidingInheritedStaticMethods.hiddenStaticMethod.explanation = \
	The method {1} hides a static method with the same name declared in the \
	class {0}. Consider renaming one of the methods to reduce the possibility \
	of confusion.

	hidingInheritedStaticMethods.hiddenStaticMethod.delete.name = Delete field
	hidingInheritedStaticMethods.hiddenStaticMethod.delete.description = \
		Delete the field.

	hidingInheritedStaticMethods.hiddenStaticMethod.rename.name = Rename hiding method
	hidingInheritedStaticMethods.hiddenStaticMethod.rename.description = \
		Rename the method that is hiding the inherited method

################################################################################

httpResponseSplitting.name = HTTP Response Splitting
httpResponseSplitting.longName = \
	Possible HTTP Response Splitting vulnerabilities should be prevented
httpResponseSplitting.description = \
	<b>Summary</b>\
	<br/>\
	User input might be getting input directly into a HTTP response.\
	<p>\
	<b>Description</b>\
	<br/>\
	HTTP Response Splitting occurs when the user is able to enter data directly \
	into an HTTP response.\
	<p>\
	To detect violations, this audit rule searches the code for \
	statements such as <code>HTTPServletResponse.sendRedirect(..)</code> \
	and traces where the redirection data could have come from. In cases where the \
	source of the redirect location is user input, such as data from a servlet request, \
	<code>javax.servlet.ServletRequest.getParameter(java.lang.String)</code>, \
	a violation is created.\
	<p>\
	These two sets of methods, the locations where tainted user data can come \
	from and the HTTP response methods, are editable \
	by the user. Note, the Cookie constructor is included since HTTP responses \
	can include Cookie information through the \
	<code>HttpServletResponse.addCookie(..)</code> method. If methods are \
	missing that are in a common package (such as <code>java.lang.*</code>), \
	please let CodePro support know.\
	<p>\
	Finally, cleaning methods such as \
	<code>HttpServletResponse.encodeRedirectURL(String)</code>, are taken into \
	account and thus if user input is cleaned, it won't get flagged when \
	passed to a HTTP response.\
	<p>\
	<b>Security Implications</b>\
	<br/>\
	By having direct access to enter data directly into an HTTP response, a \
	malicious user could potentially split the response by including a carriage \
	return or a line feed, which can lead to a number of vulnerabilities.\
	<p>\
	<b>Example</b>\
	<br/>\
	The invocation of the method <code>sendRedirect(..)</code> would be flagged \
	as a violation since it puts the first name information passed from a \
	servlet request directly into a HTTP response:\
	<p><code>\
	\tServletRequest servletRequest = ...;<br>\
	\tHttpServletResponse httpServletResponse = ...;<br>\
	\t<br>\
	\tString firstName = servletRequest.getParameter("firstName");<br>\
	\thttpServletResponse.sendRedirect(firstName);\
	</code>

httpResponseSplitting.injection.description = \
	HTTP Response Splitting
httpResponseSplitting.injection.explanation = \
	The data path below was found as a potential HTTP Response Splitting scenario. \
	The top of the path shows where the potentially harmful user data could be \
	put into a HTTP response. The bottom location in the path shows where the \
	user data originates.\
	<p>\
	{0}

	httpResponseSplitting.injection.recommendation.name = Recommendation...
	httpResponseSplitting.injection.recommendation.description = \
		User data should never directly be put into a HTTP response, the \
		path should be eliminated.

httpResponseSplitting.stackDepth.description = \
	HTTP Response Splitting risk: path too long
httpResponseSplitting.stackDepth.explanation = \
	While tracing the sources of data input into HTTP responses, the data path \
	below was found. While it does not terminate at a point where user input \
	could be printed, it is too long to not be considered a potential \
	HTTP Response Splitting risk. The following path is too long to be secure:\
	<p>\
	{0}

	httpResponseSplitting.stackDepth.recommendation.name = Recommendation...
	httpResponseSplitting.stackDepth.recommendation.description = \
		To minimize the risk of HTTP Response Splitting, input into HTTP \
		responses should be executed as locally as possible. Make the code more \
		secure by reducing the scope to this HTTP response method.

httpResponseSplitting.largeFan.description = \
	HTTP Response Splitting risk: too many sources
httpResponseSplitting.largeFan.explanation = \
	While tracing the sources of data input into HTTP responses, the data path \
	below was found. While it does not terminate at a point where user input \
	could be printed, it has too many sources to not be considered a potential \
	HTTP Response Splitting risk.\
	<p>\
	{0}\
	<p>\
	The locations after this data path where it branches off are as follows:\
	<p>\
	{1}

	httpResponseSplitting.largeFan.recommendation.name = Recommendation...
	httpResponseSplitting.largeFan.recommendation.description = \
		To minimize the risk of HTTP Response Splitting, input into HTTP \
		responses printing should be executed as locally as possible. Make the \
		code more secure by reducing the number of possible paths into this \
		HTTP response method.

################################################################################

illegalMainMethod.name = Illegal Main Method
illegalMainMethod.longName = \
	A main method should only be declared in application classes
illegalMainMethod.description = \
	<b>Summary</b>\
	<br/>\
	A main method should only be declared in application classes.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for declarations of a main method occurring in \
	non-application classes. This is most commonly done in order to write \
	testing code, but testing code should be written in a test case.

illegalMainMethod.declared.description = \
	Main method declared
illegalMainMethod.declared.explanation = \
	A main method has been declared in the non-application class {0}.

	illegalMainMethod.declared.delete.name = Delete Method
	illegalMainMethod.declared.delete.description = \
		Delete the method.

################################################################################

implementIterable.name = Implement Iterable
implementIterable.longName = \
	Classes which define an iterator() method should implement Iterable
implementIterable.description = \
	<b>Summary</b>\
	<br/>\
	Classes which define an <code>iterator()</code> method should implement Iterable.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for classes which define an <code>iterator()</code> method,\
	but do not implement the <code>Iterable</code> interface. Implementing this interface \
	allows the class to be used in an enhanced for loop. In these cases, it takes no extra \
	effort to implement <code>Iterable</code>.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following class declaration would be flagged as a violation:\
	<p><code>\
	\tpublic class Foo<br>\
	\t{<br>\
	\t\tpublic Iterator iterator() {...}<br>\
	\t}\
	</code>
	

# {0} The class name
# {1} The interface that should be implemented
# {2} The interface that should be implemented (angle brackets escaped)

implementIterable.couldImplement.description = \
	Class should implement {1}
implementIterable.couldImplement.explanation = \
	The class <code>{0}</code> contains all methods necessary to implement <code>{2}</code>.

# {0} The class name
# {1} The interface that should be implemented (angle brackets escaped)

#	implementIterable.couldImplement.recommendation.name = Recommendation...
#	implementIterable.couldImplement.recommendation.description = \
#		Implement the interface <code>{1}</code> in the class <code>{0}</code>.
#		
	implementIterable.couldImplement.implement.name = Implement Iterable
	implementIterable.couldImplement.implement.description = \
		Make this class implement {1}.

################################################################################

implicitSubclassOfObject.name = Implicit Subclass of Object
implicitSubclassOfObject.longName = \
	Be explicit when subclassing Object
implicitSubclassOfObject.description = \
	<b>Summary</b>\
	<br/>\
	The class "Object" should be explicit specified as a superclass.\
	<p>\
	<b>Description</b>\
	<br/>\
	Subclasses of Object should be declared explicitly by including "extends \
	Object" in their declaration, not implicitly by omitting the "extends" \
	clause.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following class declaration would be flagged as a violation:\
	<p><code>\
	\tpublic class Employee<br>\
	\t{<br>\
	\t\t...<br>\
	\t}\
	</code>

implicitSubclassOfObject.subclass.description = \
	Implicit subclass of Object
implicitSubclassOfObject.subclass.explanation = \
	The class {0} implicitly inherits from Object.

	implicitSubclassOfObject.subclass.insert.name = Insert the "extends" clause
	implicitSubclassOfObject.subclass.insert.description = \
		Insert an "extends" clause in the type declaration.

################################################################################

importOfImplicitPackage.name = Import of Implicit Package
importOfImplicitPackage.longName = \
	Don't explicitly import implicitly imported packages
importOfImplicitPackage.description = \
	<b>Summary</b>\
	<br/>\
	Packages that are implicitly imported should never be explicitly \
	imported.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks to ensure that none of the import declarations \
	imports from a package that is implicitly imported (either java.lang or \
	the package containing the compilation unit being audited).\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\timport java.lang.*;\
	</code>

importOfImplicitPackage.demandImport.description = \
	Explicit import of "{0}"
importOfImplicitPackage.demandImport.explanation = \
	The package "{0}" is implicitly imported into this compilation unit, so \
	the explicit import of it should be removed.

	importOfImplicitPackage.demandImport.delete.name = Delete import
	importOfImplicitPackage.demandImport.delete.description = \
		Delete the import.

importOfImplicitPackage.typeImport.description = \
	Explicit import of type from "{0}": "{1}"
importOfImplicitPackage.typeImport.explanation = \
	The package "{0}" is implicitly imported into this compilation unit, so \
	the explicit import of the type "{1}" should be removed.

	importOfImplicitPackage.typeImport.delete.name = Delete import
	importOfImplicitPackage.typeImport.delete.description = \
		Delete the import.

################################################################################

importOrder.name = Import Order
importOrder.longName = \
	Consistently order import declarations
importOrder.description = \
	<b>Summary</b>\
	<br/>\
	Import declarations should be consistently ordered.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds import declarations that are not in the specified \
	order.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the order of the import declarations has been configured such that \
	packages that start with "com" should appear before packages that begin \
	with "org", the following imports would be flagged as being in the wrong \
	order:\
	<p><code>\
	\timport org.eclipse.core.resources.*;<br>\
	\timport com.instantiations.codePro.*;\
	</code>

importOrder.wrongOrder.description = \
	Import out of order: {1}
importOrder.wrongOrder.explanation = \
	The import of "{1}" should appear before the import of "{0}".

	importOrder.wrongOrder.recommendation.name = Recommendation...
	importOrder.wrongOrder.recommendation.description = \
		Change the order of the imports or invoke the Organize Imports command.

################################################################################

importStyle.name = Import Style
importStyle.longName = \
	Only one style of import should be used
importStyle.description = \
	<b>Summary</b>\
	<br/>\
	Only one style of import should be used.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks to ensure that all of the import declarations \
	have the same style, either demand imports (such as "java.util.*"), \
	or explicit imports (such as "java.util.List").\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule is configured such that only explicit imports are allowed, \
	the following import would be flagged as a violation:\
	<p><code>\
	\timport java.util.*;\
	</code>

importStyle.demandImport.description = \
	Demand import of "{0}"
importStyle.demandImport.explanation = \
	Do not use demand imports; explicitly list each of the types that are \
	being imported in separate import statement.

	importStyle.demandImport.recommendation.name = Recommendation...
	importStyle.demandImport.recommendation.description = \
		Explicitly list each type that is being imported.

importStyle.typeImport.description = \
	Explicit import of "{0}"
importStyle.typeImport.explanation = \
	Do not use type imports unless it is necessary in order to resolve \
	ambiguities. Replace all of the type imports from a given package with a \
	single import for the package as a whole.

	importStyle.typeImport.recommendation.name = Recommendation...
	importStyle.typeImport.recommendation.description = \
		Replace all type imports from the package with a single package import.

################################################################################

improperConversionOfArrayToString.name = Improper conversion of Array to String
improperConversionOfArrayToString.longName = \
	Improper conversion of an Array to a String
improperConversionOfArrayToString.description = \
	<b>Summary</b>\
	<br/>\
	Because the <code>toString()</code> method of an array does not \
	generate useful information, some functions that accept object \
	parameters will display useless results when an array is passed \
	to them.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for invocations of <code>toString()</code> \
	on arrays, as well as common functions that will convert an array \
	to a String using the <code>toString()</code> method. \
 	<code>toString()</code> does not return the contents of \
	the array in a useful format, instead, it generates a \
	string similar to <code>[C@16f0472</code>.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following would be flagged as a violation:\
	<p><code>\
	\tSystem.out.println(new Person[] {<br>\
	\t\tnew Person("Alice"), <br>\
	\t\tnew Person("Bob"), <br>\
	\t\tnew Person("Charlie")<br>\
	\t});\
	</code>

improperConversionOfArrayToString.willBeInvokedFixable.description = \
	toString() will be invoked on an array
improperConversionOfArrayToString.willBeInvokedFixable.explanation = \
	You pass an array to the method <code>{0}()</code>. This method will invoke \
	<code>toString()</code> on the the array. However, the <code>toString()</code> method \
	returns a useless String similar to <code>[C@16f0472</code>.

	improperConversionOfArrayToString.willBeInvokedFixable.recommendation.name = Recommendation...
	improperConversionOfArrayToString.willBeInvokedFixable.recommendation.description = \
		Use <code>java.util.Arrays.toString()</code> to convert the array to a String before \
		passing it in. This method returns a human-readable String of the form \
		<code>[element, element, ...]</code>.

improperConversionOfArrayToString.willBeInvokedUnfixable.description = \
	toString() will be invoked on an array
improperConversionOfArrayToString.willBeInvokedUnfixable.explanation = \
	You pass an array to the method <code>{0}()</code>. This method will invoke \
	<code>toString()</code> on the the array. However, the <code>toString()</code> method \
	returns a useless String similar to <code>[C@16f0472</code>.

	improperConversionOfArrayToString.willBeInvokedUnfixable.recommendation.name = Recommendation...
	improperConversionOfArrayToString.willBeInvokedUnfixable.recommendation.description = \
		Use <code>java.util.Arrays.toString()</code> to convert the array to a String before \
		passing it in. This method returns a human-readable String of the form \
		<code>[element, element, ...]</code>.

improperConversionOfArrayToString.useArraysToString.description = \
	Invoking toString() on an array
improperConversionOfArrayToString.useArraysToString.explanation = \
	<code>toString()</code> is being invoked on an array. However, the \
	<code>toString()</code> method returns a useless String similar to \
	<code>[C@16f0472</code>.

	improperConversionOfArrayToString.useArraysToString.recommendation.name = Recommendation...
	improperConversionOfArrayToString.useArraysToString.recommendation.description = \
		Use <code>java.util.Arrays.toString()</code> instead. This method returns \
		a human-readable String of the form <code>[element, element, ...]</code>.

improperConversionOfArrayToString.concatenationFixable.description = \
	Concatenating an array
improperConversionOfArrayToString.concatenationFixable.explanation = \
	An array is being concatenated with a <code>String</code>. However, this \
	uses the <code>toString()</code> method to convert the array, which returns a \
	useless String similar to <code>[C@16f0472</code>.

	improperConversionOfArrayToString.concatenationFixable.recommendation.name = Recommendation...
	improperConversionOfArrayToString.concatenationFixable.recommendation.description = \
		Before concatenating the array, use <code>java.util.Arrays.toString()</code> \
		to convert it to a <code>String</code>. This method returns \
		a human-readable String of the form <code>[element, element, ...]</code>.

improperConversionOfArrayToString.concatenationUnfixable.description = \
	Concatenating an array
improperConversionOfArrayToString.concatenationUnfixable.explanation = \
	An array is being concatenated with a <code>String</code>. However, this \
	uses the <code>toString()</code> method to convert the array, which returns a \
	useless String similar to <code>[C@16f0472</code>.

	improperConversionOfArrayToString.concatenationUnfixable.recommendation.name = Recommendation...
	improperConversionOfArrayToString.concatenationUnfixable.recommendation.description = \
		Don't concatenate an array with <code>Strings</code>, if you intend to get a human-readable result.

improperConversionOfArrayToString.avoid.description = \
	Invoking toString() on an array
improperConversionOfArrayToString.avoid.explanation = \
	<code>toString()</code> is being invoked on an array. However, the toString() method\
	returns a useless String similar to <code>[C@16f0472</code>.

	improperConversionOfArrayToString.avoid.recommendation.name = Recommendation...
	improperConversionOfArrayToString.avoid.recommendation.description = \
		Avoid using <code>toString()</code> on an array.

################################################################################

improperCalculationOfArrayHashCode.name = Improper calculation of array hashCode
improperCalculationOfArrayHashCode.longName = \
	Improper conversion of array hashCode
improperCalculationOfArrayHashCode.description = \
	<b>Summary</b>\
	<br/>\
	Because the <code>hashCode()</code> method of an array returns the identity\
	hashCode, this method should not be used to generate hash codes for arrays.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for invocations of <code>hashCode()</code> \
	on arrays, as well as common functions that will invoke \
	<code>hashCode()</code> on an array. \
	<p>\
	<b>Example</b>\
	<br/>\
	The following would be flagged as a violation:\
	<p><code>\
	\tnew Person[] {<br>\
	\t\tnew Person("Alice"), <br>\
	\t\tnew Person("Bob"), <br>\
	\t\tnew Person("Charlie")<br>\
	\t}.hashCode();\
	</code>

improperCalculationOfArrayHashCode.willBeInvoked.description = \
	hashCode() will be invoked on an array
improperCalculationOfArrayHashCode.willBeInvoked.explanation = \
	You pass an array to the method <code>{0}()</code>. This method will invoke \
	<code>hashCode()</code> on the the array. However, the \
	<code>hashCode()</code> method returns a the identity hashCode, rather than\
	a useful hashCode based on the array's contents.

	improperCalculationOfArrayHashCode.willBeInvoked.recommendation.name = Recommendation...
	improperCalculationOfArrayHashCode.willBeInvoked.recommendation.description = \
		Use <code>java.util.Arrays.asList()</code> to convert the array to a \
		List before passing it in. This will ensure that the hashCode is\
		calculated properly.

improperCalculationOfArrayHashCode.useArraysHashCode.description = \
	Invoking hashCode() on an array
improperCalculationOfArrayHashCode.useArraysHashCode.explanation = \
	<code>hashCode()</code> is being invoked on an array. However, the \
	<code>hashCode()</code> method returns the identity hash code rather than a\
	useful hash code based on the array's contents.

	improperCalculationOfArrayHashCode.useArraysHashCode.recommendation.name = Recommendation...
	improperCalculationOfArrayHashCode.useArraysHashCode.recommendation.description = \
		Use <code>java.util.Arrays.hashCode()</code> instead. This method returns \
		a hash code based on the array's contents.

improperCalculationOfArrayHashCode.avoid.description = \
	Invoking hashCode() on an array
improperCalculationOfArrayHashCode.avoid.explanation = \
	<code>hashCode()</code> is being invoked on an array. However, the \
	hashCode() method returns returns the identity hash code rather than a\
	useful hash code based on the array's contents.

	improperCalculationOfArrayHashCode.avoid.recommendation.name = Recommendation...
	improperCalculationOfArrayHashCode.avoid.recommendation.description = \
		Consider converting the array to a List using \
		<code>java.util.Arrays.asList()</code> and then calling \
		<code>hashCode()</code> on the List.

################################################################################

inappropriateLanguageInJava.name = Inappropriate Language
inappropriateLanguageInJava.longName = \
	Don't use inappropriate language
inappropriateLanguageInJava.description = \
	<b>Summary</b>\
	<br/>\
	Inappropriate language should not be used in the source code.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds uses of inappropriate language within the source code.

inappropriateLanguageInJava.inappropriate.description = \
	Inappropriate language
inappropriateLanguageInJava.inappropriate.explanation = \
	Inappropriate language has been used.

	inappropriateLanguageInJava.inappropriate.recommendation.name = Recommendation...
	inappropriateLanguageInJava.inappropriate.recommendation.description = \
		Remove the inappropriate language.

################################################################################

includeImplementationVersion.name = Include Implementation Version
includeImplementationVersion.longName = \
	Manifest files should include an implementation version
includeImplementationVersion.description = \
	<b>Summary</b>\
	<br/>\
	Manifest files should include an implementation version.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for manifest files that do not include an \
	implementation version, or include an implementation version with the \
	wrong format. An implementation version is specified by defining \
	an attribute with the name "Implementation-Version". The value of the \
	attribute should consist of three integers, separated by periods, \
	representing a major, minor, and micro version, in that order.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following implementation version would be flagged as a violation \
	because the version number is not well formed:\
	<p><code>\
	Implementation-Version: 2.3a\
	</code>

includeImplementationVersion.missingVersion.description = \
	No implementation version
includeImplementationVersion.missingVersion.explanation = \
	The manifest file does not include an implementation version.

	includeImplementationVersion.missingVersion.recommendation.name = Recommendation...
	includeImplementationVersion.missingVersion.recommendation.description = \
		Add an implementation version to the manifest file.

# {0} = attribute value
includeImplementationVersion.missingMinorVersion.description = \
	Implementation version missing minor version: {0}
includeImplementationVersion.missingMinorVersion.explanation = \
	The implementation version does not include a minor version number.

	includeImplementationVersion.missingMinorVersion.recommendation.name = Recommendation...
	includeImplementationVersion.missingMinorVersion.recommendation.description = \
		Add minor and micro version numbers to the implementation version.

# {0} = attribute value
includeImplementationVersion.missingMicroVersion.description = \
	Implementation version missing micro version: {0}
includeImplementationVersion.missingMicroVersion.explanation = \
	The implementation version does not include a micro version number.

	includeImplementationVersion.missingMicroVersion.recommendation.name = Recommendation...
	includeImplementationVersion.missingMicroVersion.recommendation.description = \
		Add a micro version numbers to the implementation version.

# {0} = attribute value
includeImplementationVersion.nonDigit.description = \
	Invalid character in implementation version: {0}
includeImplementationVersion.nonDigit.explanation = \
	The implementation version contains a character other than a digit or a \
	period, or contains too many periods.

	includeImplementationVersion.nonDigit.recommendation.name = Recommendation...
	includeImplementationVersion.nonDigit.recommendation.description = \
		Use only digits separated by periods to form a version number.

################################################################################

inconsistentConversionUsingToArray.name = Inconsistent Conversion Using toArray()
inconsistentConversionUsingToArray.longName = \
	Inconsistent conversion using toArray() will cause a ClassCastException
inconsistentConversionUsingToArray.description = \
	<b>Summary</b>\
	<br/>\
	Inconsistent conversion using <code>toArray()</code> will cause a \
	<code>ClassCastException</code>.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds places where <code>toArray()</code> is invoked, but \
	the result is cast to an incompatible type.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following would be flagged as a violation:\
	<p><code>\
	\tList foo = new ArrayList();<br>\
	\t(String[]) foo.toArray(new Integer[0]);<br>\
	</code>

# {0} The type it is being cast to
inconsistentConversionUsingToArray.noParameter.description = \
	Missing array parameter
inconsistentConversionUsingToArray.noParameter.explanation = \
	Since no array is passed as a parameter, <code>toArray()</code> will return a \
	result of type <code>Object[]</code>; however, this code attempts to \
	cast it to <code>{0}[]</code>. This cast will always cause a ClassCastException.

	inconsistentConversionUsingToArray.noParameter.add.name = Add parameter specifying type
	inconsistentConversionUsingToArray.noParameter.add.description = \
		Add a parameter specifying the desired array type.

# {0} The type of the array
# {1} The type of the cast
inconsistentConversionUsingToArray.badCast.description = \
	Inconsistent conversion using toArray()
inconsistentConversionUsingToArray.badCast.explanation = \
	Since an array of type <code>{0}[]</code> is passed as a parameter, \
	<code>toArray()</code> will return a result of type <code>{0}[]</code>; \
	however, this code attempts to cast it to <code>{1}[]</code>. This cast will \
	always cause a <code>ClassCastException</code>.

	inconsistentConversionUsingToArray.badCast.fixCast.name = \
		Change cast type
	inconsistentConversionUsingToArray.badCast.fixCast.description = \
		Change the type of the cast to <code>{0}[]</code>, to match the \
		parameter.
	
	inconsistentConversionUsingToArray.badCast.fixParameter.name = \
		Change parameter type
	inconsistentConversionUsingToArray.badCast.fixParameter.description = \
		Change the type of the parameter to <code>{1}[]</code>, to match the \
		cast.

################################################################################

inconsistentUseOfOverride.name = Inconsistent Use of Override
inconsistentUseOfOverride.longName = \
	The Override annotation should be used for all overridden methods
inconsistentUseOfOverride.description = \
	<b>Summary</b>\
	<br/>\
	The Override annotation should be used for all overridden methods.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds classes that use the Override annotation for some \
	overridden methods but not for others and flags those for which it is \
	missing.

# {0} = method name
inconsistentUseOfOverride.missing.description = \
	Missing Override
inconsistentUseOfOverride.missing.explanation = \
	The method {0} overrides another but is not tagged with the @Override annotation.

	inconsistentUseOfOverride.missing.add.name = Add @Override
	inconsistentUseOfOverride.missing.add.description = \
		Add the @Override annotation to this method.

################################################################################

incorrectArgumentType.name = Incorrect Argument Type
incorrectArgumentType.longName = \
	Actual type of argument does not match expected type
incorrectArgumentType.description = \
	<b>Summary</b>\
	<br/>\
	The actual type of an argument is incorrect.\
	<p>\
	<b>Description</b>\
	<br/>\
	Several methods defined in the interface java.util.Map (and \
	java.util.concurrent.ConcurrentMap) are declared with parameters of type \
	Object even though they are expected to be of the same type as either the \
	keys or the values. This audit rule looks for invocations of these method \
	in which the argument type does not conform with the expected type. Even \
	though the compiler can't identify such invocations as an error, they are \
	almost always wrong.\
	<p>\
	Specifically, the rule looks for invocations of the following methods:\
	<p><code>\
	java.util.Map.containsKey(Object)<br>\
	java.util.Map.containsValue(Object)<br>\
	java.util.Map.get(Object)<br>\
	java.util.Map.remove(Object)<br>\
	java.util.concurrent.ConcurrentMap.remove(Object, Object)\
	</code>\
	<p>\
	<b>Example</b>\
	<br/>\
	Given the following declaration:\
	<p><code>\
	\tMap&lt;String, String&gt; nameMap;\
	</code>\
	<p>\
	The following invocation would be flagged as a violation:\
	<p><code>\
	\tnameMap.get(new Integer(42))\
	</code>

# {0} = expected parameter type
# {1} = actual argument type
# {2} = method name
# {3} = fully qualified type name
incorrectArgumentType.incorrect.description= \
	Invalid argument type: expected {0}, found {1}
incorrectArgumentType.incorrect.explanation = \
	Even though it is declared with a type of java.lang.Object, the method \
	{3}.{2} is expecting an argument of type {0}. The actual type of the \
	argument is {1}, which will produce unexpected behavior at run-time.

	incorrectArgumentType.incorrect.recommendation.name = Recommendation...
	incorrectArgumentType.incorrect.recommendation.description = \
		Convert the argument to the right type.

################################################################################

incorrectUseOfEqualsAndCompareTo.name = Incorrect Use of equals() and compareTo()
incorrectUseOfEqualsAndCompareTo.longName = \
	A type does not consistently override equals() and compareTo()
incorrectUseOfEqualsAndCompareTo.description = \
	<b>Summary</b>\
	<br/>\
	If <code>compareTo()</code> is overridden for a type, then \
	<code>equals()</code> should be overridden as well.\
	<p>\
	<b>Description</b>\
	<br/>\
	When implemented, the <code>compareTo()</code> method should override \
	<code>compareTo(Object)</code>, and it should be consistent with \
	<code>equals()</code>. That is, <code>a.compareTo(b)</code> should return \
	<code>0</code> if and only if <code>a.equals(b)</code> returns <code>true</code>.\
	<p>\
	Specifically, this rule flags cases where <code>compareTo()</code> is overridden \
	but <code>equals()</code> is not and cases where <code>compareTo()</code> is overloaded \
	instead of overridden.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following would be flagged as a violation, since it overrides compareTo, but not equals:\
	<p><code>\
	\tpublic class MyClass {<br>\
	\t\tpublic int compareTo(Object o) {<br>\
	\t\t\treturn true;<br>\
	\t\t}<br>\
	\t}\
	</code>

# {0} = type name
incorrectUseOfEqualsAndCompareTo.overloadedCompareTo.description= \
	The type {0} overloads compareTo()
incorrectUseOfEqualsAndCompareTo.overloadedCompareTo.explanation = \
	The type <code>{0}</code> <b>overloads</b> the <code>compareTo()</code> method instead of \
	<b>overriding</b> it.

	incorrectUseOfEqualsAndCompareTo.overloadedCompareTo.recommendation.name = Recommendation...
	incorrectUseOfEqualsAndCompareTo.overloadedCompareTo.recommendation.description = \
		Change the <code>compareTo()</code> method to take a parameter of type <code>Object</code>.

# {0} = type name
incorrectUseOfEqualsAndCompareTo.overloadedEquals.description= \
	The type {0} overrides compareTo(), but overloads equals()
incorrectUseOfEqualsAndCompareTo.overloadedEquals.explanation = \
	The type <code>{0}</code> overrides the <code>compareTo()</code> method, but only <b>overloads</b> \
	the equals() method. This means that <code>compareTo()</code> might not be consistent with \
	<code>equals()</code>.

	incorrectUseOfEqualsAndCompareTo.overloadedEquals.recommendation.name = Recommendation...
	incorrectUseOfEqualsAndCompareTo.overloadedEquals.recommendation.description = \
		Change the <code>equals()</code> method to take a parameter of type <code>Object</code>.

# {0} = type name
incorrectUseOfEqualsAndCompareTo.mismatched.description= \
	The type {0} overrides compareTo() but inherits equals()
incorrectUseOfEqualsAndCompareTo.mismatched.explanation = \
	The type <code>{0}</code> overrides the <code>compareTo()</code> method, but inherits \
	the <code>equals()</code> method from <code>Object</code>. This means that \
	<code>compareTo()</code> will not be consistent with <code>equals()</code>.

	incorrectUseOfEqualsAndCompareTo.mismatched.recommendation.name = Recommendation...
	incorrectUseOfEqualsAndCompareTo.mismatched.recommendation.description = \
		Implement an <code>equals()</code> method that will be consistent with \
		<code>compareTo()</code> and <code>hashCode()</code>.

################################################################################

indentCodeWithinBlocks.name = Indent Code Within Blocks
indentCodeWithinBlocks.longName = \
	Code within blocks should be indented one level more than the block
indentCodeWithinBlocks.description = \
	<b>Summary</b>\
	<br/>\
	Code within blocks should be indented one level more than the block.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for blocks of code that are not indented one \
	level more than the code containing the block.\
	<p>\
	<b>Example</b>\
	<br/>\
	The statements inside the following if statement would be flagged as \
	needing to be indented:\
	<p><code>\
	\tif (employee.isHourly()) {<br>\
	\tcomputeHourlyBonus(employee);<br>\
	\t} else {<br>\
	\tcomputeSalariedBonus(employee);<br>\
	\t}\
	</code>

indentCodeWithinBlocks.wrongIndentation.description = \
	Code within a block is not indented
indentCodeWithinBlocks.wrongIndentation.explanation = \
	The code within a block is not indented one level more than the code \
	containing the block.

	indentCodeWithinBlocks.wrongIndentation.replace.name = Fix Indentation
	indentCodeWithinBlocks.wrongIndentation.replace.description = \
		Reformat the code so that the code within the block is properly \
		indented one level more than the code containing the block.

################################################################################

indexArraysWithInts.name = Index Arrays with Ints
indexArraysWithInts.longName = \
	Use integer indices when indexing arrays
indexArraysWithInts.description = \
	<b>Summary</b>\
	<br/>\
	Arrays should be indexed with int values.\
	<p>\
	<b>Description</b>\
	<br/>\
	Arrays should be indexed with int values in order to avoid the run-time \
	overhead of converting a shorter type.\
	<p>\
	<b>Example</b>\
	<br/>\
	The array index expression in the following code would be flagged as a \
	violation because the loop variable "b" should be declared to be an int:\
	<p><code>\
	\tfor (byte b = 0; b &lt; 128; b++) {<br>\
	\t\tarray[b] = null;<br>\
	\t}\
	</code>

indexArraysWithInts.invalidIndexType.description = \
	Array index of type {0}
indexArraysWithInts.invalidIndexType.explanation = \
	A value of type {0} is being used to index into an array.

	indexArraysWithInts.invalidIndexType.recommendation.name = Recommendation...
	indexArraysWithInts.invalidIndexType.recommendation.description = \
		Change the type of the index to be int.

################################################################################

inefficientUseOfToArray.name = Inefficient use of toArray()
inefficientUseOfToArray.longName = \
	Inefficient use of toArray()
inefficientUseOfToArray.description = \
	<b>Summary</b>\
	<br/>\
	Passing a zero-length array to <code>toArray()</code> is inefficient.\
	<p>\
	<b>Description</b>\
	<br/>\
	When converting a <code>Collection</code> to an array using \
	<code>toArray()</code>, it is most efficient to pass in an array whose \
	length is equal to the <code>Collection</code>'s size. This rule flags \
	locations an array of some fixed length is passed in.\
	<p>\
	<b>Example</b>\
	<br/>\
	The use of toArray in the following code would be flagged:\
	<p><code>\
	\tArrayList foo = new ArrayList();<br>\
	\tfoo.toArray(new String[0]);<br>\
	</code>
		
# {0} The number literal representing the size of the array
inefficientUseOfToArray.fixedSize.description = Inefficient use of toArray()
inefficientUseOfToArray.fixedSize.explanation = \
	An array of length <code>{0}</code> is passed to <code>toArray()</code>.

# {0} The number literal that will be replaced
# {1} The number that will be fixed
	inefficientUseOfToArray.fixedSize.useSize.name = Use size() instead
	inefficientUseOfToArray.fixedSize.useSize.description = \
		Replace <code>{0}</code> with <code>{1}</code>.

################################################################################

initializeStaticFields.name = Initialize Static Fields
initializeStaticFields.longName = \
	Static fields should be initialized
initializeStaticFields.description = \
	<b>Summary</b>\
	<br/>\
	All static fields should be initialized.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for static fields that are not initialized. A \
	static field can be initialized either as part of its declaration or in \
	a static initializer.\
	<p>\
	<b>Example</b>\
	<br/>\
	Assuming that there are no static initializers in the class containing \
	the following static field declaration, it would be flagged because the \
	field is not initialized:\
	<p><code>\
	\tprivate static HashMap instanceMap;\
	</code>

initializeStaticFields.uninitialized.description = \
	Static field {0} not initialized
initializeStaticFields.uninitialized.explanation = \
	The static field {0} is not initialized.

	initializeStaticFields.uninitialized.recommendation.name = Recommendation...
	initializeStaticFields.uninitialized.recommendation.description = \
		Initialize the static field.

################################################################################

instanceFieldNamingConvention.name = Instance Field Naming Convention
instanceFieldNamingConvention.longName = \
	Use the standard naming convention for instance fields
instanceFieldNamingConvention.description = \
	<b>Summary</b>\
	<br/>\
	Instance field names should conform to the defined standard.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks the names of all instance fields.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule were configured to only allow instance fields to begin with a \
	lower case letter, the following declaration would be flagged as a \
	violation because it begins with an upper case letter:\
	<p><code>\
	\tprivate int MaxCount;\
	</code>

instanceFieldNamingConvention.invalidName.description = \
	Invalid field name: "{0}" {1}
instanceFieldNamingConvention.invalidName.explanation = \
	The field name "{0}" does not conform because it {1}.

	instanceFieldNamingConvention.invalidName.rename.name = Rename field to "{1}"
	instanceFieldNamingConvention.invalidName.rename.description = \
		Rename the field from "{0}" to "{1}".

################################################################################

instanceFieldSecurity.name = Instance Field Security
instanceFieldSecurity.longName = \
	Don't declare non-final public instance fields
instanceFieldSecurity.description = \
	<b>Summary</b>\
	<br/>\
	Refrain from using non-final public instance fields.\
	<p>\
	<b>Description</b>\
	<br/>\
	To the extent possible, refrain from using non-final public instance \
	fields. Instead, let the interface to your instance field be through \
	accessor methods. In this way it is possible to add centralized security \
	checks, if required.\
	<p>\
	<b>Security Implications</b>\
	<br/>\
	Public, non-final fields are accessible and changeable from anywhere within \
	the application making them potential targets of malicious users.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following field declaration would be flagged as a violation because it \
	is both public and non-final:\
	<p><code>\
	\tpublic int width;\
	</code>

instanceFieldSecurity.instanceFieldVisibilityViolation.description = \
	Non-final {1} instance field: "{0}"
instanceFieldSecurity.instanceFieldVisibilityViolation.explanation = \
	The field "{0}" is {1} and thus can be accessed directly. \
	There is no check whether the code that changes it \
	has appropriate permissions.\
	<p>\
	Recommendation:\
	<p>\
	1. Make the field final.\
	<p>\
	or\
	<p>\
	1. Change the field visibility to private.<br>\
	2. Add accessor methods that check code permissions.<br>\
	3. Modify existing code to use accessor methods.
	
	instanceFieldSecurity.instanceFieldVisibilityViolation.makeFinal.name = Make field final
	instanceFieldSecurity.instanceFieldVisibilityViolation.makeFinal.description = \
		Change field from non-final to final.

################################################################################

instanceFieldVisibility.name = Instance Field Visibility
instanceFieldVisibility.longName = \
	Restrict the visibility of instance fields
instanceFieldVisibility.description = \
	<b>Summary</b>\
	<br/>\
	Instance fields should have an appropriate visibility.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks the visibility of all non-static fields to ensure \
	that it is one of the allowed visibilities.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule were configured to only allow private instance fields, then \
	the following field declaration would be flagged as a violation because it \
	is declared as being public:\
	<p><code>\
	\tpublic int x;\
	</code>

instanceFieldVisibility.invalidVisibility.description = \
	Invalid visibility for field: {0}
instanceFieldVisibility.invalidVisibility.explanation = \
	Instance fields should not be given a visibility of {0}.

	instanceFieldVisibility.invalidVisibility.recommendation.name = Recommendation...
	instanceFieldVisibility.invalidVisibility.recommendation.description = \
		Correct the visibility of the field.

################################################################################		

integerDivisionInFloatingPointExpression.name = Integer Division in a Floating-point Expression
integerDivisionInFloatingPointExpression.longName = \
	Integer Division in a Floating-point Expression
integerDivisionInFloatingPointExpression.description = \
	<b>Summary</b>\
	<br/>\
	Integers should be converted to floats before division if the result will \
	be converted.\
	<p>\
	<b>Description</b>\
	<br/>\
	When integer values are divided, any remainder is truncated. If the result \
	of that division is going to be converted to a floating-point value, one \
	of the integers should probably be cast to that same floating-point type \
	in order to avoid the rounding error.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following division would be flagged as a violation:\
	<p><code>\
	\tint a, b;<br>\
	\tfloat result;<br>\
	\tresult = a / b;\
	</code>

integerDivisionInFloatingPointExpression.invalid.description = \
	Integer division in a floating-point expression
integerDivisionInFloatingPointExpression.invalid.explanation = \
	If the result of that division is going to be converted to a floating-point \
	value, one of the integers should probably be cast to that same floating-point \
	type in order to avoid the rounding error.\

	integerDivisionInFloatingPointExpression.invalid.recommendation.name = Cast the operands
	integerDivisionInFloatingPointExpression.invalid.recommendation.description = \
		Cast one of the integers to a float. This will prevent round off error.

################################################################################

interfaceNamingConvention.name = Interface Naming Convention
interfaceNamingConvention.longName = \
	Use the standard naming convention for interfaces
interfaceNamingConvention.description = \
	<b>Summary</b>\
	<br/>\
	Interface names should conform to the defined standard.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks the names of all interfaces.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule were configured to require that all interface names start with \
	a capital "I" and another capital letter, the following declaration would \
	be flagged as a violation because the name does not begin with a capital \
	"I":\
	<p><code>\
	\tpublic interface EventListener<br>\
	\t{<br>\
	\t\t...<br>\
	\t}\
	</code>

interfaceNamingConvention.invalidName.description = \
	Invalid interface name: "{0}" {1}
interfaceNamingConvention.invalidName.explanation = \
	The interface name "{0}" does not conform because it {1}.

	interfaceNamingConvention.invalidName.rename.name = Rename interface to "{1}"
	interfaceNamingConvention.invalidName.rename.description = \
		Rename the interface from "{0}" to "{1}".

################################################################################

invalidCheckForBindingEquality.name = Invalid Check For Binding Equality
invalidCheckForBindingEquality.longName = \
	Bindings should be checked for equality using their keys
invalidCheckForBindingEquality.description = \
	<b>Summary</b>\
	<br/>\
	Bindings should be checked for equality using their keys.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for places where bindings are compared using either \
	the identity operator (==) or the equals method. Bindings are not unique \
	across AST structures, so they should always be compared using their keys.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following comparison would be flagged:\
	<p><code>\
	\tif (leftBinding == rightBinding) {\
	</code>

invalidCheckForBindingEquality.equalsMethod.description = \
	Bindings compared using equals
invalidCheckForBindingEquality.equalsMethod.explanation = \
	Bindings should not be compared using the equals method because they are \
	not guaranteed to be unique.

	invalidCheckForBindingEquality.equalsMethod.replace.name = Replace with isEqualTo
	invalidCheckForBindingEquality.equalsMethod.replace.description = \
		Use the isEqualTo method to compare the bindings.

# {0} = operator
invalidCheckForBindingEquality.identityOperator.description = \
	Bindings compared using {0}
invalidCheckForBindingEquality.identityOperator.explanation = \
	Bindings should not be compared using the identity operator because they are \
	not guaranteed to be unique.

	invalidCheckForBindingEquality.identityOperator.replace.name = Replace with isEqualTo
	invalidCheckForBindingEquality.identityOperator.replace.description = \
		Use the isEqualTo method to compare the bindings.

################################################################################

invalidCheckForJavaModelIdentity.name = Invalid Check For Java Model Identity
invalidCheckForJavaModelIdentity.longName = \
	Java model elements should be checked for equality using equals
invalidCheckForJavaModelIdentity.description = \
	<b>Summary</b>\
	<br/>\
	Java model elements should be checked for equality using equals.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for places where Java model elements (subclasses of \
	<code>IJavaElement</code>) are compared using one of the identity operators \
	(== or !=). Java model elements are not necessarily unique, but equals is \
	guaranteed to be correct.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following comparison would be flagged:\
	<p><code>\
	\tIMethod leftMethod, rightMethod;<br>\
	<br>\
	\tif (leftMethod == rightMethod) {\
	</code>

# {0} = operator
invalidCheckForJavaModelIdentity.identityOperator.description = \
	Java model elements compared using {0}
invalidCheckForJavaModelIdentity.identityOperator.explanation = \
	Java model elements should not be compared using the identity operators \
	because they are not guaranteed to be unique.

	invalidCheckForJavaModelIdentity.identityOperator.replace.name = Replace with equals
	invalidCheckForJavaModelIdentity.identityOperator.replace.description = \
		Use the equals method to compare the Java model elements.

################################################################################

invalidDBCTagValue.name = Invalid DBC Tag Value
invalidDBCTagValue.longName = \
	The value of a DBC tag is not valid
invalidDBCTagValue.description = \
	<b>Summary</b>\
	<br/>\
	The value of a DBC tag must have valid syntax.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks the value of all DBC tags (@pre, @post, @inv, and \
	@invariant) to ensure that they have a valid syntax. The value must be \
	either a valid Java expression or two valid Java expressions enclosed in \
	parentheses and separated by a comma.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following precondition would be flagged as a violation because its \
	value is not a valid Java expression:\
	<p><code>\
	\t@pre 0 <= value <= 255\
	</code>

invalidDBCTagValue.missingValue.description = \
	The {0} tag is missing a value
invalidDBCTagValue.missingValue.explanation = \
	The {0} tag is missing a value.

	invalidDBCTagValue.missingValue.recommendation.name = Recommendation...
	invalidDBCTagValue.missingValue.recommendation.description = \
		Provide a value or remove the tag.

invalidDBCTagValue.invalidValue.description = \
	The {0} tag has an invalid value
invalidDBCTagValue.invalidValue.explanation = \
	The {0} tag has an invalid value.

	invalidDBCTagValue.invalidValue.recommendation.name = Recommendation...
	invalidDBCTagValue.invalidValue.recommendation.description = \
		Fix the value, which currently has the following problems:{0}

################################################################################

invalidLoopConstruction.name = Invalid Loop Construction
invalidLoopConstruction.longName = \
	Loops should be properly bounded
invalidLoopConstruction.description = \
	<b>Summary</b>\
	<br/>\
	Loops should be properly bounded.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for loops whose initial and/or final values could \
	allow the index to go outside the bounds of the collection being accessed \
	within the body of the loop.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following loop would allow the loop variable to take on a value of \
	<code>array.length</code>, causing an IndexOutOfBoundsException to be \
	thrown:\
	<p><code>\
	\tfor (int i = 0; i &lt;= array.length; i++) {<br>\
	\t\tSystem.out.println("   [" + i + "] = " + array[i]);<br>\
	\t}\
	</code>

invalidLoopConstruction.initialValue.description = \
	Invalid initial value
invalidLoopConstruction.initialValue.explanation = \
	The initial value of "{0}" is likely to be outside the bounds of the \
	collection being indexed.

	invalidLoopConstruction.initialValue.recommendation.name = Recommendation...
	invalidLoopConstruction.initialValue.recommendation.description = \
		Change the initial value to be within the range of the collection''s \
		size.

invalidLoopConstruction.finalValue.description = \
	Invalid final value
invalidLoopConstruction.finalValue.explanation = \
	The final value of "{0}" is likely to be outside the bounds of the \
	collection being indexed.

	invalidLoopConstruction.finalValue.recommendation.name = Recommendation...
	invalidLoopConstruction.finalValue.recommendation.description = \
		Change the final value to be within the range of the collection''s \
		size.

################################################################################

invalidVisitorUsage.name = Invalid Visitor Usage
invalidVisitorUsage.longName = \
	Visit and endVisit should only be invoked by the visited object
invalidVisitorUsage.description = \
	<b>Summary</b>\
	<br/>\
	A visit and endVisit methods should only be invoked by the object being \
	visited.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for places where a <code>visit</code> or \
	<code>endVisit</code> method is being invoked by an object other than the \
	one being visited. Such invocations indicate that the visitor pattern is \
	being used incorrectly. Clients should not invoke the <code>visit</code> \
	and <code>endVisit</code> methods directly, but should ask the object to be \
	visited to accept the visitor.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following invocation of the <code>visit</code> method would be flagged \
	as a violation because the argument to the invocation is not \
	<code>this</code>: \
	<p><code>\
	\tvisitor.visit(someObject);\
	</code>

# 0 = method name
invalidVisitorUsage.invalidArgument.description = \
	Invalid invocation of {0}
invalidVisitorUsage.invalidArgument.explanation = \
	The method {0} is being invoked with an argument other than 'this', which \
	implies that the invoker is not the object being visited.

	invalidVisitorUsage.invalidArgument.recommendation.name = Recommendation...
	invalidVisitorUsage.invalidArgument.recommendation.description = \
		Don't invoke a visit or endVisit method except with an argument of \
		'this'. Use the method accept instead.

################################################################################

invocationOfDefaultConstructor.name = Invocation of Default Constructor
invocationOfDefaultConstructor.longName = \
	Do not invoke default super constructor
invocationOfDefaultConstructor.description = \
	<b>Summary</b>\
	<br/>\
	Default constructors should not be invoked within subclass constructors.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for invocations of the default constructor for a \
	superclass within a constructor in the subclass. The invocation is \
	unnecessary because the compiler will automatically add such a call.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following constructor invocation would be flagged as a violation:\
	<p><code>\
	\tpublic Point(int x, int y) {<br>\
	\t\tsuper();<br>\
	\t\t...;<br>\
	\t}\
	</code>

invocationOfDefaultConstructor.defaultCalled.description= \
	Default constructor invocation found
invocationOfDefaultConstructor.defaultCalled.explanation = \
	The default super constructor was found within a constructor of \
	a subclass, such a call should be removed as it is automatically \
	included by the compiler.

	invocationOfDefaultConstructor.defaultCalled.removeCall.name = Remove super()
	invocationOfDefaultConstructor.defaultCalled.removeCall.description = \
		Call to super() is made automatically by compiler, it should thus \
		be removed.

################################################################################

invokeInheritedMethod.name = \
	Invoke super.finalize() from within finalize()
invokeInheritedMethod.longName = \
	Invoke super.finalize() from within finalize()
invokeInheritedMethod.description = \
	<b>Summary</b>\
	<br/>\
	Every implementation of finalize() should invoke super.finalize().\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for implementations of the method finalize() that do \
	not invoke the inherited finalize() method.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following definition of the method finalize() would be flagged because \
	it does not invoke the inherited implementation of finalize():\
	<p><code>\
	\tprotected void finalize()<br>\
	\t\tthrows Throwable<br>\
	\t{<br>\
	\t\tif (fileReader != null) {<br>\
	\t\t\tfileReader.close();<br>\
	\t\t\tfileReader = null;<br>\
	\t\t}<br>\
	\t}\
	</code>

invokeInheritedMethod.notInvoked.description = \
	Should invoke the method super.finalize()
invokeInheritedMethod.notInvoked.explanation = \
	The inherited method super.finalize() should be invoked even if it does \
	not currently do anything so that future changes are less likely to break \
	the code.

	invokeInheritedMethod.notInvoked.recommendation.name = Recommendation...
	invokeInheritedMethod.notInvoked.recommendation.description = \
		Invoke the super.finalize() method.

################################################################################

invokeSuperSetUp.name = Invoke super.setUp() from within setUp()
invokeSuperSetUp.longName = \
	Invoke super.setUp() from within setUp()
invokeSuperSetUp.description = \
	<b>Summary</b>\
	<br/>\
	Every implementation of setUp() should invoke super.setUp().\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for implementations of the method setUp() that do \
	not invoke the inherited setUp() method.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following definition of the method setUp() would be flagged because \
	it does not invoke the inherited implementation of setUp():\
	<p><code>\
	\tpublic void setUp()<br>\
	\t{<br>\
	\t\temployee = new Employee("Jane Doe");<br>\
	\t}\
	</code>

invokeSuperSetUp.notInvoked.description = \
	Should invoke the method super.setUp()
invokeSuperSetUp.notInvoked.explanation = \
	The inherited method super.setUp() should be invoked even if it does \
	not currently do anything so that future changes are less likely to break \
	the code.

	invokeSuperSetUp.notInvoked.recommendation.name = Recommendation...
	invokeSuperSetUp.notInvoked.recommendation.description = \
		Invoke the super.setUp() method.

################################################################################

invokeSuperTearDown.name = Invoke super.tearDown() from within tearDown()
invokeSuperTearDown.longName = \
	Invoke super.tearDown() from within tearDown()
invokeSuperTearDown.description = \
	<b>Summary</b>\
	<br/>\
	Every implementation of tearDown() should invoke super.tearDown().\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for implementations of the method tearDown() that do \
	not invoke the inherited tearDown() method.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following definition of the method tearDown() would be flagged because \
	it does not invoke the inherited implementation of tearDown():\
	<p><code>\
	\tpublic void tearDown()<br>\
	\t{<br>\
	\t\temployee = null;<br>\
	\t}\
	</code>

invokeSuperTearDown.notInvoked.description = \
	Should invoke the method super.tearDown()
invokeSuperTearDown.notInvoked.explanation = \
	The inherited method super.tearDown() should be invoked even if it does \
	not currently do anything so that future changes are less likely to break \
	the code.

	invokeSuperTearDown.notInvoked.recommendation.name = Recommendation...
	invokeSuperTearDown.notInvoked.recommendation.description = \
		Invoke the super.tearDown() method.

################################################################################

invokeSynchronizedMethodInLoop.name = Invoke Synchronized Method In Loop
invokeSynchronizedMethodInLoop.longName = \
	Don't invoke a synchronized method within a loop
invokeSynchronizedMethodInLoop.description = \
	<b>Summary</b>\
	<br/>\
	Don't invoke a synchronized method within a loop.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for invocations of methods that have been marked as \
	being "synchronized" that occur within a loop. Synchronization is \
	relatively expensive, so such calls should be made outside the loop if \
	possible.\
	<p>\
	<b>Example</b>\
	<br/>\
	Given a method defined as follows:\
	<p><code>\
	\tpublic synchronized void recomputeCaches()<br>\
	\t{<br>\
	\t\t...<br>\
	\t}\
	</code><p>\
	The following invocation would be flagged as an error:\
	<p><code>\
	\tpublic void repeatedlyInvokeIt()<br>\
	\t{<br>\
	\t\tfor (int i = 0; i &lt; 10; i++) {<br>\
	\t\t\trecomputeCaches();<br>\
	\t\t}<br>\
	\t}\
	</code>

invokeSynchronizedMethodInLoop.invoked.description = \
	Synchronized method invoked in loop
invokeSynchronizedMethodInLoop.invoked.explanation = \
	A method that is marked as "synchronized" is being invoked in a loop.

	invokeSynchronizedMethodInLoop.invoked.recommendation.name = Recommendation...
	invokeSynchronizedMethodInLoop.invoked.recommendation.description = \
		Invoke the method outside the loop if possible.

################################################################################

jndiNamingStandard.name = JNDI Naming Standard
jndiNamingStandard.longName = \
	JNDI names should follow the specified standard
jndiNamingStandard.description = \
	<b>Summary</b>\
	<br/>\
	JNDI names should follow the specified standard.\
	<p>\
	<b>Description</b>\
	<br/>\
	This rule finds JNDI names (within .xmi files) that do not conform to the \
	specified standard.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule were configured to require JNDI names to start with a prefix \
	of "ejb/com/myCompany" and have at least one segment representing a \
	functional area, with "accounting" and "manufacturing" on the list, the \
	name "SystemFacade" in the following JNDI name would be flagged as a \
	violation:\
	<p><code>\
	\t&lt;ejbBindings jndiName="ejb/com/myCompany/SystemFacade" ...&gt;\
	</code>

jndiNamingStandard.invalidPrefix.description = \
	The component name "{0}" is not a valid prefix
jndiNamingStandard.invalidPrefix.explanation = \
	The component name "{0}" is not one of the allowed names for a segment of \
	the prefix.

	jndiNamingStandard.invalidPrefix.recommendation.name = Recommendation...
	jndiNamingStandard.invalidPrefix.recommendation.description = \
		Change the JNDI name to conform with the standard.

jndiNamingStandard.invalidSegment.description = \
	The component name "{0}" is not a valid {1}
jndiNamingStandard.invalidSegment.explanation = \
	The component name "{0}" is not one of the allowed names for a segment of \
	type {1}.

	jndiNamingStandard.invalidSegment.recommendation.name = Recommendation...
	jndiNamingStandard.invalidSegment.recommendation.description = \
		Change the JNDI name to conform with the standard.

jndiNamingStandard.missingPrefix.description = \
	The JNDI name does not start with the correct prefix
jndiNamingStandard.missingPrefix.explanation = \
	The JNDI name does not start with the correct prefix.

	jndiNamingStandard.missingPrefix.recommendation.name = Recommendation...
	jndiNamingStandard.missingPrefix.recommendation.description = \
		Change the JNDI name to conform with the standard.

jndiNamingStandard.missingSegment.description = \
	The JNDI name is missing a component of the type {1}
jndiNamingStandard.missingSegment.explanation = \
	The JNDI name is missing a component of the type {1}.

	jndiNamingStandard.missingSegment.recommendation.name = Recommendation...
	jndiNamingStandard.missingSegment.recommendation.description = \
		Change the JNDI name to conform with the standard.

################################################################################

jUnitChecks.name = JUnit Framework Checks
jUnitChecks.longName = \
	Make JUnit test cases conform to the specification
jUnitChecks.description = \
	<b>Summary</b>\
	<br/>\
	Check JUnit framework method declarations.\
	<p>\
	<b>Description</b>\
	<br/>\
	JUnit testing framework methods are checked for proper declarations, \
	including spelling. The following checks are performed:<br>\
	\t- Check that "suite", "setUp" and "tearDown" are spelled correctly<br>\
	\t- Check that "suite", "setUp" and "tearDown" have no parameters<br>\
	\t- Check that "suite", "setUp" and "tearDown" are void<br>\
	\t- Check that "suite", "setUp" and "tearDown" have the proper visibility<br>\
	\t- Check that "setUp" and "tearDown" are not static<br>\
	\t- Check that "suite" is static

jUnitChecks.methodMisspelled.description = \
	The method "{0}" is misspelled
jUnitChecks.methodMisspelled.explanation = \
	Capitalization must be correct. The correct spelling is "{1}".

	jUnitChecks.methodMisspelled.recommendation.name=Rename the method to "{1}".
	jUnitChecks.methodMisspelled.recommendation.description=\
		Rename the method from "{0}" to "{1}".

jUnitChecks.methodHasParams.description = \
	The method "{0}" should not have parameters
jUnitChecks.methodHasParams.explanation = \
	The JUnit framework methods do not take parameters.

	jUnitChecks.methodHasParams.recommendation.name=Recommendation...
	jUnitChecks.methodHasParams.recommendation.description=\
		Remove the parameters or define a new method that does not have \
		parameters.

jUnitChecks.suiteIsStatic.description = \
	The method "suite" must be static
jUnitChecks.suiteIsStatic.explanation = \
	The method "suite" is not an instance method so it must be declared static.

	jUnitChecks.suiteIsStatic.recommendation.name=Make "suite" static.
	jUnitChecks.suiteIsStatic.recommendation.description=\
		Change the declaration of "suite" to be static.

jUnitChecks.methodIsNonStatic.description = \
	The method "{0}" must not be static
jUnitChecks.methodIsNonStatic.explanation = \
	The method "{0}" is an instance method so it must not be declared static.

	jUnitChecks.methodIsNonStatic.recommendation.name=Make {0} non-static.
	jUnitChecks.methodIsNonStatic.recommendation.description=\
		Change the declaration of {0} to not be static.

jUnitChecks.mustBeVoid.description = \
	The method {0} must be void
jUnitChecks.mustBeVoid.explanation = \
	The JUnit framework methods do not return a value.

	jUnitChecks.mustBeVoid.recommendation.name=Make {0} void.
	jUnitChecks.mustBeVoid.recommendation.description=\
		Rewrite {0} so that it has no return value.

jUnitChecks.wrongVisibility.description = \
	The visibility of {0} is too limited
jUnitChecks.wrongVisibility.explanation = \
	The method may not have private or package visibility.

	jUnitChecks.wrongVisibility.recommendation.name=Make {0} protected.
	jUnitChecks.wrongVisibility.recommendation.description=\
		Change the declaration of {0} to protected.

jUnitChecks.nonPublicVisibility.description = \
	The visibility of {0} is too limited
jUnitChecks.nonPublicVisibility.explanation = \
	The method must have public visibility.

	jUnitChecks.nonPublicVisibility.recommendation.name=Make {0} public.
	jUnitChecks.nonPublicVisibility.recommendation.description=\
		Change the declaration of {0} to public.

################################################################################

labelNamingConvention.name = Label Naming Convention
labelNamingConvention.longName = \
	Use the standard naming convention for labels
labelNamingConvention.description = \
	<b>Summary</b>\
	<br/>\
	Label names should conform to the defined standard.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks the names of all labels.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule were configured to require that labels begin with a lower case \
	"l" and an upper case letter, the following label would be flagged as a \
	violation because it does not begin with a lower case "l":\
	<p><code>\
	\there: while (true) {<br>\
	\t\t...<br>\
	\t}\
	</code>

labelNamingConvention.invalidName.description = \
	Invalid label name: "{0}" {1}
labelNamingConvention.invalidName.explanation = \
	The label name "{0}" does not conform because it {1}.

	labelNamingConvention.invalidName.rename.name = Rename label to "{1}"
	labelNamingConvention.invalidName.rename.description = \
		Rename the label from "{0}" to "{1}".

	labelNamingConvention.invalidName.recommendation.name = Recommendation...
	labelNamingConvention.invalidName.recommendation.description = \
		Rename the label.

################################################################################

largeNumberOfConstructors.name = Large Number of Constructors
largeNumberOfConstructors.longName = \
	Don't define too many constructors in a single class
largeNumberOfConstructors.description = \
	<b>Summary</b>\
	<br/>\
	Types should not have too many constructors.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds types that have more than the specified number of \
	constructors. Types that exceed this number are likely to be too complex. \
	Consider making some of the constructors more general.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule is configured to allow 3 constructors and a class with 6 \
	constructors is found, that class will be flagged as a violation.

largeNumberOfConstructors.tooMany.description = \
	Too many constructors: {0}
largeNumberOfConstructors.tooMany.explanation = \
	There are too many constructors in this class. Consider making some of the \
	constructors more general.

	largeNumberOfConstructors.tooMany.recommendation.name = Recommendation...
	largeNumberOfConstructors.tooMany.recommendation.description = \
		Reduce the number of constructors by making some of them more general.

################################################################################

largeNumberOfFields.name = Large Number of Fields
largeNumberOfFields.longName = \
	Don't define too many fields in a single class
largeNumberOfFields.description = \
	<b>Summary</b>\
	<br/>\
	Types should not have too many fields.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds types that have more than the specified number of \
	fields. Types that exceed this number are likely to be too complex. \
	Consider splitting the class into multiple smaller classes.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule is configured to allow 6 fields and a class with 15 fields is \
	found, that class will be flagged as a violation.

largeNumberOfFields.tooMany.description = \
	Too many fields: {0}
largeNumberOfFields.tooMany.explanation = \
	There are too many fields in this class. Consider splitting the class \
	into multiple smaller classes.

	largeNumberOfFields.tooMany.recommendation.name = Recommendation...
	largeNumberOfFields.tooMany.recommendation.description = \
		Reduce the number of fields by splitting the class into multiple \
		smaller classes.

################################################################################

largeNumberOfMethods.name = Large Number of Methods
largeNumberOfMethods.longName = \
	Don't define too many methods in a single class
largeNumberOfMethods.description = \
	<b>Summary</b>\
	<br/>\
	Types should not have too many methods.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds types that have more than the specified number of \
	methods. Types that exceed this number are likely to be too complex. \
	Consider splitting the class into multiple smaller classes.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule is configured to allow 20 methods and a class with 114 methods \
	is found, that class will be flagged as a violation.

largeNumberOfMethods.tooMany.description = \
	Too many methods: {0}
largeNumberOfMethods.tooMany.explanation = \
	There are too many methods in this class. Consider splitting the class \
	into multiple smaller classes.

	largeNumberOfMethods.tooMany.recommendation.name = Recommendation...
	largeNumberOfMethods.tooMany.recommendation.description = \
		Reduce the number of methods by splitting the class into multiple \
		smaller classes.

################################################################################

largeNumberOfParameters.name = Large Number of Parameters
largeNumberOfParameters.longName = \
	Don't define too many parameters in a single method
largeNumberOfParameters.description = \
	<b>Summary</b>\
	<br/>\
	Methods should not have too many parameters.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds methods that have more than the specified number of \
	parameters. Methods that exceed this number are likely to be too complex. \
	Consider moving some of the values and behavior associated with them into \
	a separate class.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule is configured to allow 4 parameters and a method with 12 \
	parameters is found, that method will be flagged as a violation.

largeNumberOfParameters.tooMany.description = \
	Too many parameters: {0}
largeNumberOfParameters.tooMany.explanation = \
	There are too many parameters for this method or constructor. Consider \
	moving some of the values and behavior associated with them into a \
	separate class.

	largeNumberOfParameters.tooMany.recommendation.name = Recommendation...
	largeNumberOfParameters.tooMany.recommendation.description = \
		Reduce the number of parameters by moving some of the values into a \
		separate class.

################################################################################

largeNumberOfSwitchStatementCases.name = Large Number of Switch Statement Cases
largeNumberOfSwitchStatementCases.longName = \
	Don't define too many cases within a single switch statement
largeNumberOfSwitchStatementCases.description = \
	<b>Summary</b>\
	<br/>\
	Switch statements should not have more than 256 case clauses.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for switch statements that have more than 256 case \
	clauses. Some processors have special support for switch statements and \
	some JITs will take advantage of such instructions when there are few \
	enough cases.\
	<p>\
	<b>Example</b>\
	<br/>\
	If a switch statement with more than 256 case clauses is found, it will be \
	flagged as a violation.

largeNumberOfSwitchStatementCases.tooMany.description = \
	Too many case clauses: {0}
largeNumberOfSwitchStatementCases.tooMany.explanation = \
	There are too many case clauses in this switch statement. Consider breaking \
	the switch statement up into smaller pieces.

	largeNumberOfSwitchStatementCases.tooMany.recommendation.name = Recommendation...
	largeNumberOfSwitchStatementCases.tooMany.recommendation.description = \
		Break the switch statement up into smaller pieces.

################################################################################

lazilyInitializeSingletons.name = Lazily Initialize Singletons
lazilyInitializeSingletons.longName = \
	Singleton objects should be initialized as late as possible
lazilyInitializeSingletons.description = \
	<b>Summary</b>\
	<br/>\
	Singleton objects should be initialized as late as possible.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for singleton classes in which the singleton object \
	is initialized earlier than necessary.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following static field declaration would be flagged because the \
	field is initialized in the declaration rather than in the getInstance() \
	method:\
	<p><code>\
	\tprivate static MySingleton UniqueInstance = new MySingleton();<br>\
	<br>\
	\tpublic static MySingleton getInstance()<br>\
	\t{<br>\
	\t\treturn UniqueInstance;<br>\
	\t}\
	</code>

lazilyInitializeSingletons.uninitialized.description = \
	Singleton object initialized too early
lazilyInitializeSingletons.uninitialized.explanation = \
	A singleton object is being initialized before it is needed.

	lazilyInitializeSingletons.uninitialized.recommendation.name = Recommendation...
	lazilyInitializeSingletons.uninitialized.recommendation.description = \
		Lazily initialize the static field in the getInstance() method.

################################################################################

limitInstanceFieldAccess.name = Limit Instance Field Access
limitInstanceFieldAccess.longName = \
	Instance fields should only be accessed in a limited number of methods
limitInstanceFieldAccess.description = \
	<b>Summary</b>\
	<br/>\
	Instance fields should only be accessed in a limited number of methods.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for instance fields that are being accessed in \
	more methods than they should be. Most instance fields should be \
	accessed in at most two methods: a getter and a setter. Instance fields \
	that are marked as final should only be accessed in a getter. Instance \
	fields whose value is either a Collection or an array can be accessed in \
	more methods because there can be accessor methods for both the collection \
	as a whole and for individual elements of the collection.\
	<p>\
	<b>Example</b>\
	<br/>\
	The reference below to the instance field named firstName would be flagged \
	as a violation because its value is neither being set nor returned:\
	<p><code>\
	\tpublic String getFullName()<br>\
	\t{<br>\
	\t\treturn firstName + ' ' + getLastName();<br>\
	\t}\
	</code>

limitInstanceFieldAccess.invalidAccess.description = \
	Instance field referenced outside accessor
limitInstanceFieldAccess.invalidAccess.explanation = \
	The instance field {0} is being referenced outside of an accessor method.

	limitInstanceFieldAccess.invalidAccess.replace.name = Use Accessor
	limitInstanceFieldAccess.invalidAccess.replace.description = \
		Replace the direct reference with the invocation of an accessor method.

################################################################################

lineLength.name = Line Length
lineLength.longName = \
	Keep lines reasonably short
lineLength.description = \
	<b>Summary</b>\
	<br/>\
	Lines should not be too long.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for lines that are longer than a specified number \
	of characters. By default, each tab character is counted as four spaces.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule were configured to allow lines of up to 120 character and a \
	line were found that contained 253 characters, that line would be flagged \
	as a violation.

# 0 = line number
# 1 = maximum allowed length
# 2 = actual line length
lineLength.tooManyCharacters.description = \
	Line {0} is longer than {1} characters
lineLength.tooManyCharacters.explanation = \
	Line {0} contains {2} characters. Consider breaking it up into lines that \
	contain less than {1} characters each.

	lineLength.tooManyCharacters.recommendation.name = Recommendation...
	lineLength.tooManyCharacters.recommendation.description = \
		Break the line into multiple shorter lines.

################################################################################

localDeclaration.name = Local Declarations
localDeclaration.longName = \
	Follow the standard when declaring local variables
localDeclaration.description = \
	<b>Summary</b>\
	<br/>\
	Verification that local variable declarations follow a specified style \
	of coding.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds source in which local variable declarations \
	do not follow a specified style of coding. This includes the order of \
	local variables defined in a block of code, whether or not each variable \
	is explicitly initialized, and whether or not each variable is declared \
	in a separate statement.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule is configured to require that local variables be declared at \
	the beginning of the method, then the following variable declaration would \
	be flagged as a violation:\
	<p><code>\
	\tpublic boolean equals(Object object)<br>\
	\t{<br>\
	\t\tif (!(object instanceof OrderedSet)) {<br>\
	\t\t\treturn false;<br>\
	\t\t}<br>\
	\t\tint thisSize = getSize();<br>\
	\t\t...<br>\
	\t}\
	</code>

localDeclaration.varDeclsFirstInBlock.description = \
	Local variable not declared at beginning of block: {0}
localDeclaration.varDeclsFirstInBlock.explanation = \
	The local variable {0} should be declared at the beginning of the code \
	block rather in among the statements.

	localDeclaration.varDeclsFirstInBlock.recommendation.name = Recommendation...
	localDeclaration.varDeclsFirstInBlock.recommendation.description = \
		Move the variable declaration to the beginning of the block.

localDeclaration.varDeclsFirstInMethod.description = \
	Local variable not declared at beginning of method: {0}
localDeclaration.varDeclsFirstInMethod.explanation = \
	The local variable {0} should be declared at the beginning of the method \
	rather in among the statements.

	localDeclaration.varDeclsFirstInMethod.recommendation.name = Recommendation...
	localDeclaration.varDeclsFirstInMethod.recommendation.description = \
		Move the variable declaration to the beginning of the method.

localDeclaration.explicitlyInitVars.description = \
	Local variable not initialized: {0}
localDeclaration.explicitlyInitVars.explanation = \
	The local variable {0} should be explicitly initialized as part of its \
	declaration.

	localDeclaration.explicitlyInitVars.recommendation.name = Recommendation...
	localDeclaration.explicitlyInitVars.recommendation.description = \
		Initialize the variable as part of its declaration.

localDeclaration.declareVarsSeparately.description = \
	Local variable not declared separately: {0}
localDeclaration.declareVarsSeparately.explanation = \
	The local variable {0} should be defined in its own separate declaration \
	statement.

	localDeclaration.declareVarsSeparately.recommendation.name = Recommendation...
	localDeclaration.declareVarsSeparately.recommendation.description = \
		Declare the variable in its own separate declaration statement.

################################################################################

localVariableNamingConvention.name = Local Variable Naming Convention
localVariableNamingConvention.longName = \
	Use the standard naming convention for local variables
localVariableNamingConvention.description = \
	<b>Summary</b>\
	<br/>\
	Local variable names should conform to the defined standard.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks the names of all local variables (parameters and \
	temporary variables).\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule were configured to only allow local variables to begin with a \
	lower case letter, the following would be flagged as a violation because \
	it starts with an underscore:\
	<p><code>\
	\tint _count;\
	</code>

localVariableNamingConvention.invalidName.description = \
	Invalid local variable name: "{0}" {1}
localVariableNamingConvention.invalidName.explanation = \
	The local variable name "{0}" does not conform because it {1}.

	localVariableNamingConvention.invalidName.rename.name = Rename variable to "{1}"
	localVariableNamingConvention.invalidName.rename.description = \
		Rename the variable from "{0}" to "{1}".

	localVariableNamingConvention.invalidName.recommendation.name = Recommendation...
	localVariableNamingConvention.invalidName.recommendation.description = \
		Rename the variable.

################################################################################

logExceptions.name = Log Exceptions
logExceptions.longName = \
	Log caught exceptions
logExceptions.description = \
	<b>Summary</b>\
	<br/>\
	Exceptions that are caught should be logged.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for caught exceptions that are not logged.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following catch clause would be flagged as a violation because the \
	exception is not logged:\
	<p><code>\
	\ttry {<br>\
	\t\t...<br>\
	\t} catch (Exception exception) {<br>\
	\t\t// Exceptions should never be ignored like this<br>\
	\t}\
	</code>

logExceptions.notLogged.description = \
	Caught exception not logged
logExceptions.notLogged.explanation = \
	An exception has been caught but not logged.

	logExceptions.notLogged.recommendation.name = Recommendation...
	logExceptions.notLogged.recommendation.description = \
		Use one of the logging methods to log the exception.
################################################################################

logForging.name = Log Forging
logForging.longName = \
	Possible Log Forging vulnerabilities should be prevented
logForging.description = \
	<b>Summary</b>\
	<br/>\
	User input might be getting used to write directly to a log.\
	<p>\
	<b>Description</b>\
	<br/>\
	Log Forging occurs when user input is printed directly to a log \
	or as part of a log.\
	<p>\
	To detect violations, this audit rule searches the code for logging \
	statements such as <code>logger.log(..)</code> \
	and traces where the logging string could have come from. In cases where the \
	source of the path is user input, such as data from a servlet request, \
	<code>javax.servlet.ServletRequest.getParameter(java.lang.String)</code>, \
	or from a SWT Text widget, <code>org.eclipse.swt.widgets.Text.getText()</code>, \
	a violation is created.\
	<p>\
	These two sets of methods, the locations where tainted user data can come \
	from and the methods used to create paths, are editable by the user. If \
	methods are missing that are in a common package \
	(such as <code>java.lang.*</code>), please let CodePro support know.\
	<p>\
	<b>Security Implications</b>\
	<br/>\
	When a malicious user can enter information directly into the log, the \
	application logging utility can become compromised.\
	<p>\
	<b>Example</b>\
	<br/>\
	The invocation of <code>log(..)</code> would be flagged \
	as a violation since it uses the user name information passed from a \
	servlet request:\
	<p><code>\
	\tServletRequest servletRequest = ...;<br>\
	\tLogger logger = ...;<br>\
	\tLevel level = ...;<br>\
	\tString userName = servletRequest.getParameter("userName");<br>\
	\tString logMessage = "User input the following user name: " + userName;<br>\
	\tlogger.log(level,logMessage);\
	</code>

logForging.injection.description = \
	Log Forging
logForging.injection.explanation = \
	The data path below was found as a potential Log Forging scenario. \
	The top of the path shows where the potentially harmful user data could be \
	used to create a log entry. The bottom location in the path shows where \
	the user data originates.\
	<p>\
	{0}

	logForging.injection.recommendation.name = Recommendation...
	logForging.injection.recommendation.description = \
		User data should never directly be used to create a log entry, \
		the path should be eliminated.

logForging.stackDepth.description = \
	Log Forging risk: path too long
logForging.stackDepth.explanation = \
	While tracing the sources of log entries, the data path \
	below was found. While it does not terminate at a point where user input \
	could be used, it is too long to not be considered a potential \
	Log Forging risk. The following path is too long to be secure:\
	<p>\
	{0}

	logForging.stackDepth.recommendation.name = Recommendation...
	logForging.stackDepth.recommendation.description = \
		To minimize the risk of Log Forging, logging should be \
		executed as locally as possible. Make the code more secure by \
		reducing the scope to this log entry statement.

logForging.largeFan.description = \
	Log Forging risk: too many sources
logForging.largeFan.explanation = \
	While tracing the sources of log entries, the data path \
	below was found. While it does not terminate at a point where user input \
	could be used, it has too many sources to not be considered a potential \
	Log Forging risk.\
	<p>\
	{0}\
	<p>\
	The locations after this data path where it branches off are as follows:\
	<p>\
	{1}

	logForging.largeFan.recommendation.name = Recommendation...
	logForging.largeFan.recommendation.description = \
		To minimize the risk of Log Forging, logging should be \
		executed as locally as possible. Make the code more secure by reducing \
		the number of possible paths into this log entry statement.\

################################################################################

logLevel.name = Log Level
logLevel.longName = \
	Use only the allowed set of log levels
logLevel.description = \
	<b>Summary</b>\
	<br/>\
	Only those log levels that are allowed should be used.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for used of log levels that are not allowed.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule were configured to not allow the use of the ALL level, the \
	following invocation would be flagged as a violation:\
	<p><code>\
	\tlogger.log(Level.ALL, "This will always be logged");\
	</code>

logLevel.disallowedMethod.description = \
	Use of disallowed logging method {0}
logLevel.disallowedMethod.explanation = \
	The method "{0}" implicitly uses a disallowed log level.

	logLevel.disallowedMethod.recommendation.name = Recommendation...
	logLevel.disallowedMethod.recommendation.description = \
		Use one of the methods corresponding to an allowed log level.

logLevel.disallowedLevel.description = \
	Use of disallowed log level {0}
logLevel.disallowedLevel.explanation = \
	The log level "{0}" is not allowed.

	logLevel.disallowedLevel.recommendation.name = Recommendation...
	logLevel.disallowedLevel.recommendation.description = \
		Use one of the allowed log levels.

################################################################################

logLevel.jcl.name = Log Level
logLevel.jcl.longName = \
	Use only the allowed set of log levels
logLevel.jcl.description = \
	<b>Summary</b>\
	<br/>\
	Only those log levels that are allowed should be used.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for used of log levels that are not allowed.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule were configured to not allow the use of the DEBUG level, the \
	following invocation would be flagged as a violation:\
	<p><code>\
	\tlogger.debug("This is debugging output");\
	</code>

logLevel.jcl.disallowedMethod.description = \
	Use of disallowed logging method {0}
logLevel.jcl.disallowedMethod.explanation = \
	The method "{0}" implicitly uses a disallowed log level.

	logLevel.jcl.disallowedMethod.recommendation.name = Recommendation...
	logLevel.jcl.disallowedMethod.recommendation.description = \
		Use one of the methods corresponding to an allowed log level.

################################################################################

loopVariableNamingConvention.name = Loop Variable Naming Convention
loopVariableNamingConvention.longName = \
	Use the standard naming convention for loop variables
loopVariableNamingConvention.description = \
	<b>Summary</b>\
	<br/>\
	Variables declared in for loops should conform to the defined standard.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks the names of all integer-valued loop variables to \
	see whether they are on a list of approved names.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule were configured to only allow loop variable names of "i", "j" \
	and "k", the following loop variable would be flagged as a violation:\
	<p><code>\
	\tfor (int index = 0; index &lt; array.length; index++) {<br>\
	\t\t...<br>\
	\t}\
	</code>

loopVariableNamingConvention.invalidName.description = \
	Invalid loop variable name: "{0}"
loopVariableNamingConvention.invalidName.explanation = \
	The loop variable name "{0}" is not on the list of allowed names.

	loopVariableNamingConvention.invalidName.recommendation.name = Recommendation...
	loopVariableNamingConvention.invalidName.recommendation.description = \
		Rename the variable to a name that is on the list.

################################################################################

lossOfPrecisionInCast.name = Loss of Precision in Cast
lossOfPrecisionInCast.longName = \
	Don't cast primitive types to a lower precision type
lossOfPrecisionInCast.description = \
	<b>Summary</b>\
	<br/>\
	Casting to a lower precision type can cause loss of data.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for places where one numeric type is being cast to \
	another type of lower precision than the first. Doing so can result in a \
	loss of data, which is generally not desirable.\
	<p>\
	<b>Example</b>\
	<br/>\
	Given a declaration of the form:\
	<p><code>\
	\tdouble oneThird = 1.0 / 3.0;\
	</code><p>\
	The following expression would be flagged as a violation:\
	<p><code>\
	\t(float) oneThird\
	</code>

lossOfPrecisionInCast.invalid.description = \
	Casting from "{0}" to "{1}"
lossOfPrecisionInCast.invalid.explanation = \
	Casting from "{0}" to "{1}" can result in a loss of data.

	lossOfPrecisionInCast.invalid.recommendation.name = Recommendation...
	lossOfPrecisionInCast.invalid.recommendation.description = \
		Either test the value first or attempt to remove the cast.

################################################################################

methodsAndFieldsShouldNotShareNames.name = Methods And Fields Should Not Share Names
methodsAndFieldsShouldNotShareNames.longName = \
	Methods And Fields Should Not Share Names
methodsAndFieldsShouldNotShareNames.description = \
	<b>Summary</b>\
	<br/>\
	Methods And Fields Should Not Share Names.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for method declarations where the name of the method \
	is the same as the name of a field declared for that class. Methods that \
	override an inherited method are ignored.\
	<p>\
	<b>Example</b>\
	<br/>\
	Given a declaration of the form:\
	<p><code>\
	\tprivate String name;\
	</code><p>\
	The following declaration would be flagged as a violation:\
	<p><code>\
	\tpublic String name()<br>\
	\t{<br>\
	\t...<br>\
	\t}\
	</code>

methodsAndFieldsShouldNotShareNames.sameClass.description = \
	Method has same name as field.
methodsAndFieldsShouldNotShareNames.sameClass.explanation = \
	Methods and fields shouldn''t have the same name.

	methodsAndFieldsShouldNotShareNames.sameClass.rename.name = Rename method
	methodsAndFieldsShouldNotShareNames.sameClass.rename.description = \
		Rename the method.

# {0} = superclass name
methodsAndFieldsShouldNotShareNames.supermethod.description = \
	Method has same name as field declared in {0}.
methodsAndFieldsShouldNotShareNames.supermethod.explanation = \
	Methods and fields shouldn''t have the same name.

	methodsAndFieldsShouldNotShareNames.supermethod.rename.name = Rename method
	methodsAndFieldsShouldNotShareNames.supermethod.rename.description = \
		Rename the method.

methodsAndFieldsShouldNotShareNames.superfield.description = \
	Field has same name as method declared in {0}.
methodsAndFieldsShouldNotShareNames.superfield.explanation = \
	Methods and fields shouldn''t have the same name.

	methodsAndFieldsShouldNotShareNames.superfield.rename.name = Rename field
	methodsAndFieldsShouldNotShareNames.superfield.rename.description = \
		Rename the field.	

methodsAndFieldsShouldNotShareNames.localmethodsuperfield.description = \
	Field has same name as local method. Field also has same name as a field declared in {0}.
methodsAndFieldsShouldNotShareNames.localmethodsuperfield.explanation = \
	Methods and fields shouldn''t have the same name.

	methodsAndFieldsShouldNotShareNames.localmethodsuperfield.rename.name = Rename field
	methodsAndFieldsShouldNotShareNames.localmethodsuperfield.rename.description = \
		Rename the field.			

################################################################################

messagebean.name = Message Beans
messagebean.longName = \
	Make message beans conform to the specification
messagebean.description = \
	<b>Summary</b>\
	<br/>\
	Message Beans should be properly defined.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds problems with Message Beans:<br>\
	\t- Message bean should be declared public<br>\
	\t- Message bean should not be declared as abstract or final<br>\
	\t- Message bean name should end with 'Bean'<br>\
	\t- Message bean not implement a finalize() method<br>\
	\t- ejbCreate() method should be declared public<br>\
	\t- ejbCreate() method should not be declared as static or final<br>\
	\t- ejbCreate() method should be declared void<br>\
	\t- ejbCreate() method should not have any arguments<br>\
	\t- ejbCreate() method should not throw any exceptions<br>\
	\t- Message bean should implement an ejbCreate() method<br>\
	\t- Message bean should implement a no-argument constructor<br>\
	\t- ejbRemove() method should be declared public<br>\
	\t- ejbRemove() method should not be declared as static or final<br>\
	\t- ejbRemove() method should be declared void<br>\
	\t- ejbRemove() method should not have any arguments<br>\
	\t- ejbRemove() method should not throw any exceptions<br>\
	\t- Message bean should implement an ejbRemove() method<br>\
	\t- onMessage() method should be declared public<br>\
	\t- onMessage() method should not be declared as static or final<br>\
	\t- onMessage() method should be declared void<br>\
	\t- onMessage() method should have a single javax.jms.Message parameter<br>\
	\t- onMessage() method should not throw any exceptions<br>\
	\t- Message bean should implement an onMessage() method

messagebean.notPublic.description = \
	The message bean {0} should be declared public
messagebean.notPublic.explanation = \
	Enterprise message beans like {0} must be declared with public access.<br>\
	See EJB 2.0 - 15.7.2.

	messagebean.notPublic.makePublic.name = Make public
	messagebean.notPublic.makePublic.description = \
		Change the visibility of the message bean to be public.

messagebean.abstractOrFinal.description = \
	The message bean {0} should not be declared abstract or final
messagebean.abstractOrFinal.explanation = \
	Message beans like {0} must not be declared final or abstract.<br>\
	See EJB 2.0 - 15.7.2.

	messagebean.abstractOrFinal.recommendation.name = Recommendation...
	messagebean.abstractOrFinal.recommendation.description = \
		Do not declare the message bean final or abstract.

messagebean.badName.description = \
	The name of the message bean {0} should end with "Bean"
messagebean.badName.explanation = \
	Message beans like {0} should have names ending with "Bean".

	messagebean.badName.rename.name = Rename class to "{1}"
	messagebean.badName.rename.description = \
		Rename the class from "{0}" to "{1}" to include the suffix "Bean".

messagebean.finalize.description = \
	The message bean should not implement the finalize() method
messagebean.finalize.explanation = \
	Message beans should not implement the finalize() method.<br>\
	See EJB 2.0 - 15.7.2.

	messagebean.finalize.delete.name = Delete finalize()
	messagebean.finalize.delete.description = \
		Delete the finalize() method.

messagebean.ejbCreate.notPublic.description = \
	The {0} method should be declared public
messagebean.ejbCreate.notPublic.explanation = \
	Message beans should declare {0} methods as public.<br>\
	See EJB 2.0 - 15.7.3.

	messagebean.ejbCreate.notPublic.makePublic.name = Make public
	messagebean.ejbCreate.notPublic.makePublic.description = \
		Change the visibility of the method to be public.

messagebean.ejbCreate.static.description = \
	The {0} method should not be declared static
messagebean.ejbCreate.static.explanation = \
	Message beans should not declare {0} methods as static.<br>\
	See EJB 2.0 - 15.7.3.

	messagebean.ejbCreate.static.removeStatic.name = Remove static
	messagebean.ejbCreate.static.removeStatic.description = \
		Remove the static modifier.

messagebean.ejbCreate.final.description = \
	The {0} method should not be declared final
messagebean.ejbCreate.final.explanation = \
	Message beans should not declare {0} methods as final.<br>\
	See EJB 2.0 - 15.7.3.

	messagebean.ejbCreate.final.removeFinal.name = Remove final
	messagebean.ejbCreate.final.removeFinal.description = \
		Remove the final modifier.

messagebean.ejbCreate.notVoid.description = \
	The {0} method should be declared void
messagebean.ejbCreate.notVoid.explanation = \
	Message beans should declare {0} methods to return void.<br>\
	See EJB 2.0 - 15.7.3.

	messagebean.ejbCreate.notVoid.recommendation.name = Recommendation...
	messagebean.ejbCreate.notVoid.recommendation.description = \
		Declare the method to return void.

messagebean.ejbCreate.hasParameters.description = \
	The {0} method should not have any parameters
messagebean.ejbCreate.hasParameters.explanation = \
	Message beans should not declare {0} methods with any parameters.<br>\
	See EJB 2.0 - 15.7.3.

	messagebean.ejbCreate.hasParameters.modifyParameters.name = Modify Parameters
	messagebean.ejbCreate.hasParameters.modifyParameters.description = \
		Do not declare the method with any parameters.

messagebean.ejbCreate.hasExceptions.description = \
	The {0} method should not have any exceptions
messagebean.ejbCreate.hasExceptions.explanation = \
	Message beans should not declare {0} methods with any exceptions.<br>\
	See EJB 2.0 - 15.7.3.

	messagebean.ejbCreate.hasExceptions.recommendation.name = Recommendation...
	messagebean.ejbCreate.hasExceptions.recommendation.description = \
		Do not declare the method with any exceptions.

messagebean.ejbCreate.missing.description = \
	The message bean {0} should implement an ejbCreate() method
messagebean.ejbCreate.missing.explanation = \
	Message beans like {0} should implement an ejbCreate() method.<br>\
	See EJB 2.0 - 15.7.3.

	messagebean.ejbCreate.missing.recommendation.name = Recommendation...
	messagebean.ejbCreate.missing.recommendation.description = \
		Implement one or more ejbCreate() methods.

messagebean.noArgConstructor.missing.description = \
	The message bean {0} should implement a no-argument constructor
messagebean.noArgConstructor.missing.explanation = \
	Message beans like {0} should implement a no-argument constructor.<br>\
	See EJB 2.0 - 15.7.2.

	messagebean.noArgConstructor.missing.recommendation.name = Recommendation...
	messagebean.noArgConstructor.missing.recommendation.description = \
		Implement a no-argument constructor.

messagebean.ejbRemove.notPublic.description = \
	The {0} method should be declared public
messagebean.ejbRemove.notPublic.explanation = \
	Message beans should declare {0} methods as public.<br>\
	See EJB 2.0 - 15.7.5.

	messagebean.ejbRemove.notPublic.makePublic.name = Make public
	messagebean.ejbRemove.notPublic.makePublic.description = \
		Change the visibility of the method to be public.

messagebean.ejbRemove.static.description = \
	The {0} method should not be declared static
messagebean.ejbRemove.static.explanation = \
	Message beans should not declare {0} methods as static.<br>\
	See EJB 2.0 - 15.7.5.

	messagebean.ejbRemove.static.removeStatic.name = Remove static
	messagebean.ejbRemove.static.removeStatic.description = \
		Remove the static modifier.

messagebean.ejbRemove.final.description = \
	The {0} method should not be declared final
messagebean.ejbRemove.final.explanation = \
	Message beans should not declare {0} methods as final.<br>\
	See EJB 2.0 - 15.7.5.

	messagebean.ejbRemove.final.removeFinal.name = Remove final
	messagebean.ejbRemove.final.removeFinal.description = \
		Remove the final modifier.

messagebean.ejbRemove.notVoid.description = \
	The {0} method should be declared void
messagebean.ejbRemove.notVoid.explanation = \
	Message beans should declare {0} methods to return void.<br>\
	See EJB 2.0 - 15.7.5.

	messagebean.ejbRemove.notVoid.recommendation.name = Recommendation...
	messagebean.ejbRemove.notVoid.recommendation.description = \
		Declare the method to return void.

messagebean.ejbRemove.hasParameters.description = \
	The {0} method should not have any parameters
messagebean.ejbRemove.hasParameters.explanation = \
	Message beans should not declare {0} methods with any parameters.<br>\
	See EJB 2.0 - 15.7.5.

	messagebean.ejbRemove.hasParameters.modifyParameters.name = Modify Parameters
	messagebean.ejbRemove.hasParameters.modifyParameters.description = \
		Do not declare the method with any parameters.

messagebean.ejbRemove.hasExceptions.description = \
	The {0} method should not have any exceptions
messagebean.ejbRemove.hasExceptions.explanation = \
	Message beans should not declare {0} methods with any exceptions.<br>\
	See EJB 2.0 - 15.7.5.

	messagebean.ejbRemove.hasExceptions.recommendation.name = Recommendation...
	messagebean.ejbRemove.hasExceptions.recommendation.description = \
		Do not declare the method with any exceptions.

messagebean.ejbRemove.missing.description = \
	The message bean {0} should implement an ejbRemove() method
messagebean.ejbRemove.missing.explanation = \
	Message beans like {0} should implement an ejbRemove() method.<br>\
	See EJB 2.0 - 15.7.5.

	messagebean.ejbRemove.missing.recommendation.name = Recommendation...
	messagebean.ejbRemove.missing.recommendation.description = \
		Implement an ejbRemove() method.

messagebean.onMessage.notPublic.description = \
	The {0} method should be declared public
messagebean.onMessage.notPublic.explanation = \
	Message beans should declare {0} methods as public.<br>\
	See EJB 2.0 - 15.7.4.

	messagebean.onMessage.notPublic.makePublic.name = Make public
	messagebean.onMessage.notPublic.makePublic.description = \
		Change the visibility of the method to be public.

messagebean.onMessage.static.description = \
	The {0} method should not be declared static
messagebean.onMessage.static.explanation = \
	Message beans should not declare {0} methods as static.<br>\
	See EJB 2.0 - 15.7.4.

	messagebean.onMessage.static.removeStatic.name = Remove static
	messagebean.onMessage.static.removeStatic.description = \
		Remove the static modifier.

messagebean.onMessage.final.description = \
	The {0} method should not be declared final
messagebean.onMessage.final.explanation = \
	Message beans should not declare {0} methods as final.<br>\
	See EJB 2.0 - 15.7.4.

	messagebean.onMessage.final.removeFinal.name = Remove final
	messagebean.onMessage.final.removeFinal.description = \
		Remove the final modifier.

messagebean.onMessage.notVoid.description = \
	The {0} method should be declared void
messagebean.onMessage.notVoid.explanation = \
	Message beans should declare {0} methods to return void.<br>\
	See EJB 2.0 - 15.7.4.

	messagebean.onMessage.notVoid.recommendation.name = Recommendation...
	messagebean.onMessage.notVoid.recommendation.description = \
		Declare the method to return void.

messagebean.onMessage.badParameters.description = \
	The {0} method should have a single javax.jms.Message parameter
messagebean.onMessage.badParameters.explanation = \
	Message beans should declare {0} methods with a single javax.jms.Message \
	parameter.<br>\
	See EJB 2.0 - 15.7.4.

	messagebean.onMessage.badParameters.modifyParameters.name = Modify Parameters
	messagebean.onMessage.badParameters.modifyParameters.description = \
		Declare the method with a single javax.jms.Message parameter.

messagebean.onMessage.hasExceptions.description = \
	The {0} method should not have any parameters
messagebean.onMessage.hasExceptions.explanation = \
	Message beans should not declare {0} methods with any exceptions.<br>\
	See EJB 2.0 - 15.7.4.

	messagebean.onMessage.hasExceptions.recommendation.name = Recommendation...
	messagebean.onMessage.hasExceptions.recommendation.description = \
		Do not declare the method with any exceptions.

messagebean.onMessage.missing.description = \
	The message bean {0} should implement an onMessage() method
messagebean.onMessage.missing.explanation = \
	Message beans like {0} should implement an onMessage() method.<br>\
	See EJB 2.0 - 15.7.4.

	messagebean.onMessage.missing.recommendation.name = Recommendation...
	messagebean.onMessage.missing.recommendation.description = \
		Implement an onMessage() method.

################################################################################

methodChainLength.name = Method Chain Length
methodChainLength.longName = \
	Don't chain together too many method invocations
methodChainLength.description = \
	<b>Summary</b>\
	<br/>\
	Method invocations should not be chained into a long line.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for places where multiple method invocations are \
	chained together into an overly long chain. There are two problems with \
	long chains of method invocations. The most obvious is that they can make \
	the code difficult to follow. An even more serious problem is that they \
	often point out places where information has not been well encapsulated.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tColor roofColor = party.getWorkAddress().getStructure().getRoof().getColor();\
	</code>

methodChainLength.tooLong.description = \
	Method chain is too long ({0})
methodChainLength.tooLong.explanation = \
	{0} methods are being invoked in a single chain, when there should not be \
	more than {1} methods in a chain.

	methodChainLength.tooLong.recommendation.name = Recommendation
	methodChainLength.tooLong.recommendation.description = \
		Break the chain by introducing a temporary variable, or define a \
		higher level accessor method that will encapsulate the chain of \
		invocations.

################################################################################

methodInvocationInLoopCondition.name = Method Invocation in Loop Condition
methodInvocationInLoopCondition.longName = \
	Don't invoke methods within loop conditions
methodInvocationInLoopCondition.description = \
	<b>Summary</b>\
	<br/>\
	Methods should not be invoked in a loop condition.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for places where a method is invoked as part of a \
	loop condition. Unless the method returns a different value each time it \
	is called, placing the method invocation in the loop condition will force \
	it to be executed at least as many times as the loop body. You can often \
	improve the performance of your code by moving the invocation before the \
	loop.\
	<p>\
	<b>Example</b>\
	<br/>\
	The invocation of the method size() would be flagged as a violation in the \
	following loop:\
	<p><code>\
	\tfor (int i = 0; i &lt; list.size(); i++) {<br>\
	\t\t...<br>\
	\t}\
	</code>

methodInvocationInLoopCondition.invoked.description = \
	Method invoked in a loop condition
methodInvocationInLoopCondition.invoked.explanation = \
	A method is being invoked in a loop condition.

	methodInvocationInLoopCondition.invoked.recommendation.name = Recommendation
	methodInvocationInLoopCondition.invoked.recommendation.description = \
		Move the invocation of the method outside the loop.

################################################################################

methodJavadoc.name = Method Javadoc Conventions
methodJavadoc.longName = \
	All methods should have a correct Javadoc comment
methodJavadoc.description = \
	<b>Summary</b>\
	<br/>\
	All methods should have a Javadoc comment associated with them.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for the existence of a Javadoc comment for each \
	method. In addition, it checks that each Javadoc comment includes a @param \
	tag for each parameter (and none for non-parameters), a @return tag if the \
	method has a return type other than void (and not if the return type is \
	void), and a @throws tag for each explicitly declared exception (and none \
	for exceptions that are not declared). It also checks for the use of the \
	obsolete @exception tag.\
	<p>\
	<b>Example</b>\
	<br/>\
	The Javadoc for the following method would be flagged three times as a \
	violation, twice for missing @param tags and once for a missing @return \
	tag:\
	<p><code>\
	\t/**<br>\
	\t * Return the sum.<br>\
	\t */<br>\
	\tpublic int sum(int x, int y)<br>\
	\t{<br>\
	\t\t...<br>\
	\t}\
	</code>

methodJavadoc.missing.description = \
	Missing Javadoc comment for method "{0}"
methodJavadoc.missing.explanation = \
	The method "{0}" should have a Javadoc comment.

	methodJavadoc.missing.repair.name = Add missing method Javadoc
	methodJavadoc.missing.repair.description = \
		Run the Javadoc Repair tool on this method to add missing method Javadoc.

methodJavadoc.emptyParamTag.description = \
	Empty @param tag in {0}
methodJavadoc.emptyParamTag.explanation = \
	The @param tag is expected to have a value consisting of the name of the \
	parameter and a description of the kind of values expected for it and the \
	purpose of the parameter.

	methodJavadoc.emptyParamTag.repair.name = Correct the @param tag
	methodJavadoc.emptyParamTag.repair.description = \
		Run the Javadoc Repair tool on this method to correct the @param tag.

methodJavadoc.emptyReturnTag.description = \
	Empty @return tag in {0}
methodJavadoc.emptyReturnTag.explanation = \
	The @return tag is expected to have a value consisting of a description of \
	the kind of value that will be returned and the interpretation of that \
	value.

	methodJavadoc.emptyReturnTag.repair.name = Correct the @return tag
	methodJavadoc.emptyReturnTag.repair.description = \
		Run the Javadoc Repair tool on this method to correct the @return tag.

methodJavadoc.emptyThrowsTag.description = \
	Empty @{0} tag in {1}
methodJavadoc.emptyThrowsTag.explanation = \
	The @{0} tag is expected to have a value consisting of the name of the \
	exception that is thrown and the conditions under which it will be thrown.

	methodJavadoc.emptyThrowsTag.repair.name = Correct the @throws tag
	methodJavadoc.emptyThrowsTag.repair.description = \
		Run the Javadoc Repair tool on this method to correct the @throws tag.

methodJavadoc.extraParamTag.description = \
	Extra @param tag for {0} in {1}
methodJavadoc.extraParamTag.explanation = \
	There is a @param tag for the parameter {0}, but there is no parameter \
	with that name. Check to see whether the parameter might have been removed \
	or whether it was renamed but the Javadoc not updated.

	methodJavadoc.extraParamTag.repair.name = Remove the extra @param tag
	methodJavadoc.extraParamTag.repair.description = \
		Run the Javadoc Repair tool on this method to remove the extra @param \
		tag.

methodJavadoc.extraReturnTag.description = \
	Extra @return tag for {0}
methodJavadoc.extraReturnTag.explanation = \
	Each method should have a single @return tag. The contents of all of the \
	return tags should be merged into a single tag.

	methodJavadoc.extraReturnTag.repair.name = Remove the extra @return tag
	methodJavadoc.extraReturnTag.repair.description = \
		Run the Javadoc Repair tool on this method to remove the extra @return \
		tag.

methodJavadoc.extraThrowsTag.description = \
	Extra @{0} tag for {1} in {2}
methodJavadoc.extraThrowsTag.explanation = \
	There is a @{0} tag for the exception {1}, but the exception is not thrown \
	by this method or constructor. The tag should be removed.

	methodJavadoc.extraThrowsTag.repair.name = Remove the extra @throws tag
	methodJavadoc.extraThrowsTag.repair.description = \
		Run the Javadoc Repair tool on this method to remove the extra @throws \
		tag.

methodJavadoc.missingParamTag.description = \
	Missing @param tag for {0} in {1}
methodJavadoc.missingParamTag.explanation = \
	This method declares the parameter {0}, but there is no @param tag for it. \
	Add a @param tag for the parameter.

	methodJavadoc.missingParamTag.repair.name = Add the missing @param tag
	methodJavadoc.missingParamTag.repair.description = \
		Run the Javadoc Repair tool on this method to add the missing @param tag.

methodJavadoc.missingReturnTag.description = \
	Missing @return tag for {0}
methodJavadoc.missingReturnTag.explanation = \
	The method returns a value but does not have a @return tag describing that \
	value. Add a @return tag.

	methodJavadoc.missingReturnTag.repair.name = Add the missing @return tag
	methodJavadoc.missingReturnTag.repair.description = \
		Run the Javadoc Repair tool on this method to add the missing @return \
		tag.

methodJavadoc.missingThrowsTag.description = \
	Missing @throws tag for {0} in {1}
methodJavadoc.missingThrowsTag.explanation = \
	The method throws the exception {0} but does not have a @throws tag \
	describing the conditions under which it is thrown. Add a @throws tag.

	methodJavadoc.missingThrowsTag.repair.name = Add the missing @throws tag
	methodJavadoc.missingThrowsTag.repair.description = \
		Run the Javadoc Repair tool on this method to add the missing @throws \
		tag.

methodJavadoc.obsoleteTag.description = \
	Use of obsolete @exception tag
methodJavadoc.obsoleteTag.explanation = \
	The @exception tag has been replaced by the @throws tag. The Javadoc should \
	be updated to reflect that change.

	methodJavadoc.obsoleteTag.replace.name = Replace the @exception tag with a @throws tag
	methodJavadoc.obsoleteTag.replace.description = \
		Replace the @exception tag with a @throws tag.

	methodJavadoc.obsoleteTag.repair.name = Replace the @exception tag with a @throws tag
	methodJavadoc.obsoleteTag.repair.description = \
		Run the Javadoc Repair tool on this method to replace the @exception \
		tag with a @throws tag.

methodJavadoc.duplicateDeprecated.description = \
	Duplicated @deprecated tag in Javadoc comment for method
methodJavadoc.duplicateDeprecated.explanation = \
	The method should have at most one @deprecated tag in its Javadoc comment.

	methodJavadoc.duplicateDeprecated.repair.name = Remove duplicate tag
	methodJavadoc.duplicateDeprecated.repair.description = \
		Run the Javadoc Repair tool on this method to remove the duplicate tag.

methodJavadoc.emptyDeprecated.description = \
	Empty @deprecated tag in Javadoc comment for method
methodJavadoc.emptyDeprecated.explanation = \
	The @deprecated tag should have text describing when the method was \
	deprecated and what to use in its place.

	methodJavadoc.emptyDeprecated.repair.name = Add description
	methodJavadoc.emptyDeprecated.repair.description = \
		Run the Javadoc Repair tool on this method to add text to the \
		@deprecated tag.

methodJavadoc.unknown.description = \
	Unknown tag in Javadoc comment for method: {0}
methodJavadoc.unknown.explanation = \
	Only the standard tags should be included in Javadoc comments.

	methodJavadoc.unknown.repair.name = Remove unknown tag
	methodJavadoc.unknown.repair.description = \
		Run the Javadoc Repair tool on this method to remove the unknown tag.

################################################################################

methodNamingConvention.name = Method Naming Convention
methodNamingConvention.longName = \
	Use the standard naming convention for methods
methodNamingConvention.description = \
	<b>Summary</b>\
	<br/>\
	Method names should conform to the defined standard.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks the names of all methods.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule were configured to only allow method names that begin with a \
	lower case letter, the following method declaration would be flagged as a \
	violation because the method name begins with an upper case letter:\
	<p><code>\
	\tpublic static Singleton GetInstance()\
	</code>

methodNamingConvention.invalidName.description = \
	Invalid method name: "{0}" {1}
methodNamingConvention.invalidName.explanation = \
	The method name "{0}" does not conform because it {1}.

	methodNamingConvention.invalidName.rename.name = Rename method to "{1}"
	methodNamingConvention.invalidName.rename.description = \
		Rename the method from "{0}" to "{1}".

methodNamingConvention.sameAsClassName.description = \
	Invalid method name: "{0}" is the same as its class'' name
methodNamingConvention.sameAsClassName.explanation = \
	The method name "{0}" does not conform because it is the same as its \
	class'' name.

	methodNamingConvention.sameAsClassName.rename.name = Rename method
	methodNamingConvention.sameAsClassName.rename.description = \
		Rename the method from "{0}" to something that describes it''s function.

	methodNamingConvention.sameAsClassName.makeConstructor.name = Convert to constructor
	methodNamingConvention.sameAsClassName.makeConstructor.description = \
		Convert the method to a constructor by deleting the return type.

################################################################################

methodParameterNamingConvention.name = Method Parameter Naming Convention
methodParameterNamingConvention.longName = \
	Use the standard naming convention for method parameters
methodParameterNamingConvention.description = \
	<b>Summary</b>\
	<br/>\
	Method parameter names should conform to the defined standard.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks the names of all method parameters.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule were configured to only allow parameter names that begin with \
	a lower case letter, the parameter in the following method declaration \
	would be flagged as a violation because it begins with an underscore:\
	<p><code>\
	\tpublic void setCount(int _count)\
	</code>

methodParameterNamingConvention.invalidName.description = \
	Invalid method parameter name: "{0}" {1}
methodParameterNamingConvention.invalidName.explanation = \
	The method parameter name "{0}" does not conform because it {1}.

	methodParameterNamingConvention.invalidName.rename.name = Rename method parameter to "{1}"
	methodParameterNamingConvention.invalidName.rename.description = \
		Rename the method parameter from "{0}" to "{1}".

################################################################################

methodShouldBeStatic.name = Method Should Be Static
methodShouldBeStatic.longName = \
	Make methods static when possible
methodShouldBeStatic.description = \
	<b>Summary</b>\
	<br/>\
	Methods that do not access any instance state or instance methods should \
	be static.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for methods that do not access any instance state \
	or instance methods. Such methods should be made static. Note, however, \
	that this method does not find methods that only call instance \
	methods that should also be static, so changing some of the methods to \
	static methods might cause additional methods to then be flagged.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following method would be flagged as a violation because it does not \
	reference any instance specific state:\
	<p><code>\
	\tpublic int getDefaultSize()<br>\
	\t{<br>\
	\t\treturn 256;<br>\
	\t}\
	</code>

methodShouldBeStatic.notStatic.description = \
	Method should be static
methodShouldBeStatic.notStatic.explanation = \
	Methods that do not access instance members should be made static.

	methodShouldBeStatic.notStatic.makeStatic.name = Make the method static
	methodShouldBeStatic.notStatic.makeStatic.description = \
		Add the keyword "static" to the method declaration.

################################################################################

mimeEncodingMethodUsage.name = Mime Encoding Method Usage
mimeEncodingMethodUsage.longName = \
	Don't use specific mime encoding methods
mimeEncodingMethodUsage.description = \
	<b>Summary</b>\
	<br/>\
	Don't use specific mime encoding methods.\
	<p>\
	<b>Description</b>\
	<br/>\
	Don't use specific mime encoding methods.

mimeEncodingMethodUsage.avoid.description = \
	Avoid using the {0}.{1}() method
mimeEncodingMethodUsage.avoid.explanation = \
	Avoid using the {0}.{1}() method

	mimeEncodingMethodUsage.avoid.recommendation.name = Recommendation...
	mimeEncodingMethodUsage.avoid.recommendation.description = \
		Don''t use this mime encoding method.

################################################################################

minimizeScopeOfLocalVariables.name = Minimize Scope of Local Variables
minimizeScopeOfLocalVariables.longName = \
	Minimize the scope of local variables
minimizeScopeOfLocalVariables.description = \
	<b>Summary</b>\
	<br/>\
	Declare variables so that they have as small a scope as possible.\
	<p>\
	<b>Description</b>\
	<br/>\
	This rule looks for variables whose scope is too broad. If a variable is \
	declared without an initializer it is probably declared too early, and \
	will be flagged. While-loops that could be converted to for-loops, \
	reducing the scope of the iteration variable, are also detected.\
	<p>\
	<b>Example</b>\
	<br/>\
	In the following method, the variable "element" could be defined in the \
	body of the loop, and the while loop could be converted to a for loop \
	so that the loop variable "index" could be more limited in scope:\
	<p><code>\
	\tpublic int sum(int[] array)<br>\
	\t{<br>\
	\t\tint index, element;<br>\
	<br>\
	\t\tindex = 0;<br>\
	\t\twhile (index &lt; array.length) {<br>\
	\t\t\telement = array[i];<br>\
	\t\t\tsum = sum + element;<br>\
	\t\t\tindex = index + 1;<br>\
	\t\t}<br>\
	\t}\
	</code>

minimizeScopeOfLocalVariables.noInitializer.description = \
	The variable {0} has no initializer
minimizeScopeOfLocalVariables.noInitializer.explanation = \
	The variable may have too broad a scope.

	minimizeScopeOfLocalVariables.noInitializer.recommendation.name = Recommendation...
	minimizeScopeOfLocalVariables.noInitializer.recommendation.description = \
		Add an initializer to the declaration of {0}, moving it to where it is \
		used if necessary.

minimizeScopeOfLocalVariables.convertWhileToFor.description = \
	The while-loop could be converted to a for-loop
minimizeScopeOfLocalVariables.convertWhileToFor.explanation = \
	The scope of {0} would be reduced by declaring it in a for-statement.

	minimizeScopeOfLocalVariables.convertWhileToFor.recommendation.name = Recommendation...
	minimizeScopeOfLocalVariables.convertWhileToFor.recommendation.description = \
		Change the while-loop to a for-loop, declaring {0} in an initializer \
		of the for statement.

################################################################################

missingBlock.name = Missing Block
missingBlock.longName = \
	Use a block rather than a single statement in control structures
missingBlock.description = \
	<b>Summary</b>\
	<br/>\
	A single statement should never be used where a block is allowed.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for statements that control the execution of \
	another statement (do, for, if or while) to ensure that the statement \
	being controlled is always a block.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tif (color == null)<br>\
	\t\tcolor = getDefaultColor();\
	</code>

missingBlock.clause.description = \
	Missing block in {0} clause: {1}
missingBlock.clause.explanation = \
	There should be a block around the body of an {0} clause.

	missingBlock.clause.recommendation.name = Recommendation...
	missingBlock.clause.recommendation.description = \
		Add a block around the body of the {0} clause.

missingBlock.statement.description = \
	Missing block in {0} statement: {1}
missingBlock.statement.explanation = \
	There should be a block around the body of a {0} statement.

	missingBlock.statement.recommendation.name = Recommendation...
	missingBlock.statement.recommendation.description = \
		Add a block around the body of the {0} statement.

################################################################################

missingClassInWebXML.name = Missing Class in web.xml
missingClassInWebXML.longName = \
	Undefined class referenced in a web.xml file
missingClassInWebXML.description = \
	<b>Summary</b>\
	<br/>\
	A class referenced in a web.xml file is not defined.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks the values of those attributes in a web.xml file \
	whose values are supposed to be the fully qualified name of a class to \
	ensure that the classes are defined.\
	<p>\
	<b>Example</b>\
	<br/>\
	In the following entry\
	<p><code>\
	\t&lt;controller className="your class here" .../&gt;\
	</code><p>\
	The value of the "className" attribute would be flagged.

missingClassInWebXML.missing.description = \
	Missing class: {0}
missingClassInWebXML.missing.explanation = \
	The class {0} is not defined.

	missingClassInWebXML.missing.recommendation.name = Recommendation...
	missingClassInWebXML.missing.recommendation.description = \
		Either implement the class or change the attribute value to the name of \
		an existing class.

################################################################################

missingConstantsInSwitch.name = Missing Constants In Switch
missingConstantsInSwitch.longName = \
	Include all enumeration constants in switch statements
missingConstantsInSwitch.description = \
	<b>Summary</b>\
	<br/>\
	Switch statements should include all possible enumeration constants.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for the existence of switch statements whose case \
	labels are constants declared by an enum but which do not include all of \
	the declared constants.\
	<p>\
	<b>Example</b>\
	<br/>\
	Given the following declarations:\
	<p><code>\
	\tpublic enum PopcornSize {MEDIUM, LARGE, EXTRA_LARGE};\
	<p>\
	\tprivate PopcornSize size;\
	</code><p>\
	the following switch statement would be flagged as a violation because it \
	does not contain a case label for EXTRA_LARGE:\
	<p><code>\
	\tswitch (size) {<br>\
	\tcase MEDIUM:<br>\
	\t\tpromptForUgradeToLarge();<br>\
	\t\tbreak;<br>\
	\tcase LARGE:<br>\
	\t\tpromptForDrinksAndCandy();<br>\
	\t}\
	</code>

missingConstantsInSwitch.missing.description = \
	Missing case label for {0}
missingConstantsInSwitch.missing.explanation = \
	The enumeration constant {0} should have a case label.

	missingConstantsInSwitch.missing.recommendation.name = Recommendation...
	missingConstantsInSwitch.missing.recommendation.description = \
		Add a case label for the missing constant to the switch statement.

################################################################################

missingDefaultInSwitch.name = Missing Default in Switch
missingDefaultInSwitch.longName = \
	Include a default case in every switch statement
missingDefaultInSwitch.description = \
	<b>Summary</b>\
	<br/>\
	Every switch statement should have a default clause.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for the existence of a default case within every \
	switch statement.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following switch statement would be flagged as a violation because it \
	does not contain a "default" case label:\
	<p><code>\
	\tswitch (accountType) {<br>\
	\tcase CHECKING_ACCOUNT:<br>\
	\t\tbalance = ((CheckingAccount) account).getCheckingBalance();<br>\
	\t\tbreak;<br>\
	\tcase SAVINGS_ACCOUNT:<br>\
	\t\tbalance = ((SavingsAccount) account).getSavingsBalance();<br>\
	\t}\
	</code>

missingDefaultInSwitch.missing.description = \
	Missing default case
missingDefaultInSwitch.missing.explanation = \
	Every switch statement should have a default case.

	missingDefaultInSwitch.missing.recommendation.name = Recommendation...
	missingDefaultInSwitch.missing.recommendation.description = \
		Add a default case to the switch statement.

################################################################################

missingImageFile.name = Missing Image File
missingImageFile.longName = \
	Referenced image files should exist
missingImageFile.description = \
	<b>Summary</b>\
	<br/>\
	Referenced image files should exist.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for the references within a plugin.xml file to image \
	files that do not exist.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the file <code>icons/view16/ourView.gif</code> does not exist, the \
	following reference to it would be flagged:\
	<p><code>\
	\t&lt;view\
	\t\ticon="icons/view16/ourView.gif"\
	\t\t.../&gt;\
	</code>


missingImageFile.missing.description = \
	Missing image file: {0}
missingImageFile.missing.explanation = \
	The image file "{0}" is referenced in the plugin.xml file but does not exist.

	missingImageFile.missing.recommendation.name = Recommendation...
	missingImageFile.missing.recommendation.description = \
		Add the image file to the project or change the plugin.xml file to \
		reference an existing image file.

################################################################################

missingMessage.name = Missing Message
missingMessage.longName = \
	Messages referenced in code should exist in property files
missingMessage.description = \
	<b>Summary</b>\
	<br/>\
	Messages referenced in code should exist in property files.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for subclasses of <code>org.eclipse.osgi.util.NLS</code> \
	and verifies that there is a key in the corresponding <code>messages.properties</code> \
	file for each of the fields defined in it. It also looks for invocations of \
	the older getString() method to ensure that there is a key corresponding to \
	the argument passed in to that method (if the run-time value can be determined \
	at compile time).\
	<p>\
	<b>Example</b>\
	<br/>\
	If a subclass had a field like the following:\
	<p><code>\
	\tpublic static String Externalized_String;\
	</code><p>\
	and the <code>messages.properties</code> file did not contain a key of \
	<code>Externalized_String</code>, then a violation would be created.

# 0 = missing key
missingMessage.missingKey.description = \
	The key {0} is missing from messages.properties
missingMessage.missingKey.explanation = \
	The key {0} is missing from messages.properties.

	missingMessage.missingKey.recommendation.name = Recommendation...
	missingMessage.missingKey.recommendation.description = \
		Add the key {0} to the messages.properties file.

# 0 = extra key
missingMessage.missingField.description = \
	The key {0} is not referenced by a field
missingMessage.missingField.explanation = \
	The key {0} is defined in the messages.properties file, but is not \
	accessible as a field.

	missingMessage.missingField.recommendation.name = Recommendation...
	missingMessage.missingField.recommendation.description = \
		Remove the key {0} from the messages.properties file or add a field \
		corresponding to it.

################################################################################

missingMessageInAssert.name = Missing Message in Assert
missingMessageInAssert.longName = \
	Assertions should have messages
missingMessageInAssert.description = \
	<b>Summary</b>\
	<br/>\
	Assertions should have messages.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for invocations of the assert and fail methods defined \
	in junit.framework.Assert which do not have a message. A message should be \
	added so that the framework can provide better information about why the \
	test failed.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following invocation would be flagged as a violation:\
	<p><code>\
	\tassertEquals(expectedCount, actualCount);\
	</code>

missingMessageInAssert.missingMessage.description = \
	Missing message in assertion method "{0}"
missingMessageInAssert.missingMessage.explanation = \
	The assertion or fail method "{0}" does not have a message

	missingMessageInAssert.missingMessage.insertMessage.name = Insert message
	missingMessageInAssert.missingMessage.insertMessage.description = \
		Inserts an empty String message into the method invocation

################################################################################

missingAssertInTestMethod.name =  Missing Assert in JUnit Test Method
missingAssertInTestMethod.longName = \
	JUnit tests should include at least one assertion
missingAssertInTestMethod.description = \
	<b>Summary</b>\
	<br/>\
	JUnit tests should include at least one assertion.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule flags any JUnit test method that does not contain any \
	assertions. Missing Assertions usually indicate weak or incomplete test \
	cases. Using assert with messages provide a clear idea of what the test \
	does. \
	<p>\
	<b>Example</b>\
	<br/>\
	The following test case would be flagged as a violation because it does not \
	contain any assertions:\
	<p><code>\
	public class MissingAssert extends TestCase{<br>\
  	\tpublic void testSomething(){\
    <br>\t\tFoo f = findFoo();\
    \<br>\t\tf.doWork();\
  	}\
	}\
	</code>

missingAssertInTestMethod.missingAssert.description = \
	Missing assert in test method "{0}"
missingAssertInTestMethod.missingAssert.explanation = \
	The test method "{0}" does not invoke an assertion method

	missingAssertInTestMethod.missingAssert.recommendation.name = Recommendation...
	missingAssertInTestMethod.missingAssert.recommendation.description = \
		Include an assertion in the test method 

################################################################################

missingOrMisplacedManifestVersion.name = Missing Or Misplaced Manifest Version
missingOrMisplacedManifestVersion.longName = \
	Manifest files must start with a manifest version
missingOrMisplacedManifestVersion.description = \
	<b>Summary</b>\
	<br/>\
	Every manifest file must begin with the manifest version.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds manifest files that do not contain an attribute named \
	"Manifest-Version", or in which the manifest version is not the first \
	attribute listed in the file.

missingOrMisplacedManifestVersion.missing.description = \
	Missing manifest version
missingOrMisplacedManifestVersion.missing.explanation = \
	There is no manifest version in this manifest file.

	missingOrMisplacedManifestVersion.missing.recommendation.name = Recommendation...
	missingOrMisplacedManifestVersion.missing.recommendation.description = \
		Add a manifest version to the file.

missingOrMisplacedManifestVersion.misplaced.description = \
	Misplaced manifest version
missingOrMisplacedManifestVersion.misplaced.explanation = \
	The manifest version should be the first attribute in the manifest file.

	missingOrMisplacedManifestVersion.misplaced.recommendation.name = Recommendation...
	missingOrMisplacedManifestVersion.misplaced.recommendation.description = \
		Move the manifest version attribute to the top of the file.

################################################################################

missingOrMisplacedSectionName.name = Missing Or Misplaced Section Name
missingOrMisplacedSectionName.longName = \
	Manifest file sections must start with a name
missingOrMisplacedSectionName.description = \
	<b>Summary</b>\
	<br/>\
	Every section in a manifest file must begin with a name.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds manifest file sections that do not contain an \
	attribute named "Name", or in which the name is not the first \
	attribute listed in the file.

missingOrMisplacedSectionName.missing.description = \
	Missing section name
missingOrMisplacedSectionName.missing.explanation = \
	There is no name in this section of the manifest file.

	missingOrMisplacedSectionName.missing.recommendation.name = Recommendation...
	missingOrMisplacedSectionName.missing.recommendation.description = \
		Add a name attribute to the section.

missingOrMisplacedSectionName.misplaced.description = \
	Misplaced section name
missingOrMisplacedSectionName.misplaced.explanation = \
	The name should be the first attribute in the section.

	missingOrMisplacedSectionName.misplaced.recommendation.name = Recommendation...
	missingOrMisplacedSectionName.misplaced.recommendation.description = \
		Move the name attribute to the top of the section.

################################################################################

missingStaticMethod.name = Missing static method in non-instantiable class
missingStaticMethod.longName = \
	Non-instantiable classes should have at least one static method
missingStaticMethod.description = \
	<b>Summary</b>\
	<br/>\
	Non-instantiable classes should have at least one static method.\
	<p>\
	<b>Description</b>\
	<br/>\
	If a class has been made non-instantiable by making all constructors private, \
	it should define at least one non-private static method, otherwise the class will be \
	unusable.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following would be flagged as a violation: \
	<p><code>\
	\tpublic class Foo {<br>\
	\t\tprivate Foo() {<br>\
	\t\t}<br>\
	\t}\
	</code>

#missingStaticMethod.noMethods.description = \
#	Non-instantiable class has no methods.
#missingStaticMethod.noMethods.explanation = \
#	The class <code>{0}</code> has no non-private constructors, and no methods.
#
#	missingStaticMethod.noMethods.recommendation.name = Recommendation...
#	missingStaticMethod.noMethods.recommendation.description = \
#		Add some static methods to <code>{0}</code>.
#
#missingStaticMethod.noStaticMethods.description = \
#	Non-instantiable class has no static methods.
#missingStaticMethod.noStaticMethods.explanation = \
#	The class <code>{0}</code> has no non-private constructors, and no \
#	static methods.
#
#	missingStaticMethod.noStaticMethods.recommendation.name = Recommendation...
#	missingStaticMethod.noStaticMethods.recommendation.description = \
#		Consider making one or more constructors visible, or making one \
#		or more methods static.
#
#missingStaticMethod.noVisibleStaticMethods.description = \
#	Non-instantiable class has no non-private static methods.
#missingStaticMethod.noVisibleStaticMethods.explanation = \
#	The class <code>{0}</code> has no non-private constructors, and no \
#	non-private static methods.
#
#	missingStaticMethod.noVisibleStaticMethods.recommendation.name = Recommendation...
#	missingStaticMethod.noVisibleeStaticMethods.recommendation.description = \
#		Consider making one or more constructors visible, or making one or more \
#		static methods visible.
#
missingStaticMethod.missing.description = \
	Non-instantiable class has no non-private static methods
missingStaticMethod.missing.explanation = \
	The class <code>{0}</code> has no non-private constructors, and no \
	non-private static methods.

	missingStaticMethod.missing.recommendation.name = Recommendation...
	missingStaticMethod.missing.recommendation.description = \
		Consider making one or more constructors visible, making one or more \
		static methods visible, or making one or more instance methods static..

################################################################################

missingUpdateInFor.name = Missing Update in For Statement
missingUpdateInFor.longName = \
	Always include an update clause in for statements
missingUpdateInFor.description = \
	<b>Summary</b>\
	<br/>\
	Every for statement should have an update clause.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for the existence of an update clause within every \
	for statement. If a for statement does not require an update clause it \
	should be replaced by a while statement.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following for statement would be flagged as a violation:\
	<p><code>\
	\tfor (Iterator i = set.iterator(); i.hasNext(); ) {<br>\
	\t\tObject element = i.next();<br>\
	\t\t...<br>\
	\t}\
	</code>

missingUpdateInFor.missing.description = \
	Missing update in for statement
missingUpdateInFor.missing.explanation = \
	The for statement does not have an update clause. Consider replacing it \
	with a while statement for clarity.

	missingUpdateInFor.missing.recommendation.name = Recommendation...
	missingUpdateInFor.missing.recommendation.description = \
		Add an updated clause to the for statement or consider replacing it \
		with a while statement.

################################################################################

misspelledMethodName.name = Misspelled Method Name
misspelledMethodName.longName = \
	Spell methods that override superclass methods the same as the overridden method
misspelledMethodName.description = \
	<b>Summary</b>\
	<br/>\
	Methods with incorrectly spelled names do not override the superclass \
	method.\
	<p>\
	<b>Description</b>\
	<br/>\
	This rule detects small differences in spelling between methods defined \
	in two different types in a hierarchy where both methods have the same \
	parameter lists. Such methods may be intended to be identical but only \
	the superclass method will be invoked.

misspelledMethodName.misspelledMethod.description = \
	The method "{1}" differs slightly from the method defined in "{0}"
misspelledMethodName.misspelledMethod.explanation = \
	The method name "{1}" differs slightly from the method "{2}" \
	defined in "{0}".

	misspelledMethodName.misspelledMethod.resolution.name = Rename "{0}"
	misspelledMethodName.misspelledMethod.resolution.description = \
		Rename the method from "{0}" to "{1}".

################################################################################

modifierOrder.name = Modifier Order
modifierOrder.longName = \
	List modifiers in the standard order
modifierOrder.description = \
	<b>Summary</b>\
	<br/>\
	Modifiers should always appear in the standard order.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks the order in which the modifiers were declared and \
	reports any deviation from the standard (Sun defined) order.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tfinal static public int ANSWER = 42;\
	</code>

modifierOrder.wrongOrder.description = \
	Incorrect modifier order: "{0}" should appear before "{1}"
modifierOrder.wrongOrder.explanation = \
	The modifier "{0}" should be before the modifier "{1}". Keeping modifiers \
	in a standard order improves readability.

	modifierOrder.wrongOrder.reorder.name = Re-order the modifiers
	modifierOrder.wrongOrder.reorder.description = \
		Re-order the modifiers.

################################################################################

multipleReturns.name = Multiple Return Statements
multipleReturns.longName = Methods should have a single return statement
multipleReturns.description = \
	<b>Summary</b>\
	<br/>\
	Methods should have a single return statement.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for methods that contain multiple return statements \
	(or constructors or void methods that contain any return statements). Such \
	methods are generally too complex and need to be rewritten or refactored \
	in order to make their logic easier to understand.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following method would be flagged:\
	<p><code>\
	\tpublic int returnCode(String str)<br>\
	\t{<br>\
	\t\tif (str == null) {<br>\
	\t\t\treturn 0;<br>\
	\t\t} else if ("ABC".equals(str)) {<br>\
	\t\t\treturn 1;<br>\
	\t\t} else if ("123".equals(str)) {<br>\
	\t\t\treturn 2;<br>\
	\t\t} else {<br>\
	\t\t\treturn -1;<br>\
	\t\t}<br>\
	\t}\
	</code>

# {0} = method name
multipleReturns.multiple.description = \
	Multiple returns from method {0}
multipleReturns.multiple.explanation = \
	The method {0} contains multiple return statements making it harder to \
	understand.

	multipleReturns.multiple.recommendation.name = Recommendation...
	multipleReturns.multiple.recommendation.description = \
		Rewrite the method so that there is a single return statement at the end.

################################################################################

mutableConstantField.name = Mutable Constant Field
mutableConstantField.longName = Disallows mutable objects to be declared as \
	public, static and final
mutableConstantField.description = \
	<b>Summary</b>\
	<br/>\
	Disallows public static final mutable type fields.\
	<p>\
	<b>Description</b>\
	<br/>\
	Checks that public static final fields are either default immutable types \
	like java.lang.Integer or are user-specified immutable types, declared \
	through the audit rule preferences.\
	<p>\
	<b>Security Implications</b>\
	<br/>\
	Public static final mutable fields are accessible and changeable from all \
	points in the application and thus are targets by malicious users.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following would be flagged:\
	<p><code>\
	\tpublic static final MutableType mutableType;\
	</code>

# {0} = method name of the type found in violation

mutableConstantField.fieldFound.description = \
	Mutable type "{0}" declared as public, static and final
mutableConstantField.fieldFound.explanation = \
	Mutable types should not be declared as public, static and final.

	mutableConstantField.fieldFound.recommendation.name = Recommendation...
	mutableConstantField.fieldFound.recommendation.description = \
		Do not declare this type as public, static and final, since it is a mutable type.

	mutableConstantField.fieldFound.setImmutable.name = Declare Immutable
	mutableConstantField.fieldFound.setImmutable.description = \
		Declare the type to be immutable. The type will be treated as such \
		by all audit rules.

################################################################################

mutabilityOfArrays.name = Mutability Of Arrays
mutabilityOfArrays.longName = \
	Arrays are not mutable, care should be taken in their assignments and \
	returns
mutabilityOfArrays.description = \
	<b>Summary</b>\
	<br/>\
	Do not return internal arrays from non-private methods.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule flags unsafe set or get of an internal array field, this \
	includes flagging: 1) internal array returns from a non-private method and \
	2) setting an internal array with parameter given through a non-private \
	method.\
	<p>\
	<b>Security Implications</b>\
	<br/>\
	With arrays, it is safer to make a copy before the set or return. This way, \
	the internal data cannot be manipulated outside of the class.\
	<p>\
	<b>Example</b>\
	<br/>\
	Given the following field declaration:\
	<p><code>\
	\tint[] integerArray = ...;<br>\
	<br>\
	\tpublic int[] getIntegerArray() {<br>\
	\t\treturn integerArray;<br>\
	\t}\
	</code>

mutabilityOfArrays.returnInternalArray.description = \
	Found a non-private method returning an internal array
mutabilityOfArrays.returnInternalArray.explanation = \
	Internal arrays returned in this way can be changed by the caller.

	mutabilityOfArrays.returnInternalArray.recommendation.name = Recommendation...
	mutabilityOfArrays.returnInternalArray.recommendation.description = \
		Do not return this internal array directly.

mutabilityOfArrays.setInternalArray.description = \
	Found a non-private method setting an internal array
mutabilityOfArrays.setInternalArray.explanation = \
	Internal arrays set in this way can be changed by the caller.
	
	mutabilityOfArrays.setInternalArray.recommendation.name = Recommendation...
	mutabilityOfArrays.setInternalArray.recommendation.description = \
		Do not set this internal array directly.

################################################################################

multiplicationOrDivisionByPowersOf2.name = Multiplication Or Division By Powers of 2
multiplicationOrDivisionByPowersOf2.longName = \
	Don't multiply or divide by powers of 2
multiplicationOrDivisionByPowersOf2.description = \
	<b>Summary</b>\
	<br/>\
	Do not multiply or divide by powers of 2.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for multiplication or division by powers of 2. \
	"*" and "/" are an expensive operations. The shift operator is faster and \
	more efficient.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following expression would be flagged as a violation:\
	<p><code>\
	\tlist.size() * 2;\
	</code>

multiplicationOrDivisionByPowersOf2.division.description = \
	Do not divide by powers of 2: use ">> {1}" rather than "/ {0}"
multiplicationOrDivisionByPowersOf2.division.explanation = \
	Do not divide by powers of 2, so ">> {1}" should be used rather than \
	"/ {0}". "/" is an expensive operation. The shift operator is faster and \
	more efficient.

	multiplicationOrDivisionByPowersOf2.division.recommendation.name = Recommendation...
	multiplicationOrDivisionByPowersOf2.division.recommendation.description = \
		Use the ">>" operator rather than "/".

multiplicationOrDivisionByPowersOf2.multiplication.description = \
	Do not multiply by powers of 2: use "<< {1}" rather than "* {0}"
multiplicationOrDivisionByPowersOf2.multiplication.explanation = \
	Do not divide by powers of 2, so "<< {1}" should be used rather than \
	"* {0}". "*" is an expensive operation. The shift operator is faster and \
	more efficient.

	multiplicationOrDivisionByPowersOf2.multiplication.recommendation.name = Recommendation...
	multiplicationOrDivisionByPowersOf2.multiplication.recommendation.description = \
		Use the "<<" operator rather than "*".

################################################################################

noAbstractMethods.name = No Abstract Methods
noAbstractMethods.longName = \
	Declare classes to be concrete unless they declare abstract methods
noAbstractMethods.description = \
	<b>Summary</b>\
	<br/>\
	Classes should not be declared abstract unless they define abstract \
	methods.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds classes that are declared to be abstract but that do \
	not define any abstract methods.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following class declaration would be flagged as a violation because it \
	does not define any abstract methods:\
	<p><code>\
	\tpublic abstract class Widget<br>\
	\t{<br>\
	\t}\
	</code>

noAbstractMethods.error.description = \
	Abstract class without abstract methods: {0}
noAbstractMethods.error.explanation = \
	The class {0} does not need to be declared to be abstract because it does \
	not declare any abstract methods. Consider removing the modifier.

	noAbstractMethods.error.makeConcrete.name = Make concrete
	noAbstractMethods.error.makeConcrete.description = \
		Make the class concrete by removing the "abstract" modifier.

################################################################################

noDBDriverLoading.name = No DB Driver Loading
noDBDriverLoading.longName = \
	Certain connection classes should not be referenced
noDBDriverLoading.description = \
	<b>Summary</b>\
	<br/>\
	Do not reference database driver loading classes.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for classes that are used to connect to databases \
	that should not be used within the code.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the class java.sql.DriverManager is on the list of disallowed classes, \
	then the following method invocation would be flagged as a violation:\
	<p><code>\
	\tDriverManager.getDrivers();\
	</code>

noDBDriverLoading.invalidTypeReference.description = \
	DB Driver invoked
noDBDriverLoading.invalidTypeReference.explanation = \
	The class {0} is a class that should not be referenced.

	noDBDriverLoading.invalidTypeReference.recommendation.name = Recommendation...
	noDBDriverLoading.invalidTypeReference.recommendation.description = \
		Don''t reference the disallowed type.

################################################################################

noExplicitExit.name = No Explicit Exit
noExplicitExit.longName = \
	Don't explicitly invoke the method exit() from either System or Runtime
noExplicitExit.description = \
	<b>Summary</b>\
	<br/>\
	The methods System.exit(int), Runtime.exit(int), and Runtime.halt(int) \
	should not be invoked.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for invocations of either of the exit methods, \
	System.exit(int) and Runtime.exit(int), or Runtime.halt(int).\
	<p>\
	<b>Example</b>\
	<br/>\
	The following invocation would be flagged as a violation:\
	<p><code>\
	\tSystem.exit(0);\
	</code>

noExplicitExit.exitInvoked.description = \
	Exit method invoked
noExplicitExit.exitInvoked.explanation = \
	The method exit() should not be invoked.

	noExplicitExit.exitInvoked.recommendation.name = Recommendation...
	noExplicitExit.exitInvoked.recommendation.description = \
		Rework the program logic to remove the need for invoking exit().

################################################################################

noExplicitGC.name = No Explicit Garbage Collector
noExplicitGC.longName = \
	Don't explicitly invoke the method gc() from either System or Runtime
noExplicitGC.description = \
	<b>Summary</b>\
	<br/>\
	The methods System.gc() and Runtime.gc() should not be invoked.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for invocations of either of the garbage collection \
	methods: System.gc() and Runtime.gc().\
	<p>\
	<b>Example</b>\
	<br/>\
	The following invocation would be flagged as a violation:\
	<p><code>\
	\tSystem.gc();\
	</code>

noExplicitGC.gcInvoked.description = \
	Garbage Collector method invoked
noExplicitGC.gcInvoked.explanation = \
	The method gc() should not be invoked.

	noExplicitGC.gcInvoked.remove.name = Remove gc()
	noExplicitGC.gcInvoked.remove.description = \
		Remove the garbage collection call.

################################################################################

noExplicitThisUseInEJBs.name = No Explicit This Use in EJB's
noExplicitThisUseInEJBs.longName = \
	Don't use the keyword "this" in EJB classes
noExplicitThisUseInEJBs.description = \
	<b>Summary</b>\
	<br/>\
	Don't use the keyword "this" in EJB classes.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for EJB classes (subclasses of EnterpriseBean) that \
	explicitly reference the bean using the keyword "this".\
	<p>\
	<b>Example</b>\
	<br/>\
	The following return statement would be flagged as a violation:\
	<p><code>\
	\treturn this;\
	</code>

noExplicitThisUseInEJBs.use.description = \
	Explicit use of "this"
noExplicitThisUseInEJBs.use.explanation = \
	The keyword "this" should not be used in an EJB class.

	noExplicitThisUseInEJBs.use.recommendation.name = Recommendation...
	noExplicitThisUseInEJBs.use.recommendation.description = \
		Use the getEJBObject() method from the context.

################################################################################

noInstanceFieldsInPortlets.name = No Instance Fields In Portlets
noInstanceFieldsInPortlets.longName = \
	Don't declare instance fields in portlets
noInstanceFieldsInPortlets.description = \
	<b>Summary</b>\
	<br/>\
	Portlets should not declare any instance fields.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for the declaration of instance fields in portlets.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following field would be flagged as a violation if it occurred \
	within a portlets:\
	<p><code>\
	\tprivate int useCount;\
	</code>

noInstanceFieldsInPortlets.declared.description = \
	Instance field declared in portlets
noInstanceFieldsInPortlets.declared.explanation = \
	An instance field is being declared in a portlets.

	noInstanceFieldsInPortlets.declared.recommendation.name = Recommendation...
	noInstanceFieldsInPortlets.declared.recommendation.description = \
		Remove the declaration of the instance field.

################################################################################

noInstanceFieldsInServlets.name = No Instance Fields In Servlets
noInstanceFieldsInServlets.longName = \
	Don't declare instance fields in servlets
noInstanceFieldsInServlets.description = \
	<b>Summary</b>\
	<br/>\
	Servlets should not declare any instance fields.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for the declaration of instance fields in servlets.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following field would be flagged as a violation if it occurred \
	within a servlet:\
	<p><code>\
	\tprivate int useCount;\
	</code>

noInstanceFieldsInServlets.declared.description = \
	Instance field declared in servlet
noInstanceFieldsInServlets.declared.explanation = \
	An instance field is being declared in a servlet.

	noInstanceFieldsInServlets.declared.recommendation.name = Recommendation...
	noInstanceFieldsInServlets.declared.recommendation.description = \
		Remove the declaration of the instance field.

################################################################################

noSetUpInConstructors.name = No Set-up in Constructors
noSetUpInConstructors.longName = \
	Don't include any set-up code in TestCase constructors
noSetUpInConstructors.description = \
	<b>Summary</b>\
	<br/>\
	TestCase constructors should not include any set-up code.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for constructors defined in test cases that do \
	more than invoke the superclass' constructor. Set-up should be performed \
	in either the setUp() method or the accessor method for one of the test \
	fixtures.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following constructor would be flagged as a violation if it occurred \
	within a test case class:\
	<p><code>\
	\tpublic MyTestCase(String testName)<br>\
	\t{<br>\
	\t\tsuper(testName);<br>\
	\t\temployee = new Employee("Jane Doe");<br>\
	\t}\
	</code>

noSetUpInConstructors.nonEmpty.description = \
	Possible set-up code in constructor
noSetUpInConstructors.nonEmpty.explanation = \
	The constructor contains code other than the invocation of the \
	superclass'' constructor, which might be set-up code for the tests.

	noSetUpInConstructors.nonEmpty.recommendation.name = Recommendation...
	noSetUpInConstructors.nonEmpty.recommendation.description = \
		Move any set-up code into either the setUp() method or the accessor \
		method for one of the test fixtures.

################################################################################

nonBlankFinalInstanceField.name = Non-blank Final Instance Field
nonBlankFinalInstanceField.longName = \
	Leave final instance fields blank (without an initializer)
nonBlankFinalInstanceField.description = \
	<b>Summary</b>\
	<br/>\
	Final instance fields should be blank.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds instance fields that are marked as final and have a \
	value assigned to them in the declaration. If the value of the field is \
	the same for all instances, which it must be in this case, it should be \
	a static field instead. If the value can be different in different \
	instances, then either the field should not be final or the field should \
	be assigned its value in a constructor.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following field declaration would be flagged as a violation:\
	<p><code>\
	\tprivate final int maxItemCount = 64;\
	</code>

nonBlankFinalInstanceField.nonBlank.description = \
	Non-blank final instance field: {0}
nonBlankFinalInstanceField.nonBlank.explanation = \
	The field "{0}" should either be declared to be a static field or it \
	should have its value assigned in a constructor.

	nonBlankFinalInstanceField.nonBlank.makeStatic.name = Make static
	nonBlankFinalInstanceField.nonBlank.makeStatic.description = \
		Make the field(s) static.

################################################################################

nonCaseLabelInSwitch.name = Non-case Label in Switch
nonCaseLabelInSwitch.longName = \
	Don't include non-case labels within a switch statement
nonCaseLabelInSwitch.description = \
	<b>Summary</b>\
	<br/>\
	Switch statements should only contain case labels.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds labels other that case labels that appear within a \
	switch statement. Such labels are often the result of forgetting to type \
	the keyword "case" rather than an intent to use a labeled statement. If \
	it isn't the result of an accident, having a labeled statement in a switch \
	statement makes the logic much harder to understand because it can easily \
	be mistaken for a case label.\
	<p>\
	<b>Example</b>\
	<br/>\
	The statement labeled "SAVINGS_ACCOUNT" would be flagged as a violation:\
	<p><code>\
	\tswitch (accountType) {<br>\
	\tcase CHECKING_ACCOUNT:<br>\
	\t\tbalance = ((CheckingAccount) account).getCheckingBalance();<br>\
	\tSAVINGS_ACCOUNT:<br>\
	\t\tbalance = ((SavingsAccount) account).getSavingsBalance();<br>\
	\t}\
	</code>

nonCaseLabelInSwitch.label.description = \
	Non-case label in switch: {0}
nonCaseLabelInSwitch.label.explanation = \
	Non-case labels (those not preceded by the keyword "case") are typically \
	a typing error. Even when they''re not, they tend to make the code harder \
	to understand and should be avoided.

	nonCaseLabelInSwitch.label.recommendation.name = Recommendation...
	nonCaseLabelInSwitch.label.recommendation.description = \
		Add the keyword "case" or remove the label.

################################################################################

nonPrivateConstructorInStaticType.name = Non-private Constructor in Static Type
nonPrivateConstructorInStaticType.longName = \
	Define only private constructors in classes with no instance methods
nonPrivateConstructorInStaticType.description = \
	<b>Summary</b>\
	<br/>\
	Constructors in classes containing only static members should be private.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds non-private constructors in classes containing only \
	static members. There is no value in creating an instance of a type that \
	contains only static members. To prevent such instantiation, ensure that \
	type has a single, no-argument, private constructor and no other \
	constructors.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following class declaration would be flagged as a violation:\
	<p><code>\
	\tpublic class Utilities<br>\
	\t{<br>\
	\t\tpublic static int getSize(List list)<br>\
	\t\t{<br>\
	\t\t\t...<br>\
	\t\t}<br>\
	\t}\
	</code>

nonPrivateConstructorInStaticType.nonPrivateConstructor.description = \
	Non-private constructor in class containing only static members
nonPrivateConstructorInStaticType.nonPrivateConstructor.explanation = \
	There is no value in creating an instance of a type that contains only \
	static members. To prevent such instantiation, ensure that type has a \
	single, no-argument, private constructor and no other constructors.

	nonPrivateConstructorInStaticType.nonPrivateConstructor.makePrivate.name = Make private
	nonPrivateConstructorInStaticType.nonPrivateConstructor.makePrivate.description = \
		Change the visibility of the constructor to private.

nonPrivateConstructorInStaticType.hasArguments.description = \
	Constructor with arguments in class containing only static members
nonPrivateConstructorInStaticType.hasArguments.explanation = \
	There is no value in creating an instance of a type that contains only \
	static members. To prevent such instantiation, ensure that type has a \
	single, no-argument, private constructor and no other constructors.

	nonPrivateConstructorInStaticType.hasArguments.delete.name = Delete constructor
	nonPrivateConstructorInStaticType.hasArguments.delete.description = \
		Delete the constructor.

################################################################################

nonProtectedConstructorInAbstractType.name = Non-protected Constructor in Abstract Type
nonProtectedConstructorInAbstractType.longName = \
	Define only protected constructors in abstract classes
nonProtectedConstructorInAbstractType.description = \
	<b>Summary</b>\
	<br/>\
	Constructors in abstract classes should be protected.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds non-protected constructors in abstract classes. \
	Constructors in an abstract class can only be called from an instantiating \
	subclass. Marking all constructors protected will help indicate this.\
	<p>\
	<b>Example</b>\
	<br/>\
	The constructor in the following class declaration would be flagged as a \
	violation:\
	<p><code>\
	\tpublic abstract class Widget<br>\
	\t{<br>\
	\t\tpublic Widget()<br>\
	\t\t{<br>\
	\t\t\t...<br>\
	\t\t}<br>\
	\t}\
	</code>

nonProtectedConstructorInAbstractType.nonProtectedConstructor.description = \
	Non-protected constructor in abstract class
nonProtectedConstructorInAbstractType.nonProtectedConstructor.explanation = \
	Constructors in an abstract class can only be called from an instantiating \
	subclass. Marking all constructors protected will help indicate this.

	nonProtectedConstructorInAbstractType.nonProtectedConstructor.makeProtected.name = Make protected
	nonProtectedConstructorInAbstractType.nonProtectedConstructor.makeProtected.description = \
		Change the visibility of the constructor to be protected.

################################################################################

nonserializableClassDeclaresReadObjectOrWriteObject.name = Non-serializable Class Declares readObject or writeObject
nonserializableClassDeclaresReadObjectOrWriteObject.longName = Non-serializable class should not declare readObject or writeObject
nonserializableClassDeclaresReadObjectOrWriteObject.description = \
	<b>Summary</b>\
	<br/>\
	Classes that do not implement Serializable should not declare methods named \
	readObject or writeObject.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for declarations of methods named readObject or \
	writeObject in classes that do not implement the interface java.io.Serializable.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following method would be flagged as a violation:\
	<p><code>\
	\tpublic class NonSerializable<br>\
	\t{<br>\
	\t\tprivate void readObject(ObjectInputStream in)<br>\
	\t\t\tthrows IOException, ClassNotFoundException<br>\
	\t\t{<br>\
	\t\t\t...<br>\
	\t\t}<br>\
	\t}\
	</code>

nonserializableClassDeclaresReadObjectOrWriteObject.nonSerializeableClass.description = \
	readObject and writeObject are defined in a non-serializable class
nonserializableClassDeclaresReadObjectOrWriteObject.nonSerializeableClass.explanation = \
	The serialization methods will only be used if the class implements java.io.Serializable.

	nonserializableClassDeclaresReadObjectOrWriteObject.nonSerializeableClass.recommendation.name = Recommendation...
	nonserializableClassDeclaresReadObjectOrWriteObject.nonSerializeableClass.recommendation.description = \
		Define the class to implement java.io.Serializable.

nonserializableClassDeclaresReadObjectOrWriteObject.soloReadObject.description = \
	readObject is defined in a non-serializable class
nonserializableClassDeclaresReadObjectOrWriteObject.soloReadObject.explanation = \
	readObject should only be defined in classes that are serializable.

	nonserializableClassDeclaresReadObjectOrWriteObject.soloReadObject.recommendation.name = Recommendation...
	nonserializableClassDeclaresReadObjectOrWriteObject.soloReadObject.recommendation.description = \
		Rename the method.

nonserializableClassDeclaresReadObjectOrWriteObject.soloWriteObject.description = \
	writeObject is defined in a non-serializable class
nonserializableClassDeclaresReadObjectOrWriteObject.soloWriteObject.explanation = \
	writeObject should only be defined in classes that are serializable.

	nonserializableClassDeclaresReadObjectOrWriteObject.soloWriteObject.recommendation.name = Recommendation...
	nonserializableClassDeclaresReadObjectOrWriteObject.soloWriteObject.recommendation.description = \
		Rename the method.

################################################################################

nonserializableClassDeclaresSerialVersionUID.name = Non-serializable Class Declares serialVersionUID
nonserializableClassDeclaresSerialVersionUID.longName = Non-serializable class should not declare serialVersionUID
nonserializableClassDeclaresSerialVersionUID.description = \
	<b>Summary</b>\
	<br/>\
	Classes that do not implement Serializable should not declare a field named \
	serialVersionUID.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for declarations of fields named serialVersionUID in \
	classes that do not implement the interface java.io.Serializable.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following field would be flagged as a violation:\
	<p><code>\
	\tpublic class NonSerializable<br>\
	\t{<br>\
	\t\tprivate static final long serialVersionUID = 0x10F7L;<br>\
	\t}\
	</code>

nonserializableClassDeclaresSerialVersionUID.classShouldBeSerializable.description = \
	A class that does not inherit from java.io.Serializable declares a field \
	named serialVersionUID
nonserializableClassDeclaresSerialVersionUID.classShouldBeSerializable.explanation = \
	The class should be defined to inherit from Serializable, since it \
	implements the serialization methods.

	nonserializableClassDeclaresSerialVersionUID.classShouldBeSerializable.recommendation.name = Recommendation...
	nonserializableClassDeclaresSerialVersionUID.classShouldBeSerializable.recommendation.description = \
		Redefine the class to implement java.io.Serializable

nonserializableClassDeclaresSerialVersionUID.classShouldNotDefineSerialVersionUID.description = \
	A class that is not serializable declares a method named serialVersionUID
nonserializableClassDeclaresSerialVersionUID.classShouldNotDefineSerialVersionUID.explanation = \
	The static field serialVersionUID is used by serialization and should not \
	be defined by non-serializable classes.

	nonserializableClassDeclaresSerialVersionUID.classShouldNotDefineSerialVersionUID.recommendation.name = Recommendation...
	nonserializableClassDeclaresSerialVersionUID.classShouldNotDefineSerialVersionUID.recommendation.description = \
		Remove the definition of serialVersionUID.

################################################################################

nonTerminatedCaseClause.name = Non-terminated Case Clause
nonTerminatedCaseClause.longName = \
	Explicitly terminate case clauses
nonTerminatedCaseClause.description = \
	<b>Summary</b>\
	<br/>\
	Case clauses should never fall through into the following case.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for the existence of either a break, continue, \
	return, or throw statement at the end of each case clause in a switch \
	statement. The lack of either of these statements means that control will \
	fall through to the next case, which is usually not what is intended. It \
	is possible to configure this rule to also accept a user-defined comment \
	(such as "no break") as a signal that the developer knew what was \
	happening.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tswitch (accountType) {<br>\
	\tcase CHECKING_ACCOUNT:<br>\
	\t\tbalance = ((CheckingAccount) account).getCheckingBalance();<br>\
	\tcase SAVINGS_ACCOUNT:<br>\
	\t\tbalance = ((SavingsAccount) account).getSavingsBalance();<br>\
	\t}\
	</code>

nonTerminatedCaseClause.final.description = \
	Missing terminating statement after last case
nonTerminatedCaseClause.final.explanation = \
	There should be a terminating statement after the last case clause in \
	order to reduce the possibility of unintentionally falling through if \
	someone else should add another case clause at a later time.

	nonTerminatedCaseClause.final.recommendation.name = Recommendation...
	nonTerminatedCaseClause.final.recommendation.description = \
		Add a terminating statement after the last case clause.

nonTerminatedCaseClause.internal.description = \
	Missing terminating statement before {0}
nonTerminatedCaseClause.internal.explanation = \
	There is no terminating statement before the case clause, which usually \
	indicates a problem with the code. If this was intentional, consider \
	adding a marker comment to make the intent explicit.

	nonTerminatedCaseClause.internal.recommendation.name = Recommendation...
	nonTerminatedCaseClause.internal.recommendation.description = \
		Add a terminating statement after the before the case clause.

################################################################################

noPublicMembers.name = No Public Members
noPublicMembers.longName = \
	Don't declare classes as public unless they define public members
noPublicMembers.description = \
	<b>Summary</b>\
	<br/>\
	Classes should not be declared public unless they define public members.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds classes that are declared to be public but that do \
	not define any public members or at least one protected constructor. \
	Consider restricting such classes to package scope.

noPublicMembers.error.description = \
	Public class without public members: {0}
noPublicMembers.error.explanation = \
	A class {0} should have at least one public member or at least one \
	protected constructor to be useful when instantiated or extended. Consider \
	restricting the class to package scope.

	noPublicMembers.error.makePackage.name = Make package
	noPublicMembers.error.makePackage.description = \
		Change the visibility of the class to package.

################################################################################

noRunMethod.name = No Run Method
noRunMethod.longName = \
	Implement the method run() in all subclasses of Thread
noRunMethod.description = \
	<b>Summary</b>\
	<br/>\
	Subclasses of Thread should implement the run() method.\
	<p>\
	<b>Description</b>\
	<br/>\
	Subclasses of Thread should implement the run() method so that they will \
	have the behavior for which they were created.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following class will be flagged as a violation because it does not \
	implement a run() method even though it subclasses java.lang.Thread:\
	<p><code>\
	\tpublic class SuperThread extends Thread<br>\
	\t{<br>\
	\t}\
	</code>

noRunMethod.missing.description = \
	Missing run() method in subclass of Thread
noRunMethod.missing.explanation = \
	Subclasses of Thread should implement the run() method so that they will \
	have the behavior for which they were created.

	noRunMethod.missing.recommendation.name = Recommendation...
	noRunMethod.missing.recommendation.description = \
		Implement the public, zero-argument run() method in your subclass of \
		Thread.

################################################################################

nullPointerDereference.name = Null Pointer Dereference
nullPointerDereference.longName = \
	Null pointers should not be dereferenced
nullPointerDereference.description = \
	<b>Summary</b>\
	<br/>\
	Null pointers should not be dereferenced.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for places where a value that is known to be null \
	is being dereferenced in a way that is guaranteed to produce a \
	NullPointerException. \
	<p>\
	<b>Example</b>\
	<br/>\
	The following code will cause a violation because the variable <code>o</code> \
	is known to have a null value:\
	<p><code>\
	\tObject o = null;<br/>\
	\tSystem.out.println(o.getClass().getName());\
	</code>

nullPointerDereference.null.description = \
	A null pointer is being dereferenced
nullPointerDereference.null.explanation = \
	A value that is known to be null is being dereferenced in a way that is \
	guaranteed to produce a NullPointerException.

	nullPointerDereference.null.recommendation.name = Recommendation...
	nullPointerDereference.null.recommendation.description = \
		Rewrite the surrounding code so that the value cannot be null.

################################################################################

numericLiterals.name = Numeric Literals
numericLiterals.longName = \
	Only use numeric literals to initialize constants
numericLiterals.description = \
	<b>Summary</b>\
	<br/>\
	Numeric literals should not appear in code.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for numeric literals within the code that are not \
	included in a user-defined list of acceptable literal values. The list \
	initially contains only the values "-1", "0", and "1".\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tint answer = 42;\
	</code>

numericLiterals.invalid.description = \
	Invalid numeric literal: {0}
numericLiterals.invalid.explanation = \
	Numeric literals should rarely be used because their meaning is not \
	clear. Consider defining a constant name to represent the value.

	numericLiterals.invalid.recommendation.name = Recommendation...
	numericLiterals.invalid.recommendation.description = \
		Consider defining a constant name to represent the value.

################################################################################

obeyGeneralContractOfEquals.name = Obey General Contract of Equals
obeyGeneralContractOfEquals.longName = \
	Obey the general contract when overriding equals()
obeyGeneralContractOfEquals.description = \
	<b>Summary</b>\
	<br/>\
	Obey the general contract when overriding equals().\
	<p>\
	<b>Description</b>\
	<br/>\
	The equals() method defined in Object is intended to be overridden by \
	subclasses but each subclass must obey the general contract specified by \
	the superclass. Classes should not use the name "equals" for methods that \
	take any parameters other than a single Object. The body of the method \
	should be coded defensively to accept any class of object as its argument.\
	<p>\
	<b>Example</b>\
	<br/>\
	The style of equals() definition that this rule looks for is this:\
	<p><code>\
	\tpublic boolean equals(Object arg) {<br>\
	\t\tif (this == arg)<br>\
	\t\t\treturn true;<br>\
	\t\tif (!(arg instanceof Foo))<br>\
	\t\t\treturn false;<br>\
	\t\tFoo fooArg = (Foo) arg;<br>\
	\t\t...<br>\
	\t}\
	</code><p>\
	"Foo" is the name of a type, which is either the class that declares this \
	equals() method or an interface that is implemented by that class.

obeyGeneralContractOfEquals.wrongParamType.description = \
	Wrong parameter type
obeyGeneralContractOfEquals.wrongParamType.explanation = \
	The type should always be "Object" never a subclass.

	obeyGeneralContractOfEquals.wrongParamType.recommendation.name = Recommendation...
	obeyGeneralContractOfEquals.wrongParamType.recommendation.description = \
		Change the name of the method.

obeyGeneralContractOfEquals.missingIdentityCheck.description = \
	Missing identity check
obeyGeneralContractOfEquals.missingIdentityCheck.explanation = \
	The equals method should compare the identity of the receiver and the \
	argument, returning true if they are the same.

	obeyGeneralContractOfEquals.missingIdentityCheck.recommendation.name = Recommendation...
	obeyGeneralContractOfEquals.missingIdentityCheck.recommendation.description = \
		Add a test for object identity.

obeyGeneralContractOfEquals.missingInheritanceCheck.description = \
	Missing inheritance check
obeyGeneralContractOfEquals.missingInheritanceCheck.explanation = \
	The equals method should check that the parameter is an instanceof the \
	same class or interface as this object.

	obeyGeneralContractOfEquals.missingInheritanceCheck.recommendation.name = Recommendation...
	obeyGeneralContractOfEquals.missingInheritanceCheck.recommendation.description = \
		Add an instanceof test.

obeyGeneralContractOfEquals.missingCast.description = \
	Missing cast
obeyGeneralContractOfEquals.missingCast.explanation = \
	The equals method should cast the argument to the type checked in the \
	instanceof statement.

	obeyGeneralContractOfEquals.missingCast.recommendation.name = Recommendation...
	obeyGeneralContractOfEquals.missingCast.recommendation.description = \
		Cast the parameter to the type specified in the instanceof test.

################################################################################

obsoleteModifierUsage.name = Obsolete Modifier Usage
obsoleteModifierUsage.longName = \
	Don't use obsolete modifiers
obsoleteModifierUsage.description = \
	<b>Summary</b>\
	<br/>\
	Obsolete modifiers should not be used.\
	<p>\
	<b>Description</b>\
	<br/>\
	There are a number of modifiers that can validly be specified according to \
	the Java Language Specification, but which Sun strongly discourages the \
	use of. This audit rule checks for places in which those modifiers are \
	used.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tpublic abstract interface SpecialObject<br>\
	\t{<br>\
	\t\t...<br>\
	\t}\
	</code>

obsoleteModifierUsage.obsolete.description = \
	Use of obsolete modifier: {0}
obsoleteModifierUsage.obsolete.explanation = \
	The use of the {0} modifier is strongly discouraged because it is always \
	implicit in the declaration. Consider removing it.

	obsoleteModifierUsage.obsolete.delete.name = Remove modifier
	obsoleteModifierUsage.obsolete.delete.description = \
		Remove the obsolete modifier.

################################################################################

oneStatementPerLine.name = One Statement per Line
oneStatementPerLine.longName = \
	Put each statement on its own line
oneStatementPerLine.description = \
	<b>Summary</b>\
	<br/>\
	Each statement should be on its own line.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for statements that occur on the same line as a \
	previous statement and flags them.\
	<p>\
	<b>Example</b>\
	<br/>\
	The second assignment statement would be flagged as needing to be on \
	its own line:\
	<p><code>\
	\tx = 0; y = 0;\
	</code>

oneStatementPerLine.onSameLine.description = \
	Multiple statements on one line
oneStatementPerLine.onSameLine.explanation = \
	There are multiple statements on one line. Each statement should be on \
	its own line.

	oneStatementPerLine.onSameLine.moveToNewLine.name = Move to New Line
	oneStatementPerLine.onSameLine.moveToNewLine.description = \
		Move the statement onto its own line.

################################################################################

overloadedEquals.name = Overloaded Equals
overloadedEquals.longName = \
	Overloaded equals should take Object parameter
overloadedEquals.description = \
	<b>Summary</b>\
	<br/>\
	The equals method should always take a parameter of type Object.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for declarations of the method equals whose single \
	parameter has a declared type different from java.lang.Object. Overloading \
	the equals method can easily lead to situations where \
	a.equals(b) != b.equals(a).\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tpublic boolean equals(String string) <br>\
	\t{ <br>\
	\t... <br>\
	\t}\
	</code>

overloadedEquals.local.description = \
	Equals is overloaded with non-object parameter
overloadedEquals.local.explanation = \
	The equals method should always take a parameter of type Object.

	overloadedEquals.local.recommendation.name = Recommendation...
	overloadedEquals.local.recommendation.description = \
		Modify the method so it takes Object as its only parameter. 

################################################################################

overloadedMethods.name = Overloaded Methods
overloadedMethods.longName = \
	Don't overload methods
overloadedMethods.description = \
	<b>Summary</b>\
	<br/>\
	Overloading method names can cause confusion and errors.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds methods that are overloaded. Overloaded methods are \
	methods that have the same name and the same number of parameters, but do \
	not have the same types of parameters. Such methods can cause confusion \
	and errors because it is not always obvious which method will be selected \
	at run time.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tpublic void process(Person person)<br>\
	\tpublic void process(Employee employee)\
	</code>

overloadedMethods.local.description = \
	The method {0} is overloaded
overloadedMethods.local.explanation = \
	There are multiple definitions of the method {0} with the same number of \
	parameters.

	overloadedMethods.local.recommendation.name = Recommendation...
	overloadedMethods.local.recommendation.description = \
		Either rename the methods so that they no longer have the same name, \
		or change the number of parameters.

overloadedMethods.inherited.description = \
	The method {0} is overloads a method inherited from {1}
overloadedMethods.inherited.explanation = \
	The method {0} has the same number of parameters as at least one method \
	with the same in the class {1}.

	overloadedMethods.inherited.recommendation.name = Recommendation...
	overloadedMethods.inherited.recommendation.description = \
		Either rename the methods so that they no longer have the same name, \
		or change the number of parameters.
	
################################################################################

overrideCloneJudiciously.name = Override Clone Judiciously
overrideCloneJudiciously.longName = \
	Be careful when overriding the clone() method
overrideCloneJudiciously.description = \
	<b>Summary</b>\
	<br/>\
	Be careful when defining clone. It is complex and not fully specified.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule helps to ensure that clone is used properly. It checks the \
	following items:<br>\
	1. Either the class is final or the clone method calls super.clone().<br>\
	2. Either the class is abstract or the clone method is declared public.<br>\
	3. Either the class is final or the clone method declaration has the \
	   proper throws clause.

overrideCloneJudiciously.noSuperClone.description = \
	A non-final class does not call super.clone() in its clone method
overrideCloneJudiciously.noSuperClone.explanation = \
	The clone method should call super.clone() in all classes that can be \
	subclassed.

	overrideCloneJudiciously.noSuperClone.recommendation.name = Recommendation...
	overrideCloneJudiciously.noSuperClone.recommendation.description = \
		Change the method to invoke super.clone() or redefine {0} to be final.

overrideCloneJudiciously.nonPublicClone.description = \
	{0} has a protected clone method
overrideCloneJudiciously.nonPublicClone.explanation = \
	The clone method should be public in classes that are not abstract.

	overrideCloneJudiciously.nonPublicClone.recommendation.name = Make the method public
	overrideCloneJudiciously.nonPublicClone.recommendation.description = \
		Change the method declaration from "protected" to "public".

overrideCloneJudiciously.missingThrows.description = \
	The clone method does not throw CloneNotSupportedException
overrideCloneJudiciously.missingThrows.explanation = \
	The clone method should throw CloneNotSupportedException if the class can \
	be subclassed.

	overrideCloneJudiciously.missingThrows.recommendation.name = Add CloneNotSupportedException
	overrideCloneJudiciously.missingThrows.recommendation.description = \
		Add CloneNotSupportedException to the list of thrown exceptions.

################################################################################

overridingEqualsAndHashCode.name = Override both equals() and hashCode()
overridingEqualsAndHashCode.longName = \
	Override both equals() and hashCode() when overriding either
overridingEqualsAndHashCode.description = \
	<b>Summary</b>\
	<br/>\
	Classes should override both equals() and hashCode() if they override \
	either.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds classes in which either the equals() or hashCode() \
	method has been overridden, but not both.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following class declaration will be flagged as a violation because \
	it overrides the method equals() but does not override the method \
	hashCode():\
	<p><code>\
	\tpublic class Employee<br>\
	\t{<br>\
	\t\tprivate String name;<br>\
	<br>\
	\t\t...<br>\
	<br>\
	\t\tpublic boolean equals(Object object)<br>\
	\t\t{<br>\
	\t\t\treturn object instanceof Employee<br>\
	\t\t\t\t&amp;&amp; getName().equals(((Employee) object).getName());<br>\
	\t\t}<br>\
	\t}\
	</code>

overridingEqualsAndHashCode.missing.description = \
	Missing implementation of the method {0}
overridingEqualsAndHashCode.missing.explanation = \
	If you override the definition of the method {1} you should probably also \
	override the definition of the method {0}.

	overridingEqualsAndHashCode.missing.recommendation.name = Recommendation...
	overridingEqualsAndHashCode.missing.recommendation.description = \
		Add the missing {0} method.

################################################################################

overridingNonAbstractMethod.name = Overriding a Non-abstract Method with an Abstract Method
overridingNonAbstractMethod.longName = \
	Don't override a non-abstract method with an abstract method
overridingNonAbstractMethod.description = \
	<b>Summary</b>\
	<br/>\
	An abstract method should not override a non-abstract method.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds abstract methods that override a non-abstract \
	method. Such a case usually represents a violation of the inherited \
	contract.\
	<p>\
	<b>Example</b>\
	<br/>\
	Given the following class:\
	<p><code>\
	\tpublic class Widget<br>\
	\t{<br>\
	\t\tpublic int getPartCount()<br>\
	\t\t{<br>\
	\t\t\treturn 0;<br>\
	\t\t}<br>\
	\t}\
	</code><p>\
	The method getPartCount() would be flagged as a violation in the following \
	class:\
	<p><code>\
	\tpublic abstract class CompositeWidget extends Widget<br>\
	\t{<br>\
	\t\tpublic abstract int getPartCount();<br>\
	\t}\
	</code>

overridingNonAbstractMethod.override.description = \
	Abstract method should not override a non-abstract method
overridingNonAbstractMethod.override.explanation = \
	The abstract method {0} overrides a concrete method. That usually \
	indicates a problem in the inheritance structure.

	overridingNonAbstractMethod.override.delete.name = Delete method
	overridingNonAbstractMethod.override.delete.description = \
		Delete the abstract method.

################################################################################

overridingPrivateMethod.name = Overriding Private Method
overridingPrivateMethod.longName = \
	Don't attempt to override a private method
overridingPrivateMethod.description = \
	<b>Summary</b>\
	<br/>\
	Methods cannot override a private method.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for methods that look like they were intended to \
	override a method from a superclass but fail because the inherited method \
	is defined to be a private method.\
	<p>\
	<b>Example</b>\
	<br/>\
	Given the following class:\
	<p><code>\
	\tpublic class TreeNode<br>\
	\t{<br>\
	\t\tprivate int getChildCount()<br>\
	\t\t{<br>\
	\t\t\treturn children.size();<br>\
	\t\t}<br>\
	\t}\
	</code><p>\
	The method getChildCount() would be flagged as a violation in the \
	following class:\
	<p><code>\
	\tpublic abstract class LeafNode extends TreeNode<br>\
	\t{<br>\
	\t\tprivate int getChildCount()<br>\
	\t\t{<br>\
	\t\t\treturn 0;<br>\
	\t\t}<br>\
	\t}\
	</code>

overridingPrivateMethod.override.description = \
	Method should not override a private method
overridingPrivateMethod.override.explanation = \
	The method {0} overrides a private method from a superclass. Doing so can \
	cause confusion if someone does not realize that the inherited method is \
	private and that the subclass method will therefore not be invoked from \
	any of the superclass'' methods. Consider renaming one of the methods.

	overridingPrivateMethod.override.delete.name = Delete method
	overridingPrivateMethod.override.delete.description = \
		Delete the abstract method.

################################################################################

overridingSynchronizedMethod.name = Overriding a Synchronized Method with a Non-synchronized Method
overridingSynchronizedMethod.longName = \
	Don't override a synchronized method with a non-synchronized method
overridingSynchronizedMethod.description = \
	<b>Summary</b>\
	<br/>\
	A non-synchronized method should not override a synchronized method.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds non-synchronized methods that override a synchronized \
	method. Such a case usually indicates thread-unsafe code.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tpublic class Widget<br>\
	\t{<br>\
	\t\tpublic synchronized int getPartCount()<br>\
	\t\t{<br>\
	\t\t\treturn 0;<br>\
	\t\t}<br>\
	\t}\
	</code><p>\
	The method getPartCount() would be flagged as a violation in the following \
	class:\
	<p><code>\
	\tpublic class CompositeWidget extends Widget<br>\
	\t{<br>\
	\t\tpublic int getPartCount()<br>\
	\t\t{<br>\
	\t\t\treturn children.size();<br>\
	\t\t}<br>\
	\t}\
	</code>

overridingSynchronizedMethod.override.description = \
	Non-synchronized method should not override a synchronized method
overridingSynchronizedMethod.override.explanation = \
	The non-synchronized method {0} overrides a synchronized method. That \
	usually indicates thread-unsafe code.

	overridingSynchronizedMethod.override.recommendation.name = Recommendation...
	overridingSynchronizedMethod.override.recommendation.description = \
		Make the method synchronized.

################################################################################

packageJavadoc.name = Package Javadoc
packageJavadoc.longName = \
	All packages should have a correct Javadoc comment
packageJavadoc.description = \
	<b>Summary</b>\
	<br/>\
	Packages should have Javadoc comments in a file named "package.html".\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks all of the packages to ensure that there is a file \
	named "package.html" that can be used by the Javadoc program to create \
	package-level Javadoc information.

packageJavadoc.missing.description = \
	The package "{0}" does not contain a "package.html" file
packageJavadoc.missing.explanation = \
	Every package should contain a file named "package.html" that contains the \
	Javadoc describing the content of the package.

	packageJavadoc.missing.recommendation.name = Recommendation...
	packageJavadoc.missing.recommendation.description = \
		Add the missing "package.html" file.

################################################################################

packageNamingConvention.name = Package Naming Convention
packageNamingConvention.longName = \
	Use the standard naming convention for packages
packageNamingConvention.description = \
	<b>Summary</b>\
	<br/>\
	Package names should conform to the defined standard.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks the names of all packages as defined by the \
	package declarations at the beginning of each compilation unit.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule has been configured to only allow package names consisting of \
	lower case letters, the package name "utilitiyClasses" would be flagged as \
	a violation because it contains an upper case letter.

packageNamingConvention.invalidName.description = \
	Invalid package name: "{0}" {1}
packageNamingConvention.invalidName.explanation = \
	The package name "{0}" does not conform because it {1}.

	packageNamingConvention.invalidName.rename.name = Rename package to "{1}"
	packageNamingConvention.invalidName.rename.description = \
		Rename the package from "{0}" to "{1}".

	packageNamingConvention.invalidName.recommendation.name = Recommendation...
	packageNamingConvention.invalidName.recommendation.description = \
		Rename the package.

################################################################################

packagePrefixNamingConvention.name = Package Prefix Naming Convention
packagePrefixNamingConvention.longName = \
	Use the standard naming convention for the first component in package names
packagePrefixNamingConvention.description = \
	<b>Summary</b>\
	<br/>\
	Package names should begin with either a top-level domain name or a \
	two-letter country code.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks the names of all packages as defined by the \
	package declarations at the beginning of each compilation unit to ensure \
	that the first identifier is either a top-level domain name or a \
	two-letter country code.\
	<p>\
	<b>Example</b>\
	<br/>\
	For example, the following package declaration would be flagged as a \
	violation because "freeware" is neither a top-level domain name nor a \
	two-letter country code:\
	<p><code>\
	\tpackage freeware.model;\
	</code>

packagePrefixNamingConvention.invalidPrefix.description = \
	Invalid package prefix: "{0}"
packagePrefixNamingConvention.invalidPrefix.explanation = \
	The package prefix "{0}" is neither a top-level domain name nor a \
	two-letter country code.

	packagePrefixNamingConvention.invalidName.recommendation.name = Recommendation...
	packagePrefixNamingConvention.invalidName.recommendation.description = \
		Rename the package.

################################################################################

packageStructure.name = Package Structure
packageStructure.longName = \
	Packages should follow a prescribed structure
packageStructure.description = \
	<b>Summary</b>\
	<br/>\
	Packages should follow a prescribed structure.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for package names whose structure does not conform \
	to the configured standard.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule were configured to require package names to start with a \
	prefix of "org.apache" and have at least one segment representing the \
	name of the project, with "ant", "jakarta", and "struts" on the list, the \
	name "justforfun" in the following package name would be flagged as a \
	violation:\
	<p><code>\
	\tpackage org.apache.justforfun.nonsense;\
	</code>

packageStructure.invalidPrefix.description = \
	The component name "{0}" is not a valid prefix
packageStructure.invalidPrefix.explanation = \
	The component name "{0}" is not one of the allowed names for a segment of \
	the prefix.

	packageStructure.invalidPrefix.recommendation.name = Recommendation...
	packageStructure.invalidPrefix.recommendation.description = \
		Change the package structure to conform with the standard.

packageStructure.invalidSegment.description = \
	The component name "{0}" is not a valid {1}
packageStructure.invalidSegment.explanation = \
	The component name "{0}" is not one of the allowed names for a segment of \
	type {1}.

	packageStructure.invalidSegment.recommendation.name = Recommendation...
	packageStructure.invalidSegment.recommendation.description = \
		Change the package structure to conform with the standard.

packageStructure.missingPrefix.description = \
	The package name does not start with the correct prefix
packageStructure.missingPrefix.explanation = \
	The package name does not start with the correct prefix.

	packageStructure.missingPrefix.recommendation.name = Recommendation...
	packageStructure.missingPrefix.recommendation.description = \
		Change the package structure to conform with the standard.

packageStructure.missingSegment.description = \
	The package name is missing a component of the type {1}
packageStructure.missingSegment.explanation = \
	The package name is missing a component of the type {1}.

	packageStructure.missingSegment.recommendation.name = Recommendation...
	packageStructure.missingSegment.recommendation.description = \
		Change the package structure to conform with the standard.

################################################################################

parenthesizeCondition.name = Parenthesize Condition in Conditional Operator
parenthesizeCondition.longName = \
	Parenthesize complex conditions used with the conditional operator
parenthesizeCondition.description = \
	<b>Summary</b>\
	<br/>\
	The condition in a conditional operator should be parenthesized if it \
	contains a binary operator.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for uses of the conditional operator in which the \
	condition contains a binary operator but has not been parenthesized.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following expression would be flagged as a violation because the \
	condition is not parenthesized:\
	<p><code>\
	\tchildCount = children == null ? 0 : children.size();\
	</code>

parenthesizeCondition.missing.description = \
	Condition in conditional operator should be parenthesized
parenthesizeCondition.missing.explanation = \
	If the conditional operator is used, the condition ought to be \
	parenthesized to improve readability.

	parenthesizeCondition.missing.insert.name = Add parentheses
	parenthesizeCondition.missing.insert.description = \
		Add the missing parentheses.

################################################################################

parseMethodUsage.name = Parse Method Usage
parseMethodUsage.longName = \
	Don't use the parse methods in numeric classes to parse localized numbers
parseMethodUsage.description = \
	<b>Summary</b>\
	<br/>\
	The parseXXX() methods for Numerics should not \
	be used in an internationalized environment.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for the use of the parseXXX() methods for \
	Numerics in an internationalized environment. Numeric \
	formats differ with region and language, so consistent results \
	cannot be counted on.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following use of the parseInteger() method would be flagged as a \
	violation:\
	<p><code>\
	\tmyInt = Integer.parseInteger("12345");\
	</code>

parseMethodUsage.parse.description = \
	Don''t use java.lang.{0}.{1}() in an internationalized environment
parseMethodUsage.parse.explanation = \
	The {0}.{1}() method should not be used in an internationalized \
	environment because numeric differ with region and language, so \
	consistent results cannot be counted on.

	parseMethodUsage.parse.recommendation.name = Recommendation...
	parseMethodUsage.parse.recommendation.description = \
		Replace with a call to NumberFormat.getNumberInstance().parse().

################################################################################

pathManipulation.name = Path Manipulation
pathManipulation.longName = \
	Possible Path Manipulation vulnerabilities should be prevented
pathManipulation.description = \
	<b>Summary</b>\
	<br/>\
	User input might be getting used to create a path to a resource.\
	<p>\
	<b>Description</b>\
	<br/>\
	Path Manipulation occurs when user input is used directly as a path \
	or part of a path to a resource.\
	<p>\
	To detect violations, this audit rule searches the code for path creation \
	statements such as <code>File file = new File(..)</code> \
	and traces where the path could have come from. In cases where the \
	source of the path is user input, such as data from a servlet request, \
	<code>javax.servlet.ServletRequest.getParameter(java.lang.String)</code>, \
	or from a SWT Text widget, <code>org.eclipse.swt.widgets.Text.getText()</code>, \
	a violation is created.\
	<p>\
	These two sets of methods, the locations where tainted user data can come \
	from and the methods used to create paths, are editable by the user. If \
	methods are missing that are in a common package \
	(such as <code>java.lang.*</code>), please let CodePro support know.\
	<p>\
	<b>Security Implications</b>\
	<br/>\
	When a malicious user can enter a path directly, system or application \
	files that are assumed protected from users can become vulnerable.\
	<p>\
	<b>Example</b>\
	<br/>\
	The invocation of the constructor <code>File(..)</code> would be flagged \
	as a violation since it uses the path name information passed from a \
	servlet request:\
	<p><code>\
	\tServletRequest servletRequest = ...;<br>\
	\tString fileName = servletRequest.getParameter("fileName");<br>\
	\tFile file = new File("..." + fileName);\
	</code>

pathManipulation.injection.description = \
	Path Manipulation
pathManipulation.injection.explanation = \
	The data path below was found as a potential Path Manipulation scenario. \
	The top of the path shows where the potentially harmful user data could be \
	used to create a path to a resource. The bottom location in the path shows \
	where the user data originates.\
	<p>\
	{0}

	pathManipulation.injection.recommendation.name = Recommendation...
	pathManipulation.injection.recommendation.description = \
		User data should never directly be used to create a path to a resource, \
		the path should be eliminated.

pathManipulation.stackDepth.description = \
	Path Manipulation risk: path too long
pathManipulation.stackDepth.explanation = \
	While tracing the sources of path creations, the data path \
	below was found. While it does not terminate at a point where user input \
	could be used, it is too long to not be considered a potential \
	Path Manipulation risk. The following path is too long to be secure:\
	<p>\
	{0}

	pathManipulation.stackDepth.recommendation.name = Recommendation...
	pathManipulation.stackDepth.recommendation.description = \
		To minimize the risk of Path Manipulation, path creation should be \
		executed as locally as possible. Make the code more secure by \
		reducing the scope to this path creation statement.

pathManipulation.largeFan.description = \
	Path Manipulation risk: too many sources
pathManipulation.largeFan.explanation = \
	While tracing the sources of resource creations, the data path \
	below was found. While it does not terminate at a point where user input \
	could be used, it has too many sources to not be considered a potential \
	Path Manipulation risk.\
	<p>\
	{0}\
	<p>\
	The locations after this data path where it branches off are as follows:\
	<p>\
	{1}

	pathManipulation.largeFan.recommendation.name = Recommendation...
	pathManipulation.largeFan.recommendation.description = \
		To minimize the risk of Path Manipulation, printing should be \
		executed as locally as possible. Make the code more secure by reducing \
		the number of possible paths into this path creations statement.\

################################################################################

platformSpecificLineSeparator.name = Platform Specific Line Separator
platformSpecificLineSeparator.longName = \
	Don't hard-code line separators in string or character literals
platformSpecificLineSeparator.description = \
	<b>Summary</b>\
	<br/>\
	Line separators should not be hard-coded because they are platform \
	dependent.\
	<p>\
	<b>Description</b>\
	<br/>\
	Line separators should not be hard-coded because they are platform \
	dependent.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following use of the escape sequence "\\\\n" would be flagged as a \
	violation because not all platforms use it as a line separator:\
	<p><code>\
	\ttext = title + "\\\\n\\\\n" + message;\
	</code>

platformSpecificLineSeparator.eol.description = \
	Use of a platform specific line separator
platformSpecificLineSeparator.eol.explanation = \
	Line separators should not be hard-coded because they are platform \
	dependent.

	platformSpecificLineSeparator.eol.recommendation.name = Recommendation
	platformSpecificLineSeparator.eol.recommendation.description = \
		Use System.getProperty("line.separator") to access the line separator \
		appropriate for the current platform.

################################################################################

pluralizeCollectionNames.name = Pluralize Collection Names
pluralizeCollectionNames.longName = \
	The names of collection-valued variables should be plural
pluralizeCollectionNames.description = \
	<b>Summary</b>\
	<br/>\
	The names of collection-valued variables should be plural.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for collection-valued variables whose name is \
	singular. A collection-valued variable is any variable whose type is \
	either an array type or a subtype of the type java.util.Collection.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following field declaration would be flagged because its name is \
	singular:\
	<p><code>\
	\tprivate List employee;\
	</code>

pluralizeCollectionNames.singular.description = \
	Collection with a singular name
pluralizeCollectionNames.singular.explanation = \
	A collection-valued variable has a name that is singular rather than \
	plural.

	pluralizeCollectionNames.singular.rename.name = Rename...
	pluralizeCollectionNames.singular.rename.description = \
		Rename the variable so that its name is plural.

################################################################################

possibleNullPointer.name = Possible Null Pointer
possibleNullPointer.longName = \
	De-referencing a possibly null pointer
possibleNullPointer.description = \
	<b>Summary</b>\
	<br/>\
	A pointer is being dereferenced when it might be null.\
	<p>\
	<b>Description</b>\
	<br/>\
	This rule identifies places where an object-valued variable is being \
	dereferenced without first ensuring that it cannot be null.\
	<p>\
	<b>Example</b>\
	<br/>\
	Given the following method declaration:\
	<p><code>\
	\tpublic String[] split(String string)<br>\
	\t{<br>\
	\t\tint index = string.indexOf(":");<br>\
	\t\t...<br>\
	\t}\
	</code><p>\
	The invocation of the indexOf method would be flagged.

possibleNullPointer.couldBeNull.description = \
	Dereferencing a possibly null reference
possibleNullPointer.couldBeNull.explanation = \
	The variable "{0}" could be null in this context.

	possibleNullPointer.couldBeNull.recommendation.name = Recommendation...
	possibleNullPointer.couldBeNull.recommendation.description = \
		Check for a null value before de-referencing the variable.

################################################################################

potentialInfiniteLoop.name = Potential Infinite Loop
potentialInfiniteLoop.longName = \
	Potential Infinite Loop
potentialInfiniteLoop.description = \
	<b>Summary</b>\
	<br/>\
	Some loops can be written in such a way that they will never terminate. \
	This is bad practice, and usually not intended.\
	<p>\
	<b>Description</b>\
	<br/>\
	Loops can exit in several ways. Either their exit condition can be satisfied, \
	an exception can be thrown, a value can be returned, or a <code>break</code> or \
	a <code>continue</code> can transfer control out of the loop. \
	In the body of the loop, something should happen to either modify the value of the \
	exit condition, or modify the value of a condition leading to a return, throw, or \
	branching statement.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following would be flagged as a violation, since the value of <code>a</code> \
	is not changed in the body of the loop. \
	<p><code>\
	\tint a = 0; int b = 2;<br>\
	\twhile (a &lt; 10) {<br>\
	\t\tb++;<br>\
	\t}\
	</code>

potentialInfiniteLoop.found.description = \
	Potential infinite loop
potentialInfiniteLoop.found.explanation = \
	It appears that the only way this loop will terminate is if an exception is \
	thrown. Nothing occurs that will change the value of the exit condition, and \
	it appears that no flow of control statement which would terminate the loop \
	will ever be executed.

	potentialInfiniteLoop.found.recommendation.name = Recommendation...
	potentialInfiniteLoop.found.recommendation.description = \
		Make sure that the loop makes progress toward either its exit condition, \
		or a control flow statement.

################################################################################

precomputeConstantCalculations.name = Pre-compute Constant Calculations
precomputeConstantCalculations.longName = \
	When possible, pre-compute the value of a Math operation involving constants.
precomputeConstantCalculations.description = \
	<b>Summary</b>\
	<br/>\
	It is faster and more accurate to pre-compute the value of \
	a <code>Math</code> operation involving only constants.\
	<p>\
	<b>Description</b>\
	<br/>\
	This rule finds uses of static methods in the <code>Math</code> class which \
	are passed constant values. It is faster, and often more accurate to pre-compute \
	these values.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tdouble foo = Math.cos(0);\
	</code>

# {0} The calculation being performed
# {1} The value it will produce
precomputeConstantCalculations.found.description = \
	Constant calculation will be performed at runtime
precomputeConstantCalculations.found.explanation = \
	The calculation <code>{0}</code> will be performed at runtime; \
	however, this calculation should always equal <code>{1}</code>.

	precomputeConstantCalculations.found.recommendation.name = Replace with {1}
	precomputeConstantCalculations.found.recommendation.description = \
		Replace <code>{0}</code> with <code>{1}</code>.

################################################################################

preferInterfacesToAbstractClasses.name = Prefer Interfaces to Abstract Classes
preferInterfacesToAbstractClasses.longName = \
	Define interfaces rather than abstract classes when possible
preferInterfacesToAbstractClasses.description = \
	<b>Summary</b>\
	<br/>\
	It is better to define abstract types as interfaces than classes.\
	<p>\
	<b>Description</b>\
	<br/>\
	This rule identifies types defined by abstract classes. It flags abstract \
	classes that define public methods that are not defined in an interface \
	implemented by the class.\
	<p>\
	Rather than defining an abstract class to create a type, define an \
	interface instead. In addition to the interface, include an abstract \
	class that provides a skeletal implementation of the type, which \
	implements the interface.

preferInterfacesToAbstractClasses.abstractClassType.description = \
	The abstract class defines a type
preferInterfacesToAbstractClasses.abstractClassType.explanation = \
	Define the type via an interface implemented by the abstract class.

	preferInterfacesToAbstractClasses.abstractClassType.recommendation.name = Recommendation...
	preferInterfacesToAbstractClasses.abstractClassType.recommendation.description = \
		Add an interface that defines the type, and make {0} implement that \
		interface.

################################################################################

preferInterfacesToReflection.name = Prefer Interfaces To Reflection
preferInterfacesToReflection.longName = \
	Use interfaces rather than reflection when possible
preferInterfacesToReflection.description = \
	<b>Summary</b>\
	<br/>\
	Consider using interfaces instead of reflection.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule identifies uses of reflective capabilities and flags them \
	for review. Much of what is accomplished via reflection can be done, \
	faster and simpler, with judicious use of interfaces.

preferInterfacesToReflection.reflectiveMethodInvocation.description = \
	A method is invoked via reflection
preferInterfacesToReflection.reflectiveMethodInvocation.explanation = \
	Consider using an interface to invoke a method without reflective lookup.

	preferInterfacesToReflection.reflectiveMethodInvocation.recommendation.name = Recommendation...
	preferInterfacesToReflection.reflectiveMethodInvocation.recommendation.description = \
		Use an existing interface if one is available, or define one if \
		possible.

preferInterfacesToReflection.reflectiveConstructorInvocation.description = \
	A constructor is invoked via reflection
preferInterfacesToReflection.reflectiveConstructorInvocation.explanation = \
	Consider using an interface to invoke a method without reflective lookup.

	preferInterfacesToReflection.reflectiveConstructorInvocation.recommendation.name = Recommendation...
	preferInterfacesToReflection.reflectiveConstructorInvocation.recommendation.description = \
		Use an existing interface if one is available, or define one if \
		possible.

preferInterfacesToReflection.reflectiveFieldAccess.description = \
	A field is accessed via reflection
preferInterfacesToReflection.reflectiveFieldAccess.explanation = \
	Consider defining accessor methods in an interface to avoid reflective access.

	preferInterfacesToReflection.reflectiveFieldAccess.recommendation.name = Recommendation...
	preferInterfacesToReflection.reflectiveFieldAccess.recommendation.description = \
		Use an existing interface if one is available, or define one if \
		possible.

################################################################################

preferredExpression.name = Preferred Expression
preferredExpression.longName = \
	Use constant objects rather than creating new objects when possible
preferredExpression.description = \
	<b>Summary</b>\
	<br/>\
	Some expressions are preferred over other equivalent expressions.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule searches for expressions that can be replaced with other \
	equivalent and more preferred expressions. Specifically Colors can be \
	replaced with Color constants and Booleans with Boolean constants.\
	<p>\
	<b>Example</b>\
	<br/>\
	The expression\
	<p><code>\
	\tnew Color(0, 0, 0)\
	</code><p>\
	can be replaced by\
	<p><code>\
	\tColor.black\
	</code><p>\
	and the expression\
	<p><code>\
	\tnew Boolean(true)\
	</code><p>\
	can be replaced by\
	<p><code>\
	\tBoolean.TRUE\
	</code>

preferredExpression.replacementFound.description = \
	Expression can be replaced by "{1}"
preferredExpression.replacementFound.explanation = \
	The expression "{0}" can be replaced by the equivalent \
	and more preferred expression "{1}".

	preferredExpression.replacementFound.replace.name = Replace expression
	preferredExpression.replacementFound.replace.description = \
		Replace the expression with the preferred expression.

################################################################################

preventOverwritingOfExternalizableObjects.name = Prevent Overwriting Of Externalizable Objects
preventOverwritingOfExternalizableObjects.longName = \
	Disallow Externalizable objects to be overwritten
preventOverwritingOfExternalizableObjects.description = \
	<b>Summary</b>\
	<br/>\
	Disallows Externalizable objects to be overwritten.\
	<p>\
	<b>Description</b>\
	<br/>\
	All classes that implement java.io.Externalizable must declare the public \
	readExternal method.\
	<p>\
	This audit rule declares that every subclass of Externalizable \
	must declare readExternal and that readExternal must match the following \
	pattern:\
	<p><code>\
	\tpublic synchronized void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {<br>\
	\t\tif (! initialized) {<br>\
	\t\t\tinitialized = true;<br>\
	\t\t\t*<br>\
	\t\t} else {<br>\
	\t\t\tthrow new IllegalStateException();<br>\
	\t\t}<br>\
	\t}\
	</code><p>\
	The boolean named "initialized", may have any valid name, and can be \
	accessed via the this keyword, but cannot be re-assigned anywhere else \
	within the class as such a reassignment could easily invalidate the security \
	measures being taken.\
	<p>\
	<b>Security Implications</b>\
	<br/>\
	When readExternal is not overridden in this way, malicious users can call \
	readExternal after the class has already been initialized and potentially \
	have the internal state of the class overwritten.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following class would be flagged as readExternal is not declared as \
	synchronized:\
	<p><code>\
	\tpublic class A implements Externalizable {<br>\
	<br>\
	\tboolean initialized = false;\
	<br>\
	\t\tpublic void readExternal(ObjectInput in) {<br>\
	\t\t\tif (! initialized) {<br>\
	\t\t\t\tinitialized = true;<br>\
	\t\t\t\t// initialize the object\
	\t\t\t} else {<br>\
	\t\t\t\tthrow new IllegalStateException();<br>\
	\t\t\t}<br>\
	\t\t}<br>\
	<br>\
	\t\tpublic void writeExternal(ObjectOutput out) throws IOException {<br>\
	\t\t\t*<br>\
	\t\t}<br>\
	\t}\
	</code>

# {0} = type name
preventOverwritingOfExternalizableObjects.readExternalNotDeclared.description = \
	The Externalizable class "{0}" does not override readExternal(ObjectInput)
preventOverwritingOfExternalizableObjects.readExternalNotDeclared.explanation = \
	Externalizable objects should override the readExternal(ObjectInput) method \
	to explicitly declare and protect against malicious users are allowed to \
	call.

	preventOverwritingOfExternalizableObjects.readExternalNotDeclared.recommendation.name = Recommendation...
	preventOverwritingOfExternalizableObjects.readExternalNotDeclared.recommendation.description = \
		Declare the method "public synchronized void readExternal(ObjectInput)" \
		within this class.

preventOverwritingOfExternalizableObjects.readExternalNotSynchronized.description = \
	The method readExternal(ObjectInput) is not declared as synchronized
preventOverwritingOfExternalizableObjects.readExternalNotSynchronized.explanation = \
	readExternal(ObjectInput) must be declared as synchronized to better \
	secure from malicious users.

	preventOverwritingOfExternalizableObjects.readExternalNotSynchronized.makeSynchronized.name = Make synchronized
	preventOverwritingOfExternalizableObjects.readExternalNotSynchronized.makeSynchronized.description = \
		Declare the method readExternal(ObjectInput) as synchronized.

preventOverwritingOfExternalizableObjects.readExternalWrongFormat.description = \
	The Externalizable class "{0}" should override the readExternal(ObjectInput) \
	method in a secure way
preventOverwritingOfExternalizableObjects.readExternalWrongFormat.explanation = \
	The method body of readExternal(ObjectInput) should be implemented in a \
	secure manner.

	preventOverwritingOfExternalizableObjects.readExternalWrongFormat.recommendation.name = Recommendation...
	preventOverwritingOfExternalizableObjects.readExternalWrongFormat.recommendation.description = \
		This Externalizable class does not match the pattern specified by this \
		audit rule.

preventOverwritingOfExternalizableObjects.cannotReassignInitBoolean.description = \
	This Externalizable class should not have to reassign the initialization parameter
preventOverwritingOfExternalizableObjects.cannotReassignInitBoolean.explanation = \
	The method body of readExternal(ObjectInput) is implemented in an insecure way, \
	this initialization boolean should not be re-assigned.

	preventOverwritingOfExternalizableObjects.cannotReassignInitBoolean.recommendation.name = Recommendation...
	preventOverwritingOfExternalizableObjects.cannotReassignInitBoolean.recommendation.description = \
		Remove this reassignment of the initialization boolean.

################################################################################

processControl.name = Process Control
processControl.longName = \
	Possible Process Control vulnerabilities should be prevented
processControl.description = \
	<b>Summary</b>\
	<br/>\
	Process controlling code might be receiving data from the user or other \
	unsafe sources.\
	<p>\
	<b>Description</b>\
	<br/>\
	Process Control occurs when the user is able to enter data directly into \
	code that effects the process of the runtime. This can occur when the user \
	has access to specify system commands or when then user has access to \
	specify which libraries are loaded by the application.\
	<p>\
	To detect violations, this audit rule searches the code for process \
	controlling code methods such as <code>java.lang.System.load(..)</code> and \
	traces where the data could have come from. In cases where the \
	source of the query is user input, such as data from a servlet request, \
	<code>javax.servlet.ServletRequest.getParameter(java.lang.String)</code>, \
	or from a SWT Text widget, <code>org.eclipse.swt.widgets.Text.getText()</code>, \
	a violation is created.\
	<p>\
	These two sets of methods, the locations where tainted user data can come \
	from and the methods used to query the database, are editable by the user.\
	If methods are missing that are in a common package \
	(such as <code>java.lang.*</code>), please let CodePro support know.\
	<p>\
	<b>Security Implications</b>\
	<br/>\
	Successful Process Control attacks can potentially allow the user to \
	specify source code to be executed.\
	<p>\
	<b>Example</b>\
	<br/>\
	The invocation of the method <code>System.loadLibrary(..)</code> would be flagged \
	as a violation since it uses the library name information passed from a \
	SWT widget:\
	<p><code>\
	\tText text = ...;<br>\
	\tString library = text.getText();<br>\
	\tSystem.loadLibrary(library);<br>\
	</code>

processControl.injection.description = \
	Process Control
processControl.injection.explanation = \
	The data path below was found as a potential Process Control scenario. The \
	top of the path shows where the potentially harmful user data can enter \
	process controlling methods. The bottom location in the path shows where \
	the user data originates.\
	<p>\
	{0}

	processControl.injection.recommendation.name = Recommendation...
	processControl.injection.recommendation.description = \
		User data should never directly be put into process controlling code, \
		the path should be eliminated.

processControl.stackDepth.description = \
	Process Control risk: path too long
processControl.stackDepth.explanation = \
	While tracing the sources of the process controlling methods, the data path below \
	was found. While it does not terminate at a point where user input could \
	enter the system, it is too long to not be considered a potential Process \
	Control risk. The following path is too long to be secure:\
	<p>\
	{0}

	processControl.stackDepth.recommendation.name = Recommendation...
	processControl.stackDepth.recommendation.description = \
		To minimize the risk of Process Control, process controlling methods \
		should be created and executed as locally as possible. Make the code \
		more secure by reducing the scope to this process controlling method.

processControl.largeFan.description = \
	Process Control risk: too many sources
processControl.largeFan.explanation = \
	While tracing the sources of the process controlling methods, the data path below \
	was found. While it does not terminate at a point where user input could \
	enter the system, it has too many sources to not be considered a potential \
	Process Control risk.\
	<p>\
	{0}\
	<p>\
	The locations after this data path where it branches off are as follows:\
	<p>\
	{1}

	processControl.largeFan.recommendation.name = Recommendation...
	processControl.largeFan.recommendation.description = \
		To minimize the risk of Process Control, process controlling methods \
		should be created and executed as locally as possible. Make the code \
		more secure by reducing the number of possible paths into this process \
		controlling method.

################################################################################

properFinalizeUsage.name = Proper Finalize Usage
properFinalizeUsage.longName = \
	Don't invoke unsafe methods from within a finalize() method
properFinalizeUsage.description = \
	<b>Summary</b>\
	<br/>\
	Don't call various methods from a finalize() method.\
	<p>\
	<b>Description</b>\
	<br/>\
	Avoid calling various methods from a finalize() method. Specifically avoid \
	calling any methods from the ClassLoader, Runnable or PortbaleRemoteObject \
	classes. Also avoid calling any methods from the java.applet, java.beans, \
	java.io, java.lang.ref, java.net, java.rmi, java.security, java.sql, \
	javax.naming, javax.sql, javax.transaction or org.omg packages.

properFinalizeUsage.avoid.description = \
	Avoid calling {0} from a finalize() method
properFinalizeUsage.avoid.explanation = \
	Avoid calling {0} from a finalize() method

	properFinalizeUsage.avoid.recommendation.name = Recommendation...
	properFinalizeUsage.avoid.recommendation.description = \
		Don''t call {0} from a finalize() method.

################################################################################

properServletUsage.name = Proper Servlet Usage
properServletUsage.longName = \
	Don't invoke unsafe methods from within a servlet
properServletUsage.description = \
	<b>Summary</b>\
	<br/>\
	Don't call various methods from a Servlet.\
	<p>\
	<b>Description</b>\
	<br/>\
	Avoid calling various methods from a Servlet. Specifically avoid calling \
	any methods from the Thread, ThreadGroup, System, Process, Runtime, \
	DriveManager or Compiler classes. Also avoid calling the Runnable.run() \
	method as well as any methods from the java.awt, javax.swing, \
	java.lang.reflect, javax.sound, java.util.jar or java.util.zip packages.

properServletUsage.avoid.description = \
	Avoid calling {0} from any Servlet
properServletUsage.avoid.explanation = \
	Avoid calling {0} from any Servlet

	properServletUsage.avoid.recommendation.name = Recommendation...
	properServletUsage.avoid.recommendation.description = \
		Don''t call {0} from a Servlet.

################################################################################

protectedInFinalClass.name = Protected Member in Final Class
protectedInFinalClass.longName = \
	Don't declare members of final classes to be protected
protectedInFinalClass.description = \
	<b>Summary</b>\
	<br/>\
	Members of a final class should not be protected.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds members that have a visibility of protected but \
	are defined in a final class. There is no reason for them to be given a \
	visibility of protected because there cannot be any subclasses.\
	<p>\
	<b>Example</b>\
	<br/>\
	The method getSalary() would be flagged as a violation in the following \
	example:\
	<p><code>\
	\tpublic final class Employee<br>\
	\t{<br>\
	\t\tprotected double getSalary()<br>\
	\t\t{<br>\
	\t\t\t...<br>\
	\t\t}<br>\
	\t}\
	</code>

protectedInFinalClass.field.description = \
	Protected field in final class: {0}
protectedInFinalClass.field.explanation = \
	The field {0} has a visibility of protected, even though it is declared \
	in a final class. It should be made private unless it needs to be visible \
	to other objects in the same package.

	protectedInFinalClass.field.makePrivate.name = Make private
	protectedInFinalClass.field.makePrivate.description = \
		Change the visibility of the method to be private.

protectedInFinalClass.fields.description = \
	Protected fields in final class: {0}
protectedInFinalClass.fields.explanation = \
	The fields {0} have a visibility of protected, even though they are \
	declared in a final class. It should be made private unless they need to \
	be visible to other objects in the same package.

	protectedInFinalClass.fields.makePrivate.name = Make private
	protectedInFinalClass.fields.makePrivate.description = \
		Change the visibility of the method to be private.

protectedInFinalClass.method.description = \
	Protected method in final class: {0}
protectedInFinalClass.method.explanation = \
	The method {0} has a visibility of protected, even though it is declared \
	in a final class. It should be made private unless it needs to be visible \
	to other objects in the same package.

	protectedInFinalClass.method.makePrivate.name = Make private
	protectedInFinalClass.method.makePrivate.description = \
		Change the visibility of the method to be private.

################################################################################

publicConstructorInNonPublicType.name = Public Constructor in Non-public Type
publicConstructorInNonPublicType.longName = \
	Don't declare public constructors in non-public classes
publicConstructorInNonPublicType.description = \
	<b>Summary</b>\
	<br/>\
	Constructors in non-public classes should not be public.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds public constructors in non-public classes. \
	There is no value in providing a public constructor because a non-public \
	class cannot be instantiated outside the package in which it is defined. \
	Reduce the access of the constructor to match that of the class itself.\
	<p>\
	<b>Example</b>\
	<br/>\
	The constructor in the following example would be flagged as a violation \
	because the class only has package visibility:\
	<p><code>\
	\tclass EmployeeData<br>\
	\t{<br>\
	\t\tpublic EmployeeData()<br>\
	\t\t{<br>\
	\t\t\t...<br>\
	\t\t}<br>\
	\t}\
	</code>

publicConstructorInNonPublicType.publicConstructor.description = \
	Public constructor in non-public class
publicConstructorInNonPublicType.publicConstructor.explanation = \
	There is no value in providing a public constructor because a non-public \
	class cannot be instantiated outside the package in which it is defined. \
	Reduce the access of the constructor to match that of the class itself.

	publicConstructorInNonPublicType.publicConstructor.makeSame.name = Make same as class
	publicConstructorInNonPublicType.publicConstructor.makeSame.description = \
		Reduce the access of the constructor to match that of the class itself.

################################################################################

publicNestedTypeInPackageVisible.name = Public Nested Type in Package Visible Type
publicNestedTypeInPackageVisible.longName = \
	Avoid declaring inner classes public when an outer class has package visibility
publicNestedTypeInPackageVisible.description = \
	<b>Summary</b>\
	<br/>\
	Types declared within package visible types should not be public.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for declarations of public nested types within a package \
	visible type. Because the outer type limits the visibility of the nested type, \
	there is no reason for it to be declared as public, and such a declaration can \
	be misleading.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following nested type would be flagged as a violation:\
	<p><code>\
	\tclass OuterClass {<br>\
	\t\tpublic class InnerClass {<br>\
	\t\t}<br>\
	\t}\
	</code>

publicNestedTypeInPackageVisible.publicFound.description = \
	Public type {0} found within package visible type
publicNestedTypeInPackageVisible.publicFound.explanation = \
	Classes declared within package visible types should not be public.

	publicNestedTypeInPackageVisible.publicFound.makePrivate.name = Make private
	publicNestedTypeInPackageVisible.publicFound.makePrivate.description = \
		Change the visibility of the type to private.

	publicNestedTypeInPackageVisible.publicFound.makeProtected.name = Make protected
	publicNestedTypeInPackageVisible.publicFound.makeProtected.description = \
		Change the visibility of the type to protected.

	publicNestedTypeInPackageVisible.publicFound.makePackage.name = Make package
	publicNestedTypeInPackageVisible.publicFound.makePackage.description = \
		Change the visibility of the type to package.

################################################################################

questionableAssignment.name = Questionable Assignment
questionableAssignment.longName = \
	Don't assign to loop variables within the loop or method parameters
questionableAssignment.description = \
	<b>Summary</b>\
	<br/>\
	Questionable assignments may lead to semantic errors.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for assignments to for loop variables within the \
	loop body or assignments to method parameters within the body of the \
	method. While these may sometimes prove useful they often have unintended \
	side effects. Be sure you really mean to make these assignments!\
	<p>\
	<b>Example</b>\
	<br/>\
	The assignment to "index" in the following method would be flagged as a \
	violation because it is a method parameter:\
	<p><code>\
	\tpublic int lastIndexOf(Object[] array, Object value, int index)<br>\
	\t{<br>\
	\t\tindex = array.size() - 1;<br>\
	\t\twhile (index &gt;= 0) {<br>\
	\t\t\t...<br>\
	\t\t}<br>\
	\t}\
	</code>

questionableAssignment.showForLoopVariables.label = \
	Show assignments to for loop variables
questionableAssignment.showForLoopVariables.description = \
	Warn if an assignment is made to a for loop variable within the body of \
	the loop

questionableAssignment.showMethodParameters.label = \
	Show assignments to method parameters
questionableAssignment.showMethodParameters.description = \
	Warn if an assignment is made to a method parameter within the body of \
	the method

questionableAssignment.forLoopVariable.description = \
	Questionable for loop variable assignment: {0}
questionableAssignment.forLoopVariable.explanation = \
	This assignment statement may have unintended side effects. It won''t \
	hurt to double check the logic.

	questionableAssignment.forLoopVariable.recommendation.name = Recommendation...
	questionableAssignment.forLoopVariable.recommendation.description = \
		Check the logic of the assignment statement.

questionableAssignment.methodParameter.description = \
	Questionable method parameter assignment: {0}
questionableAssignment.methodParameter.explanation = \
	Assignments to method parameters are not suggested and may lead to \
	semantic errors. It won''t hurt to double check the logic.

	questionableAssignment.methodParameter.recommendation.name = Recommendation...
	questionableAssignment.methodParameter.recommendation.description = \
		Check the logic of the assignment statement.

################################################################################

questionableName.name = Questionable Name
questionableName.longName = \
	Use names that are neither too short nor too long nor forbidden
questionableName.description = \
	<b>Summary</b>\
	<br/>\
	Questionable names may indicate sloppy code.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for questionable names of variables, fields, \
	methods, and types. A questionable name may indicate sloppy code.\
	<p>\
	Three types of questionable names are flagged:\
	<p>\
	1. Names that occur in a user-configurable list.\
	<p>\
	2. Names that are shorter than a user-configurable size. Short \
	names can be useful as for loop variables or in catch clauses so \
	short names are not flagged if they occur in those two places.\
	<p>\
	3. Names that are longer than a user-configurable size.\
	<p>\
	Names that you always want to be accepted can be added to a list \
	at the bottom of the preference pane. These names will be accepted \
	whether or not they break any of the 3 rules given above.\
	<p>\
	<b>Example</b>\
	<br/>\
	The variable "c" would be flagged as a violation in the following method \
	because it is too short, but the variable "i" would not be because it is \
	used as a loop variable:\
	<p><code>\
	\tpublic int getNonZeroElementCount()<br>\
	\t{<br>\
	\t\tint c;<br>\
	<br>\
	\t\tc = 0;<br>\
	\t\tfor (int i = 0; i &lt; elements.size(); i++) {<br>\
	\t\t\t...<br>\
	\t\t}<br>\
	\t\treturn c;<br>\
	\t}\
	</code>

questionableName.shortName.description = \
	Short name found: {0}
questionableName.shortName.explanation = \
	A short name in this location may be indicative of a quick hack. \
	You may want to examine the code for correctness and choose a more \
	suitable name.

	questionableName.shortName.rename.name = Rename
	questionableName.shortName.rename.description = \
		Rename.

questionableName.longName.description = \
	Long name found: {0}
questionableName.longName.explanation = \
	An overly long name may indicate that the named entity is trying to \
	capture too large a concept. You may want to examine the code for \
	correctness and choose a more suitable name.

	questionableName.longName.rename.name = Rename
	questionableName.longName.rename.description = \
		Rename.

questionableName.nameInList.description = \
	Questionable name found: {0}
questionableName.nameInList.explanation = \
	The name "{0}" appears in a list of questionable names. You should \
	probably give the code a once over for correctness and you should \
	definitely choose a more suitable name.

	questionableName.nameInList.rename.name = Rename
	questionableName.nameInList.rename.description = \
		Rename.

################################################################################

reduceMethodScope.name = Reduce Method Scope
reduceMethodScope.longName = \
	Reduce the scope of methods if possible
reduceMethodScope.description = \
	<b>Summary</b>\
	<br/>\
	Reduce the scope of method declarations where possible.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule traces the call hierarchy of non-private methods and \
	declares that they should have a stricter modifier, if possible.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the "someMethod" method below is never referenced outside of its' \
	declaring class A, then a violation should is thrown to make the method \
	private.\
	<p><code>\
	\tpublic class A<br>\
	\t{<br>\
	\t...<br>\
	\t\tpublic void someMethod()<br>\
	\t\t{<br>\
	\t\t...<br>\
	\t\t}<br>\
	\t}\
	</code>

reduceMethodScope.unused.description = \
	"{0}" is not used.
reduceMethodScope.unused.explanation = \
	This method is never be referenced. Probably the client code using this class has not yet been developed.

reduceMethodScope.shouldBePrivate.description = \
	Declare "{0}" as private.
reduceMethodScope.shouldBePrivate.explanation = \
	This method is never be referenced from outside the class it is declared, \
	this method should be private.

	reduceMethodScope.shouldBePrivate.makePrivate.name = Make private
	reduceMethodScope.shouldBePrivate.makePrivate.description = \
		Declare the method private

reduceMethodScope.shouldBePackage.description = \
	Declare "{0}" with package modifier.
reduceMethodScope.shouldBePackage.explanation = \
	This method is never referenced from outside the package it is declared, \
	this method should have the package modifier.

	reduceMethodScope.shouldBePackage.makePackage.name = Make package modifier
	reduceMethodScope.shouldBePackage.makePackage.description = \
		Declare the method with package modifier

reduceMethodScope.shouldBeProtected.description = \
	Declare "{0}" as protected.
reduceMethodScope.shouldBeProtected.explanation = \
	This method is never referenced from outside the class it is declared or \
	any subclasses, this method should be protected.

	reduceMethodScope.shouldBeProtected.makeProtected.name = Make protected
	reduceMethodScope.shouldBeProtected.makeProtected.description = \
		Declare the method protected


################################################################################

reduceFieldScope.name = Reduce Field Scope
reduceFieldScope.longName = \
	Reduce the scope of fields if possible
reduceFieldScope.description = \
	<b>Summary</b>\
	<br/>\
	Reduce the scope of field declarations where possible.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule traces the call hierarchy of non-private fields and \
	declares that they should have a stricter modifier, if possible.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the "someField" field below is never referenced outside of its' \
	declaring class A, then a violation should is thrown to make the field \
	private.\
	<p><code>\
	\tpublic class A<br>\
	\t{<br>\
	\t...<br>\
	\t\tpublic int someField;<br>\
	\t...<br>\
	\t}\
	</code>

reduceFieldScope.unused.description = \
	"{0}" is not used.
reduceFieldScope.unused.explanation = \
	This field is never be referenced. Probably the client code using this class has not yet been developed.

reduceFieldScope.shouldBePrivate.description = \
	Declare "{0}" as private.
reduceFieldScope.shouldBePrivate.explanation = \
	This field is never be referenced from outside the class it is declared, \
	this field should be private.

	reduceFieldScope.shouldBePrivate.makePrivate.name = Make private
	reduceFieldScope.shouldBePrivate.makePrivate.description = \
		Declare the field private

reduceFieldScope.shouldBePackage.description = \
	Declare "{0}" with package modifier.
reduceFieldScope.shouldBePackage.explanation = \
	This field is never referenced from outside the package it is declared, \
	this field should have the package modifier.

	reduceFieldScope.shouldBePackage.makePackage.name = Make package modifier
	reduceFieldScope.shouldBePackage.makePackage.description = \
		Declare the field with package modifier

reduceFieldScope.shouldBeProtected.description = \
	Declare "{0}" as protected.
reduceFieldScope.shouldBeProtected.explanation = \
	This field is never referenced from outside the class it is declared or \
	any subclasses, this field should be protected.

	reduceFieldScope.shouldBeProtected.makeProtected.name = Make protected
	reduceFieldScope.shouldBeProtected.makeProtected.description = \
		Declare the field protected

################################################################################

reduceTypeScope.name = Reduce Type Scope
reduceTypeScope.longName = \
	Reduce the scope of types if possible
reduceTypeScope.description = \
	<b>Summary</b>\
	<br/>\
	Reduce the scope of type declarations where possible.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule traces the references to non-private types and \
	declares that they should have a stricter modifier, if possible.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the "A" class below is never referenced outside of its' \
	declaring package foo.bar, then a violation is thrown to make the type \
	with package modifier.\
	<p><code>\
	\tpackage foo.bar;<br>\
	\tpublic class A<br>\
	\t{<br>\
	\t...<br>\
	\t\tpublic int someType;<br>\
	\t...<br>\
	\t}\
	</code>

reduceTypeScope.unused.description = \
	"{0}" is not used.
reduceTypeScope.unused.explanation = \
	This type is never be referenced. Probably the client code using this class has not yet been developed.

reduceTypeScope.shouldBePrivate.description = \
	Declare "{0}" as private.
reduceTypeScope.shouldBePrivate.explanation = \
	This type is never be referenced from outside the class it is declared, \
	this type should be private.

	reduceTypeScope.shouldBePrivate.makePrivate.name = Make private
	reduceTypeScope.shouldBePrivate.makePrivate.description = \
		Declare the type private

reduceTypeScope.shouldBePackage.description = \
	Declare "{0}" with package modifier.
reduceTypeScope.shouldBePackage.explanation = \
	This type is never referenced from outside the package it is declared, \
	this type should have the package modifier.

	reduceTypeScope.shouldBePackage.makePackage.name = Make package modifier
	reduceTypeScope.shouldBePackage.makePackage.description = \
		Declare the type with package modifier

reduceTypeScope.shouldBeProtected.description = \
	Declare "{0}" as protected.
reduceTypeScope.shouldBeProtected.explanation = \
	This type is never referenced from outside the class it is declared or \
	any subclasses, this type should be protected.

	reduceTypeScope.shouldBeProtected.makeProtected.name = Make protected
	reduceTypeScope.shouldBeProtected.makeProtected.description = \
		Declare the type protected

################################################################################

recursiveCallWithNoCheck.name = Recursive Call With No Check
recursiveCallWithNoCheck.longName = \
	Don't recursively call a method without a conditional check
recursiveCallWithNoCheck.description = \
	<b>Summary</b>\
	<br/>\
	Don't recursively call a method without a conditional check.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule flags methods that recursively call themselves with no \
	conditional check, or return escape. Violations are either infinite loops, \
	or the logic of the method relies on exceptions being thrown. In the first \
	case the infinite loop needs to be removed. In the second case, thrown \
	exceptions should not be relied on as they are much more expensive than \
	writing the equivalent conditional.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tprivate void countDownToZero(int i) {<br>\
	\t\tSystem.out.print("i = " + i);<br>\
	\t\ti--;<br>\
	\t\tcountDownToZero(i);<br>\
	\t\t// never reached!<br>\
	\t\tif(i == 0) {<br>\
	\t\t\treturn;<br>\
	\t\t}<br>\
	\t}\
	</code>

recursiveCallWithNoCheck.recursiveCall.description = \
	Dangerous recursive call: {0}
recursiveCallWithNoCheck.recursiveCall.explanation = \
	This method call is a recursive call without a conditional to break out of \
	the infinite loop.

	recursiveCallWithNoCheck.recursiveCall.recommendation.name = Delete assignment
	recursiveCallWithNoCheck.recursiveCall.recommendation.description = \
		Remove method call or and a conditional to ensure an infinite loop \
		isn''t generated.

################################################################################

redundantAssignment.name = Redundant Assignment
redundantAssignment.longName = \
	Don't assign a variable to itself
redundantAssignment.description = \
	<b>Summary</b>\
	<br/>\
	Redundant assignments should never be used.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for the assignment of a variable to itself. This \
	often indicates a missing qualifier, such as "this." for one or the other \
	of the identifiers.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tpublic void setName(String name)<br>\
	\t{<br>\
	\t\tname = name;<br>\
	\t}\
	</code>

redundantAssignment.redundant.description = \
	Redundant assignment: {0}
redundantAssignment.redundant.explanation = \
	The assignment statement has no effect because it is assigning a variable \
	to itself. This is almost certainly unintentional. Such a situation often \
	indicates a missing qualifier, such as "this." for one or the other of \
	the identifiers.

	redundantAssignment.redundant.delete.name = Delete assignment
	redundantAssignment.redundant.delete.description = \
		Delete the redundant assignment.

	redundantAssignment.redundant.qualifyLeft.name = Qualify the left-hand side
	redundantAssignment.redundant.qualifyLeft.description = \
		Qualify the left-hand side by inserting "this.".

	redundantAssignment.redundant.qualifyRight.name = Qualify the right-hand side
	redundantAssignment.redundant.qualifyRight.description = \
		Qualify the right-hand side by inserting "this.".

################################################################################

redundantInterface.name = Redundant Interface Definition
redundantInterface.longName = \
	Be aware of redundant Interface implementation
redundantInterface.description = \
	<b>Summary</b>\
	<br/>\
	The offending class is implementing an interface that is already implemented.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for class and interface declarations where an \
	interface is explicitly implemented or extended when that same interface \
	is implicitly implemented or extended. This can occur if the superclass of \
	the class already implements the interface or if the class or interface \
	implements or extends an interface that already extends the interface. \
	In either case, the interface declaration is redundant and should be removed.\
	<p>\
	<b>Example</b>\
	<br/>\
	For example, given the following class declaration:\
	<p><code>\
	public class Employee implements Comparable ...\
	</code><p>\
	The declaration of Comparable in the following declaration would be flagged \
	as a violation:\
	<p><code>\
	public class SalariedEmployee extends Employee implements Comparable ...\
	</code>

# {0} = Supertype name
# {1} = Redundant interface name
redundantInterface.redundant.description = \
	Redundant implementation of {1}
redundantInterface.redundant.explanation = \
	The parent class {0} implements the {1} Interface.
	
	redundantInterface.redundant.delete.name = Delete Interface
	redundantInterface.redundant.delete.description = \
		Delete the redundant interface.

################################################################################

reflectionMethodUsage.name = Reflection Method Usage
reflectionMethodUsage.longName = \
	Don't use reflection in production code
reflectionMethodUsage.description = \
	<b>Summary</b>\
	<br/>\
	Don't use specific reflection methods.\
	<p>\
	<b>Description</b>\
	<br/>\
	Don't use Class getMethod(), getField(), getDeclaredMethod() or \
	getDeclaredField() methods in production code.

reflectionMethodUsage.avoid.description = \
	Avoid using the {0}.{1}() method
reflectionMethodUsage.avoid.explanation = \
	Avoid using the {0}.{1}() method

	reflectionMethodUsage.avoid.recommendation.name = Recommendation...
	reflectionMethodUsage.avoid.recommendation.description = \
		Don''t use this Reflection method.

################################################################################

repeatedAssignment.name = Repeated Assignment
repeatedAssignment.longName = \
	Don't assign the same value to the same variable multiple times
repeatedAssignment.description = \
	<b>Summary</b>\
	<br/>\
	A single variable should not be assigned the same value multiple times.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for multiple assignments of the same value to a \
	single variable within the same statement.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following assignment would be flagged because the variable x is \
	assigned the same value twice:\
	<p><code>\
	\t\tx = y = x = 0;\
	</code>

# {0} = variable name
repeatedAssignment.repeated.description = \
	Repeated assignment to {0}
repeatedAssignment.repeated.explanation = \
	The variable {0} is assigned the same value multiple times.

	repeatedAssignment.repeated.delete.name = Delete assignment
	repeatedAssignment.repeated.delete.description = \
		Delete the redundant assignment.

	repeatedAssignment.repeated.qualifyLeft.name = Qualify the left-hand side
	repeatedAssignment.repeated.qualifyLeft.description = \
		Qualify the left-hand side by inserting "this.".

	repeatedAssignment.repeated.qualifyRight.name = Qualify the right-hand side
	repeatedAssignment.repeated.qualifyRight.description = \
		Qualify the right-hand side by inserting "this.".

################################################################################

replaceSynchronizedClasses.name = Replace Synchronized Classes
replaceSynchronizedClasses.longName = \
	Replace Unnecessary Synchronized Classes
replaceSynchronizedClasses.description = \
	<b>Summary</b>\
	<br/>\
	Synchronized classes should only be used if the synchronization is necessary. \
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule flags uses of synchronized classes which could be replaced with \
	faster non-synchronized replacements.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following would be flagged because HashMap could be used instead: \
	<p><code>\
	\t\tHashtable foo = new Hashtable();\
	</code>

# {0} = Synchronized class
# {1} = Suggested replacement class
replaceSynchronizedClasses.found.description = \
	Use of {0}
replaceSynchronizedClasses.found.explanation = \
	The class <code>{0}</code> is a synchronized class.

	replaceSynchronizedClasses.found.recommendation.name = Recommendation...
	replaceSynchronizedClasses.found.recommendation.description = \
		Consider using the class <code>{1}</code>, which provides \
		similar functionality to <code>{0}</code>, but is unsynchronized.

################################################################################

resourceInjection.name = Resource Injection
resourceInjection.longName = \
	Possible Resource Injection vulnerabilities should be prevented
resourceInjection.description = \
	<b>Summary</b>\
	<br/>\
	Users input should not be able to specify resource identifiers.\
	<p>\
	<b>Description</b>\
	<br/>\
	Resource Injection occurs when the user is able to provide resource \
	identifiers such as a port number.\
	<p>\
	To detect violations, this audit rule searches the code for ServerSocket \
	creation methods such as <code>java.net.ServerSocket.ServerSocket(int)</code> and \
	traces where the query data could have come from. In cases where the \
	source of the port number is user input, such as data from a servlet request, \
	<code>javax.servlet.ServletRequest.getParameter(java.lang.String)</code>, \
	or from a SWT Text widget, <code>org.eclipse.swt.widgets.Text.getText()</code>, \
	a violation is created.\
	<p>\
	These two sets of methods, the locations where tainted user data can come \
	from and the methods used to identify resources, are editable by the user.\
	If methods are missing that are in a common package \
	(such as <code>java.lang.*</code>), please let CodePro support know.\
	<p>\
	<b>Security Implications</b>\
	<br/>\
	Successful Resource Injection attacks can potentially allow malicious users \
	to gain access to resources not intended by the application.\
	<p>\
	<b>Example</b>\
	<br/>\
	The invocation of the constructor <code>ServletRequest(..)</code> would be flagged \
	as a violation since it uses the port number passed from a servlet request:\
	<p><code>\
	\tServletRequest servletRequest = ..;<br>\
	\tString portNumberStr = servletRequest.getParameter("portNumber");<br>\
	\tint portNumber = (new Integer(portNumberStr)).intValue();<br>\
	\tServerSocket serverSocket = new ServerSocket(portNumber);<br>\
	</code>

resourceInjection.injection.description = \
	Resource Injection
resourceInjection.injection.explanation = \
	The data path below was found as a potential Resource Injection scenario. The \
	top of the path shows where the potentially harmful user data can enter \
	system. The bottom location in the path shows where the user data \
	originates.\
	<p>\
	{0}

	resourceInjection.injection.recommendation.name = Recommendation...
	resourceInjection.injection.recommendation.description = \
		User data should never be directly used to identify resources, the \
		path should be eliminated.

resourceInjection.stackDepth.description = \
	Resource Injection risk: path too long
resourceInjection.stackDepth.explanation = \
	While tracing the sources of ServerSocket creation statements, the data path below \
	was found. While it does not terminate at a point where user input could \
	enter the system, it is too long to not be considered a potential Resource \
	Injection risk. The following path is too long to be secure:\
	<p>\
	{0}

	resourceInjection.stackDepth.recommendation.name = Recommendation...
	resourceInjection.stackDepth.recommendation.description = \
		To minimize the risk of Resource Injection, ServerSocket creation methods should \
		be created and executed as locally as possible. Make the code more \
		secure by reducing the scope to this ServerSocket creation method.

resourceInjection.largeFan.description = \
	Resource Injection risk: too many sources
resourceInjection.largeFan.explanation = \
	While tracing the sources of ServerSocket creation statements, the data path below \
	was found. While it does not terminate at a point where user input could \
	enter the system, it has too many sources to not be considered a potential \
	Resource Injection risk.\
	<p>\
	{0}\
	<p>\
	The locations after this data path where it branches off are as follows:\
	<p>\
	{1}

	resourceInjection.largeFan.recommendation.name = Recommendation...
	resourceInjection.largeFan.recommendation.description = \
		To minimize the risk of Resource Injection, ServerSocket creation methods should \
		be created and executed as locally as possible. Make the code more \
		secure by reducing the number of possible paths into this ServerSocket \
		creation.

################################################################################

restrictedPackages.name = Restricted Packages
restrictedPackages.longName = \
	Don't import internal packages
restrictedPackages.description = \
	<b>Summary</b>\
	<br/>\
	Some packages contain internal implementation details and should never be \
	imported.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule allows the user to specify a list of package names that \
	should not be imported and will check that none of the packages on the \
	list are imported. For example, if the package name internal is included \
	in the list, then any import that contains the identifier internal as one \
	of the components of the package name would be flagged.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\timport org.eclipse.core.internal.runtime.*;\
	</code>

restrictedPackages.restricted.description = \
	Use of restricted package: {0}
restrictedPackages.restricted.explanation = \
	The package {0} has been marked as being inappropriate for use in this \
	context.

	restrictedPackages.restricted.recommendation.name = Recommendation...
	restrictedPackages.restricted.recommendation.description = \
		Do not use this package.

################################################################################

restrictedSuperclasses.name = Restricted Superclasses
restrictedSuperclasses.longName = \
	Don't subclass classes that were not intended to be subclassed
restrictedSuperclasses.description = \
	<b>Summary</b>\
	<br/>\
	Some classes should never be directly subclassed even though they cannot \
	be marked as final.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds classes that directly subclass any of a list \
	of classes that should never be directly subclassed. It is typically the \
	case that there are subclasses of these classes that can be subclassed.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule is configured to disallow direct subclasses of \
	java.lang.Throwable, the following class declaration would be flagged as \
	a violation:\
	<p><code>\
	\tpublic class QuestionableResult extends Throwable<br>\
	\t{<br>\
	\t\t...<br>\
	\t}\
	</code>

restrictedSuperclasses.restricted.description = \
	Use of restricted superclass "{0}": {1}
restrictedSuperclasses.restricted.explanation = \
	Classes should not directly subclass the class {0}. Consider making the \
	class {1} a subclass of an existing subclass of {0}.

	restrictedSuperclasses.restricted.recommendation.name = Recommendation...
	restrictedSuperclasses.restricted.recommendation.description = \
		Consider making the class a subclass of an existing subclass.

################################################################################

rethrownExceptions.name = Rethrown Exceptions
rethrownExceptions.longName = \
	Rethrow exceptions that calling code might be relying on catching
rethrownExceptions.description = \
	<b>Summary</b>\
	<br/>\
	Some exceptions should be rethrown.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds catch clauses that do not rethrow the original \
	exception. The list initially includes Error and ThreadDeath. For example, \
	if ThreadDeath is not rethrown, then the thread will not terminate.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule has been configured to require that instances of the class \
	java.lang.ThreadDeath must be rethrown, the following catch clause would \
	be flagged as a violation:\
	<p><code>\
	\ttry {<br>\
	\t\t...<br>\
	\t} catch (ThreadDeath exception) {<br>\
	\t\tresource.release();<br>\
	\t}\
	</code>

rethrownExceptions.disallowed.description = \
	Caught exception not rethrown: {0}
rethrownExceptions.disallowed.explanation = \
	The exception {0} should be rethrown if it is caught.

	rethrownExceptions.disallowed.recommendation.name = Recommendation...
	rethrownExceptions.disallowed.recommendation.description = \
		Rethrow the original exception.

################################################################################

returnBooleanExpressionValue.name = Return Boolean Expression Value
returnBooleanExpressionValue.longName = \
	Return the value of a boolean expression directly
returnBooleanExpressionValue.description = \
	<b>Summary</b>\
	<br/>\
	Return the value of a boolean expression directly.\
	<p>\
	<b>Description</b>\
	<br/>\
	Rather than testing a boolean value in an if-statement then returning true \
	or false, simply return the value of the boolean expression directly.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tif (booleanValue)<br>\
	\t\treturn true;<br>\
	\telse<br>\
	\t\treturn false;\
	</code><p>\
	Should be changed to:\
	<p><code>\
	\treturn booleanValue;\
	</code>

returnBooleanExpressionValue.returnExpr.description = \
	An if-statement always return true or false
returnBooleanExpressionValue.returnExpr.explanation = \
	Change the if-statement to a return statement, whose value is the \
	expression tested in the if-statement.

	returnBooleanExpressionValue.returnExpr.replace.name = Replace the if
	returnBooleanExpressionValue.returnExpr.replace.description = \
		Replace the if-statement with a return-statement whose return value is \
		the expression tested in the if-statement.

################################################################################

returnInFinally.name = Return in Finally
returnInFinally.longName = \
	Don't use an unconditional return statement inside a finally clause
returnInFinally.description = \
	<b>Summary</b>\
	<br/>\
	Finally blocks should not contain a return statement.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds places where a return statement is contained in a \
	finally block.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following return statement would be flagged as a violation:\
	<p><code>\
	\ttry {<br>\
	\t\t...<br>\
	\t} finally {<br>\
	\t\treturn 0;<br>\
	\t}<br>\
	\treturn array.length;\
	</code>

returnInFinally.return.description = \
	Return statement in a finally block
returnInFinally.return.explanation = \
	Return statements should not appear in finally blocks because the \
	semantics is too difficult to understand.

	returnInFinally.return.delete.name = Delete the return
	returnInFinally.return.delete.description = \
		Delete the return statement.

################################################################################

returnValue.name = Avoid null Return Values
returnValue.longName = \
	Return non-null values when possible
returnValue.description = \
	<b>Summary</b>\
	<br/>\
	Return values should not be null.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds places where null is returned rather than \
	array types or simple types.\
	<p>\
	<b>Example</b>\
	<br/>\
	The return statement in the following method would be flagged as a \
	violation:\
	<p><code>\
	\tpublic int[] getRowSums()<br>\
	\t{<br>\
	\t\tif (table == null) {<br>\
	\t\t\treturn null;<br>\
	\t\t}<br>\
	\t\t...<br>\
	\t}\
	</code>

returnValue.returnArrayType.description = \
	Return zero-length array instead of null
returnValue.returnArrayType.explanation = \
	Return a zero-length array instead of null so that clients do not need to \
	include additional null checks and to avoid the possibility of null \
	pointer exceptions.

	returnValue.returnArrayType.replace.name = Replace with empty array
	returnValue.returnArrayType.replace.description = \
		Replace the "null" with the creation of an empty array.

returnValue.returnEnumerationType.description = \
	Return enumeration instead of null
returnValue.returnEnumerationType.explanation = \
	Return an enumeration instead of null so that clients do not need to \
	include additional null checks and to avoid the possibility of null \
	pointer exceptions.

	returnValue.returnEnumerationType.recommendation.name = Recommendation...
	returnValue.returnEnumerationType.recommendation.description = \
		Return an enumeration instead of null.

returnValue.returnIteratorType.description = \
	Return iterator instead of null
returnValue.returnIteratorType.explanation = \
	Return an iterator instead of null so that clients do not need to \
	include additional null checks and to avoid the possibility of null \
	pointer exceptions.

	returnValue.returnIteratorType.recommendation.name = Recommendation...
	returnValue.returnIteratorType.recommendation.description = \
		Return an iterator instead of null.

returnValue.returnObjectType.description = \
	Return object instead of null
returnValue.returnObjectType.explanation = \
	Return an object instead of null so that clients do not need to \
	include additional null checks and to avoid the possibility of null \
	pointer exceptions.

	returnValue.returnObjectType.recommendation.name = Recommendation...
	returnValue.returnObjectType.recommendation.description = \
		Return an object instead of null.

################################################################################

reusableImmutables.name = Reusable Immutables
reusableImmutables.longName = \
	Reuse immutable objects by assigning them to constants
reusableImmutables.description = \
	<b>Summary</b>\
	<br/>\
	Objects that cannot be modified at run-time should be created as static \
	constants.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds the creation of some kinds of immutable objects. An \
	immutable object is an object whose state cannot be modified at run-time. \
	Such objects should be created as constants (static final fields) in order \
	to reduce the amount of garbage that must be collected.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tnew Integer(5);<br>\
	\tnew int[0];\
	</code>

reusableImmutables.zeroLengthArray.description = \
	Zero length arrays are immutable
reusableImmutables.zeroLengthArray.explanation = \
	Zero length arrays are immutable, and should therefore be the value of a \
	static final field.

	reusableImmutables.zeroLengthArray.recommendation.name = Recommendation...
	reusableImmutables.zeroLengthArray.recommendation.description = \
		Replace the array creation with a defined constant.

reusableImmutables.primitiveWrapper.description = \
	Instances of the class {0} are immutable
reusableImmutables.primitiveWrapper.explanation = \
	Instances of the class {0} are immutable, and should therefore be the \
	value of a static final field.

	reusableImmutables.primitiveWrapper.recommendation.name = Recommendation...
	reusableImmutables.primitiveWrapper.recommendation.description = \
		Replace the instance creation with a defined constant.

################################################################################

runtimeMethodUsage.name = Runtime Method Usage
runtimeMethodUsage.longName = \
	Don't use runtime methods in production code
runtimeMethodUsage.description = \
	<b>Summary</b>\
	<br/>\
	Don't use specific Runtime methods.\
	<p>\
	<b>Description</b>\
	<br/>\
	Don't use Runtime gc(), runFinalization() or runFinalizersOnExit() methods \
	in production code.

runtimeMethodUsage.avoid.description = \
	Avoid using the {0}.{1}() method
runtimeMethodUsage.avoid.explanation = \
	Avoid using the {0}.{1}() method

	runtimeMethodUsage.avoid.recommendation.name = Recommendation...
	runtimeMethodUsage.avoid.recommendation.description = \
		Don''t use this Runtime method.

################################################################################

serializeabilitySecurity.name = Serializeability Security
serializeabilitySecurity.longName = \
	Ensure classes are nonserializeable
serializeabilitySecurity.description = \
	<b>Summary</b>\
	<br/>\
	When an Object implements Serializeable, adversaries can sometimes serialize \
	the Object into a byte array, because of this, secure classes must be conscious \
	of Serializeable.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule enforces the implementation of the following in all classes \
	that implement java.io.Serializeable:\
	<p><code>\
	\tprivate final void writeObject(ObjectOutputStream in) throws IOException {<br>\
	\t\tnew java.io.IOException("Class cannot be serialized");<br>\
	\t}\
	</code><p>\
	This rule flags instances of Serializable that do not contain the \
	following method signature:\
	<p><code>\
	private void writeObject(ObjectOutputStream in) throws IOException;\
	</code>\
	<p>\
	<b>Security Implications</b>\
	<br/>\
	This audit rule aims to prevent adversaries from accessing the state of an \
	Object by extending classes and retrieving the Object data by calling \
	writeObject.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following method declaration would be flagged as a violation because it \
	does not have the required parameter:\
	<p><code>\
	\tprivate void writeObject() throws IOException;\
	</code>

serializeabilitySecurity.noWriteObject.description = \
	writeObject method missing
serializeabilitySecurity.noWriteObject.explanation = \
	The class "{0}" does not define a writeObject method as defined in \
	java.io.Serializable and thus is a hazard since adversaries can \
	retrieve an instance of a class by serializing the class.
	
	serializeabilitySecurity.noWriteObject.recommendation.name = \
		Include writeObject method
	serializeabilitySecurity.noWriteObject.recommendation.recommendation = \
		Implement a writeObject method that matches signature in java.io.Serializable.

serializeabilitySecurity.wrongInput.description = \
	writeObject has incorrect input
serializeabilitySecurity.wrongInput.explanation = \
	The method writeObject, in {1}, currently has the set of parameters {0} instead of \
	(ObjectOutputStream in)

	serializeabilitySecurity.wrongInput.replace.name = \
		Replace input
	serializeabilitySecurity.wrongInput.replace.recommendation = \
		Replace the current writeObject input with input to match the signature in \
		java.io.Serializable: ...writeObject(ObjectOutputStream in)...

serializeabilitySecurity.notPrivate.description = \
	writeObject is not private
serializeabilitySecurity.notPrivate.explanation = \
	The method writeObject, in {1}, currently has the modifier {0} instead of \
	private

	serializeabilitySecurity.notPrivate.replace.name = \
		Replace non-private modifier with private
	serializeabilitySecurity.notPrivate.replace.recommendation = \
		Replace the current writeObject non-private modifier with "private" to match \
		the signature in java.io.Serializable: ...private void writeObject...

serializeabilitySecurity.wrongReturn.description = \
	writeObject has incorrect return type
serializeabilitySecurity.wrongReturn.explanation = \
	The method writeObject, in {1}, currently has the return type {0} instead of \
	void

	serializeabilitySecurity.wrongReturn.replace.name = \
		Replace return type with void
	serializeabilitySecurity.wrongReturn.replace.recommendation = \
		Replace the current writeObject return type "{0}" with "void" to match the signature \
		in java.io.Serializable: ...private void writeObject...

serializeabilitySecurity.wrongExceptions.description = \
	writeObject has incorrect exceptions
serializeabilitySecurity.wrongExceptions.explanation = \
	The method writeObject, in {1}, currently has the exception(s) {0} instead of \
	the IOException exception

	serializeabilitySecurity.wrongExceptions.replace.name = \
		Correct exception set
	serializeabilitySecurity.wrongExceptions.replace.recommendation = \
		Replace the current writeObject exception set with \
		"throws IOException" to match the signature \
		in java.io.Serializable: ...writeObject(ObjectOutputStream in) \
		throws IOException;

################################################################################

serializableUsage.name = Serializable Usage
serializableUsage.longName = \
	Make classes that implement Serializable conform to the specification
serializableUsage.description = \
	<b>Summary</b>\
	<br/>\
	Serializable classes should be define properly.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds classes that are defined as Serializable (that \
	implement the interface java.io.Serializable) that have specific problems \
	or that do not need to be defined as Serializable.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following class would be flagged as a violation because it does not \
	define any instance fields:\
	<p><code>\
	\tpublic class Utilities implements Serializable<br>\
	\t{<br>\
	\t\tpublic static double computeInterest(double amount, double interestRate, double payment)<br>\
	\t\t{<br>\
	\t\t\t...<br>\
	\t\t}<br>\
	\t}\
	</code>

serializableUsage.noInstanceFields.description = \
	Serializable class {0} has no instance variables
serializableUsage.noInstanceFields.explanation = \
	Since the {0} class has no instance fields, it is not necessary to \
	declare it serializable, even if you intend subclasses derived from it \
	to be serializable. It is sufficient to provide a no-argument constructor.

	serializableUsage.noInstanceFields.recommendation.name = Recommendation...
	serializableUsage.noInstanceFields.recommendation.description = \
		Do not declare the class serializable.

serializableUsage.onlyTransient.description = \
	Serializable class {0} has only transient fields
serializableUsage.onlyTransient.explanation = \
	Since the {0} class has only transient fields and does not define either \
	a writeObject() or readObject() method, it has no state and therefore \
	should not be declared serializable. If you want to allow subclasses to be \
	serializable, then it is sufficient to provide a no-argument constructor.

	serializableUsage.onlyTransient.recommendation.name = Recommendation...
	serializableUsage.onlyTransient.recommendation.description = \
		Do not declare the class serializable.

serializableUsage.invalidBaseClass.description = \
	Serializable class {0} derives from {1} which is an invalid base class
serializableUsage.invalidBaseClass.explanation = \
	Since the {0} class derives from a {1} which is not serializable and does \
	not define an accessible, no-argument constructor, a NotSerializableException \
	will be thrown when you try to deserialize an object of this type.

	serializableUsage.invalidBaseClass.recommendation.name = Recommendation...
	serializableUsage.invalidBaseClass.recommendation.description = \
		Make the superclass properly serializable.

serializableUsage.serialVersionUID.description = \
	Serializable class {0} does not define a serialVersionUID field
serializableUsage.serialVersionUID.explanation = \
	The {0} class should define a serialVersionUID field. This prevents you \
	from breaking serialization compatibility across different versions of \
	your class.

	serializableUsage.serialVersionUID.recommendation.name = Recommendation...
	serializableUsage.serialVersionUID.recommendation.description = \
		Define a serialVersionUID field.

serializableUsage.serialVersionUID.bad.description = \
	The serialVersionUID field for {0} should be defined as "private static final long"
serializableUsage.serialVersionUID.bad.explanation = \
	The {0} class has an incorrectly defined serialVersionUID field. It \
	should be defined as should be defined as "private static final long".

	serializableUsage.serialVersionUID.bad.recommendation.name = Recommendation...
	serializableUsage.serialVersionUID.bad.recommendation.description = \
		Define the serialVersionUID field as "private static final long".

serializableUsage.readObject.description = \
	Serializable class {0} does not define a readObject() method
serializableUsage.readObject.explanation = \
	The {0} class should define a readObject() method in order to guarantee \
	security and class invariants.

	serializableUsage.readObject.recommendation.name = Recommendation...
	serializableUsage.readObject.recommendation.description = \
		Define a readObject() method.

################################################################################

sessionbean.name = Session Beans
sessionbean.longName = \
	Make session beans conform to the specification
sessionbean.description = \
	<b>Summary</b>\
	<br/>\
	Session Beans should be properly defined.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds problems with Session Beans:<br>\
	\t- Session bean should be declared public<br>\
	\t- Session bean should not be declared as abstract or final<br>\
	\t- Session bean name should end with 'Bean'<br>\
	\t- Session bean not implement a finalize() method<br>\
	\t- ejbCreate() method should be declared public<br>\
	\t- ejbCreate() method should not be declared as static or final<br>\
	\t- ejbCreate() method should be declared void<br>\
	\t- Session bean should implement at least one ejbCreate() method<br>\
	\t- Session bean should implement a no-argument constructor

sessionbean.notPublic.description = \
	The session bean {0} should be declared public
sessionbean.notPublic.explanation = \
	Enterprise session beans like {0} must be declared with public access.<br>\
	See EJB 2.0 - 7.10.2.

	sessionbean.notPublic.makePublic.name = Make public
	sessionbean.notPublic.makePublic.description = \
		Change the visibility of the session bean to be public.

sessionbean.abstractOrFinal.description = \
	The session bean {0} should not be declared abstract or final
sessionbean.abstractOrFinal.explanation = \
	Session beans like {0} must not be declared final or abstract.<br>\
	See EJB 2.0 - 7.10.2.

	sessionbean.abstractOrFinal.recommendation.name = Recommendation...
	sessionbean.abstractOrFinal.recommendation.description = \
		Do not declare the session bean final or abstract.

sessionbean.badName.description = \
	The name of the session bean {0} should end with "Bean"
sessionbean.badName.explanation = \
	Session beans like {0} should have names ending with "Bean".

	sessionbean.badName.rename.name = Rename the class to "{1}"
	sessionbean.badName.rename.description = \
		Rename the class from "{0}" to "{1}" to include the suffix "Bean".

sessionbean.finalize.description = \
	The session bean should not implement the finalize() method
sessionbean.finalize.explanation = \
	Session beans should not implement the finalize() method.<br>\
	See EJB 2.0 - 7.10.2.

	sessionbean.finalize.delete.name = Delete finalize()
	sessionbean.finalize.delete.description = \
		Delete the finalize() method.

sessionbean.ejbCreate.notPublic.description = \
	The {0} method should be declared public
sessionbean.ejbCreate.notPublic.explanation = \
	Session beans should declare {0} methods as public.<br>\
	See EJB 2.0 - 7.10.3.

	sessionbean.ejbCreate.notPublic.makePublic.name = Make public
	sessionbean.ejbCreate.notPublic.makePublic.description = \
		Change the visibility of the method to be public.

sessionbean.ejbCreate.static.description = \
	The {0} method should not be declared static
sessionbean.ejbCreate.static.explanation = \
	Session beans should not declare {0} methods as static.<br>\
	See EJB 2.0 - 7.10.3.

	sessionbean.ejbCreate.static.removeStatic.name = Remove static
	sessionbean.ejbCreate.static.removeStatic.description = \
		Remove the static modifier.

sessionbean.ejbCreate.final.description = \
	The {0} method should not be declared final
sessionbean.ejbCreate.final.explanation = \
	Session beans should not declare {0} methods as final.<br>\
	See EJB 2.0 - 7.10.3.

	sessionbean.ejbCreate.final.removeFinal.name = Remove final
	sessionbean.ejbCreate.final.removeFinal.description = \
		Remove the final modifier.

sessionbean.ejbCreate.notVoid.description = \
	The {0} method should be declared void
sessionbean.ejbCreate.notVoid.explanation = \
	Session beans should declare {0} methods to return void.<br>\
	See EJB 2.0 - 7.10.3.

	sessionbean.ejbCreate.notVoid.recommendation.name = Recommendation...
	sessionbean.ejbCreate.notVoid.recommendation.description = \
		Declare the method to return void.

sessionbean.ejbCreate.missing.description = \
	The session bean {0} should implement one or more ejbCreate() methods
sessionbean.ejbCreate.missing.explanation = \
	Session beans like {0} should implement one or more ejbCreate() methods.<br>\
	See EJB 2.0 - 7.10.3.

	sessionbean.ejbCreate.missing.recommendation.name = Recommendation...
	sessionbean.ejbCreate.missing.recommendation.description = \
		Implement one or more ejbCreate() methods.

sessionbean.noArgConstructor.missing.description = \
	The session bean {0} should implement a no-argument constructor
sessionbean.noArgConstructor.missing.explanation = \
	Session beans like {0} should implement a no-argument constructor.<br>\
	See EJB 2.0 - 7.10.2.

	sessionbean.noArgConstructor.missing.recommendation.name = Recommendation...
	sessionbean.noArgConstructor.missing.recommendation.description = \
		Implement a no-argument constructor.

################################################################################

sourceLength.name = Source Length
sourceLength.longName = \
	Limit the length of methods, constructors and initializers
sourceLength.description = \
	<b>Summary</b>\
	<br/>\
	Methods, constructors and initializers should be limited in length.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for methods, constructors and initializers that \
	are more that the specified number of lines in length.

sourceLength.constructor.description = \
	Constructor is longer than {0} lines
sourceLength.constructor.explanation = \
	The constructor is {1} lines long. Consider moving some of the behavior \
	into a method.

	sourceLength.constructor.recommendation.name = Recommendation...
	sourceLength.constructor.recommendation.description = \
		Consider moving some of the behavior into a method.

sourceLength.initializer.description = \
	Initializer is longer than {0} lines
sourceLength.initializer.explanation = \
	The initializer is {1} lines long. Consider moving some of the behavior \
	into a method.

	sourceLength.initializer.recommendation.name = Recommendation...
	sourceLength.initializer.recommendation.description = \
		Consider moving some of the behavior into a method.

sourceLength.method.description = \
	Method is longer than {0} lines
sourceLength.method.explanation = \
	The constructor is {1} lines long. Consider moving some of the behavior \
	into another method.

	sourceLength.method.recommendation.name = Recommendation...
	sourceLength.method.recommendation.description = \
		Consider moving some of the behavior into another method.

################################################################################

spaceAfterCasts.name = Space After Casts
spaceAfterCasts.longName = \
	Use a space to separate the type in a cast from the expression
spaceAfterCasts.description = \
	<b>Summary</b>\
	<br/>\
	Casts should be followed by white space.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for uses of type casts to ensure that there is at \
	least one space after the type.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following cast expression would be flagged as a violation because \
	there is no space between the type and the expression:\
	<p><code>\
	\tvalue = (String)table.get(key);\
	</code>

spaceAfterCasts.missing.description = \
	Missing space after cast
spaceAfterCasts.missing.explanation = \
	Type casts should be separated from the value being cast be a space.

	spaceAfterCasts.missing.insert.name = Insert space
	spaceAfterCasts.missing.insert.description = \
		Insert the missing space.

################################################################################

spaceAfterCommas.name = Space After Commas
spaceAfterCommas.longName = \
	Use a space after a comma, but not before
spaceAfterCommas.description = \
	<b>Summary</b>\
	<br/>\
	Commas should be followed by white space.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for uses of commas to ensure that there is a \
	space after the comma, but no space before the comma.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following method invocation would be flagged twice as a violation, \
	once for the extra space before the first comma, and again for the missing \
	space after the second comma:\
	<p><code>\
	\tmerge(result , left,right);\
	</code>

spaceAfterCommas.before.description = \
	Extra space before comma
spaceAfterCommas.before.explanation = \
	There should not be a space before a comma.

	spaceAfterCommas.before.delete.name = Delete space
	spaceAfterCommas.before.delete.description = \
		Delete the space before the comma.

spaceAfterCommas.after.description = \
	Missing space after comma
spaceAfterCommas.after.explanation = \
	There should be a space after a comma.

	spaceAfterCommas.after.insert.name = Insert space
	spaceAfterCommas.after.insert.description = \
		Insert the missing space.

################################################################################

spaceAroundOperators.name = Space Around Operators
spaceAroundOperators.longName = \
	Use spaces on both sides of operators to separate them from the operands
spaceAroundOperators.description = \
	<b>Summary</b>\
	<br/>\
	Binary operators should be surrounded by white space.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for uses of binary operators in which there is no \
	white space on either the left or right side of the operator.\
	<p>\
	If checked, the "Ignore prefix operators" option causes the audit rule to \
	ignore prefix operators when checking for whitespace violations (e.g. do \
	not flag the expression "(-i)" as a violation). \
	<p>\
	The "Ignore postfix operators" option is similar (e.g. do not flag the \
	expressions "(i++)" or i++; as violations).\
	<p>\
	<b>Example</b>\
	<br/>\
	The following arithmetic expression would be flagged twice as a violation, \
	once for the missing space before the operator and again for the missing \
	space after the operator:\
	<p><code>\
	\tindex+1\
	</code>

spaceAroundOperators.invalidBefore.description = \
	Invalid space before operator "{0}"
spaceAroundOperators.invalidBefore.explanation = \
	There should not be any space before the operator "{0}".

	spaceAroundOperators.invalidBefore.delete.name = Delete space
	spaceAroundOperators.invalidBefore.delete.description = \
		Delete the space before the operator.

spaceAroundOperators.invalidAfter.description = \
	Invalid space after operator "{0}"
spaceAroundOperators.invalidAfter.explanation = \
	There should not be any space after the operator "{0}".

	spaceAroundOperators.invalidAfter.delete.name = Delete space
	spaceAroundOperators.invalidAfter.delete.description = \
		Delete the space after the operator.

spaceAroundOperators.missingBefore.description = \
	Missing space before operator "{0}"
spaceAroundOperators.missingBefore.explanation = \
	There should be a space before the operator "{0}".

	spaceAroundOperators.missingBefore.insert.name = Insert space
	spaceAroundOperators.missingBefore.insert.description = \
		Insert the missing space.

spaceAroundOperators.missingAfter.description = \
	Missing space after operator "{0}"
spaceAroundOperators.missingAfter.explanation = \
	There should be a space after the operator "{0}".

	spaceAroundOperators.missingAfter.insert.name = Insert space
	spaceAroundOperators.missingAfter.insert.description = \
		Insert the missing space.

################################################################################

spaceAroundPeriods.name = Space Around Periods
spaceAroundPeriods.longName = \
	Don't include spaces either before or after periods
spaceAroundPeriods.description = \
	<b>Summary</b>\
	<br/>\
	Periods should not be surrounded by white space.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for uses of periods (within qualified names) in \
	which there is white space on either the left or right side of the \
	period.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following method invocation would be flagged twice as a violation, \
	once for the space before the period and again for the space after the \
	period:\
	<p><code>\
	\tpoint . getX()\
	</code>

spaceAroundPeriods.invalidBefore.description = \
	Extra space before period
spaceAroundPeriods.invalidBefore.explanation = \
	There should not be any space before a period.

	spaceAroundPeriods.invalidBefore.delete.name = Delete space
	spaceAroundPeriods.invalidBefore.delete.description = \
		Delete the space before the operator.

spaceAroundPeriods.invalidAfter.description = \
	Extra space after period
spaceAroundPeriods.invalidAfter.explanation = \
	There should not be any space after a period.

	spaceAroundPeriods.invalidAfter.delete.name = Delete space
	spaceAroundPeriods.invalidAfter.delete.description = \
		Delete the space after the operator.

################################################################################

specifyAnErrorPage.name = Specify an Error Page
specifyAnErrorPage.longName = \
	JSP pages should specify an error page
specifyAnErrorPage.description = \
	<b>Summary</b>\
	<br/>\
	JSP pages should specify an error page.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds JSP files that do not contain a page directive that \
	specifies the error page to use.

specifyAnErrorPage.missing.description = \
	No error page specified
specifyAnErrorPage.missing.explanation = \
	A JSP page page was found that does not include the specification of an \
	error page.

	specifyAnErrorPage.missing.recommendation.name = Recommendation...
	specifyAnErrorPage.missing.recommendation.description = \
		Add a page directive with an errorPage attribute referencing a page \
		that can be used to provide error information to the user.

################################################################################

sqlInjection.name = SQL Injection
sqlInjection.longName = \
	Possible SQL Injection vulnerabilities should be prevented
sqlInjection.description = \
	<b>Summary</b>\
	<br/>\
	SQL queries might be receiving data from the user or other unsafe sources.\
	<p>\
	<b>Description</b>\
	<br/>\
	SQL Injection occurs when the user is able to enter data directly into \
	SQL queries.\
	<p>\
	To detect violations, this audit rule searches the code for SQL queries \
	such as <code>java.sql.Statement.execute(..)</code> and \
	traces where the query data could have come from. In cases where the \
	source of the query is user input, such as data from a servlet request, \
	<code>javax.servlet.ServletRequest.getParameter(java.lang.String)</code>, \
	or from a SWT Text widget, <code>org.eclipse.swt.widgets.Text.getText()</code>, \
	a violation is created.\
	<p>\
	These two sets of methods, the locations where tainted user data can come \
	from and the methods used to query the database, are editable by the user.\
	If methods are missing that are in a common package \
	(such as <code>java.lang.*</code>), please let CodePro support know.\
	<p>\
	Also note, the SQL query methods for Hibernate and Persistence frameworks \
	have been added.\
	<p>\
	<b>Security Implications</b>\
	<br/>\
	Successful SQL Injection attacks can potentially drop \
	tables, update the database in a malicious manner and even gain \
	administrator access.\
	<p>\
	<b>Example</b>\
	<br/>\
	The invocation of the method <code>executeQuery(..)</code> would be flagged \
	as a violation since it uses the first name information passed from a \
	servlet request:\
	<p><code>\
	\tServletRequest servletRequest;<br>\
	\tConnection connection;<br>\
	\tStatement statement;<br>\
	\t<br>\
	\tservletRequest = ...;<br>\
	\tconnection = DriverManager.getConnection("www.example.com", "myUserName", "myPassword");<br>\
	\tstatement = connection.createStatement();<br>\
	\t<br>\
	\tString firstName = req.getParameter("firstName");<br>\
	\tString query = "SELECT * FROM user_data WHERE firstName = '" + firstName + "'";<br>\
	\tstatement.executeQuery(query);<br>\
	</code>

sqlInjection.injection.description = \
	SQL Injection
sqlInjection.injection.explanation = \
	The data path below was found as a potential SQL Injection scenario. The \
	top of the path shows where the potentially harmful user data can enter \
	SQL queries. The bottom location in the path shows where the user \
	data originates.\
	<p>\
	{0}

	sqlInjection.injection.recommendation.name = Recommendation...
	sqlInjection.injection.recommendation.description = \
		User data should never directly be put into SQL queries, either the \
		path should be eliminated or <code>java.sql.PreparedStatement</code> \
		should be used instead of <code>java.sql.Statement</code>.

sqlInjection.stackDepth.description = \
	SQL Injection risk: path too long
sqlInjection.stackDepth.explanation = \
	While tracing the sources of the SQL query statements, the data path below \
	was found. While it does not terminate at a point where user input could \
	enter the system, it is too long to not be considered a potential SQL \
	Injection risk. The following path is too long to be secure:\
	<p>\
	{0}

	sqlInjection.stackDepth.recommendation.name = Recommendation...
	sqlInjection.stackDepth.recommendation.description = \
		To minimize the risk of SQL Injection, SQL queries should be created and \
		executed as locally as possible. Make the code more secure by reducing \
		the scope to this SQL query.

sqlInjection.largeFan.description = \
	SQL Injection risk: too many sources
sqlInjection.largeFan.explanation = \
	While tracing the sources of the SQL query statements, the data path below \
	was found. While it does not terminate at a point where user input could \
	enter the system, it has too many sources to not be considered a potential \
	SQL Injection risk.\
	<p>\
	{0}\
	<p>\
	The locations after this data path where it branches off are as follows:\
	<p>\
	{1}

	sqlInjection.largeFan.recommendation.name = Recommendation...
	sqlInjection.largeFan.recommendation.description = \
		To minimize the risk of SQL Injection, SQL queries should be created and \
		executed as locally as possible. Make the code more secure by reducing \
		the number of possible paths into this SQL query.

################################################################################

statementCreation.name = Statement Creation
statementCreation.longName = \
	Use PreparedStatement or CallableStatement rather than Statement
statementCreation.description = \
	<b>Summary</b>\
	<br/>\
	SQL statements should be prepared or callable.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for the use of any of the createStatement methods \
	defined in java.sql.Connection. These methods should not be used to create \
	statements because the statements might not be either prepared or callable.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following method invocation would be flagged as a violation:\
	<p><code>\
	\tconnection.createStatement();\
	</code>

statementCreation.createStatement.description = \
	Invalid SQL statement creation
statementCreation.createStatement.explanation = \
	The method createStatement should not be used.

	statementCreation.createStatement.recommendation.name = Recommendation...
	statementCreation.createStatement.recommendation.description = \
		Use either the method prepareStatement or prepareCall.

################################################################################

staticFieldNamingConvention.name = Static Field Naming Convention
staticFieldNamingConvention.longName = \
	Use the standard naming convention for static fields
staticFieldNamingConvention.description = \
	<b>Summary</b>\
	<br/>\
	Static fields should have names that conform to the defined standard.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks the names of all static fields that are not also \
	final.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule has been configured to allow only names that begin with an \
	upper case letter, then the following declaration would be flagged as a \
	violation:\
	<p><code>\
	\tpublic static int minutesPerHour = 60;\
	</code>

staticFieldNamingConvention.invalidName.description = \
	Invalid field name: "{0}" {1}
staticFieldNamingConvention.invalidName.explanation = \
	The field name "{0}" does not conform because it {1}.

	staticFieldNamingConvention.invalidName.rename.name = Rename field to "{1}"
	staticFieldNamingConvention.invalidName.rename.description = \
		Rename the field from "{0}" to "{1}".

################################################################################

staticFieldSecurity.name = Static Field Security
staticFieldSecurity.longName = \
	Don't declare non-final public static fields
staticFieldSecurity.description = \
	<b>Summary</b>\
	<br/>\
	Refrain from using non-final public static fields.\
	<p>\
	<b>Description</b>\
	<br/>\
	To the extent possible, refrain from using non-final public static fields \
	because there is no way to check whether the code that changes such \
	fields has appropriate permissions.\
	<p>\
	<b>Security Implications</b>\
	<br/>\
	Public, non-final static fields are accessible and changeable from anywhere \
	within the application making them potential targets of malicious users.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following declaration would be flagged as a violation because it is \
	both public and non-final:\
	<p><code>\
	\tpublic static int minutesPerHour = 60;\
	</code>

staticFieldSecurity.staticFieldIsNotFinal.description = \
	Non-final {1} static field: "{0}"
staticFieldSecurity.staticFieldIsNotFinal.explanation = \
	The field "{0}" is a non-final {1} static field \
	and there is no check whether the code that changes it \
	has appropriate permissions.\
	<p>\
	Recommendation:\
	<p>\
	1. Make the field final.\
	<p>\
	or\
	<p>\
	1. Change the field visibility to private.<br>\
	2. Add accessor methods that check code permissions.<br>\
	3. Modify existing code to use accessor methods.
	
	staticFieldSecurity.staticFieldVisibilityViolation.makeFinal.name = Make field final
	staticFieldSecurity.staticFieldVisibilityViolation.makeFinal.description = \
		Change field from non-final to final.

################################################################################

staticInstantiation.name = Static Instantiation
staticInstantiation.longName = \
	Don't instantiate classes with only static methods
staticInstantiation.description = \
	<b>Summary</b>\
	<br/>\
	Do not instantiate classes which contain only static methods.\
	<p>\
	<b>Description</b>\
	<br/>\
	Instead of instantiating a class in order to call a static method, \
	you should simply call Class.method(). This saves memory by not \
	creating useless instances of classes.\
	<p>\
	<b>Example</b>\
	<br/>\
	Given two classes, <code>Foo</code> and <code>Bar</code>, the \
	following would be flagged as a violation: \
	<p><code>\
	\tpublic class Foo {<br>\
	\t\tpublic static doSomething() {<br>\
	\t\t\t...<br>\
	\t\t}<br>\
	\t}<br>\
	\t<br>\
	\tpublic class Bar {<br>\
	\t\tpublic doSomethingElse() {<br>\
	\t\t\tnew Foo().doSomething();<br>\
	\t\t}<br>\
	\t}<br>\
	</code>

staticInstantiation.found.description = \
	Instantiation of class {0} found
staticInstantiation.found.explanation = \
	The class <code>{0}</code> has no non-static methods, fields, or types, so \
	there is no need to create a new instance of it.
	
	staticInstantiation.found.fix.name = Recommendation...
	staticInstantiation.found.fix.description = \
	Rather than creating a new instance of <code>{0}</code> to call its methods, \
	simply call them using <code>{0}.<i>method</i>()</code>.


################################################################################

staticMemberAccess.name = Static Member Access
staticMemberAccess.longName = \
	Access static members by declaring type
staticMemberAccess.description = \
	<b>Summary</b>\
	<br/>\
	Static members should only be accessed by referencing the type in which \
	they are declared.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for references to static members that use either a \
	subtype of the type in which they are declared or an instance of either \
	the declaring type or one of its subtypes.\
	<p>\
	<b>Example</b>\
	<br/>\
	Given the following declarations:\
	<p><code>\
	\tpublic class DeclaringClass<br>\
	\t{<br>\
	\t\tpublic static final int ZERO = 0;<br>\
	\t\t...<br>\
	\t}<br>\
	<br>\
	\tpublic class SubclassOfDeclaringClass extends DeclaringClass<br>\
	\t{<br>\
	\t\t...<br>\
	\t}<br>\
	<br>\
	\tDeclaringClass instanceOfDeclaringClass;<br>\
	\tSubclassOfDeclaringClass instanceOfSubclass;\
	</code><p>\
	The following expressions would all be flagged as violations:\
	<p><code>\
	\tSubclassOfDeclaringClass.ZERO<br>\
	\tinstanceOfDeclaringClass.ZERO<br>\
	\tinstanceOfSubclass.ZERO\
	</code>

staticMemberAccess.subtype.description = \
	Accessing static member through subtype
staticMemberAccess.subtype.explanation = \
	A static {0} declared in {1} is being accessed as if it were declared in\
	{1}

	staticMemberAccess.subtype.replace.name = Replace with Declaring Type
	staticMemberAccess.subtype.replace.description = \
		Replace the current subtype with the declaring type

staticMemberAccess.instance.description = \
	Accessing static member through an instance
staticMemberAccess.instance.explanation = \
	A static {0} declared in {1} is being accessed as if it were an instance {0}

	staticMemberAccess.instance.recommendation.name = Recommendation...
	staticMemberAccess.instance.recommendation.description = \
		Access the member through the declaring type

################################################################################

stringComparison.name = String Comparison
stringComparison.longName = \
	Don't use equals (==) or not equals (!=) to compare Strings
stringComparison.description = \
	<b>Summary</b>\
	<br/>\
	Strings should not be compared using equals (==) or not equals (!=).\
	<p>\
	<b>Description</b>\
	<br/>\
	Strings should always be compared using one of the comparison methods \
	defined for strings. This audit rule looks for comparisons using either \
	the equals (==) or not equals (!=) operators.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tString currentName, proposedName;\
	<p>\
	\t...<br>\
	\tif (proposedName != currentName) {<br>\
	\t\t...<br>\
	\t}\
	</code>

stringComparison.invalid.description = \
	Cannot compare strings using the {0} operator
stringComparison.invalid.explanation = \
	Strings with the same characters will not compare as equal using either \
	the identity (==) or non-identity (!=) operators.

	stringComparison.invalid.replaceWithEquals.name = Replace with equals()
	stringComparison.invalid.replaceWithEquals.description = \
		Replace the comparison with equals().

################################################################################

stringConcatenationInLoop.name = String Concatenation in Loop
stringConcatenationInLoop.longName = \
	Don't concatenate Strings within a loop
stringConcatenationInLoop.description = \
	<b>Summary</b>\
	<br/>\
	Strings should not be concatenated within a loop.\
	<p>\
	<b>Description</b>\
	<br/>\
	The code to concatenate two strings is not very efficient because it \
	creates a StringBuffer for each concatenation. When placed in a loop, \
	this can result in the creation and collection of large numbers of \
	temporary objects. You can create the StringBuffer before entering the \
	loop, and append to it within the loop, thus reducing the overhead.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tString[] path;<br>\
	\tString result = "";<br>\
	\tfor (int i = 0; i &lt; path.length; i++) {<br>\
	\t\tresult = result + "." + path[i];<br>\
	\t}\
	</code>

stringConcatenationInLoop.invalid.description = \
	Concatenation of strings within a loop
stringConcatenationInLoop.invalid.explanation = \
	The code to concatenate two strings is not very efficient because it \
	creates a StringBuffer for each concatenation. When placed in a loop, \
	this can result in the creation and collection of large numbers of \
	temporary objects. You can create the StringBuffer before entering the \
	loop, and append to it within the loop, thus reducing the overhead.

	stringConcatenationInLoop.invalid.recommendation.name = Recommendation...
	stringConcatenationInLoop.invalid.recommendation.description = \
		Create a StringBuffer before entering the loop, and append to it \
		within the loop.

################################################################################

stringCreatedFromLiteral.name = String Created from Literal
stringCreatedFromLiteral.longName = \
	Don't use String literals to create Strings
stringCreatedFromLiteral.description = \
	<b>Summary</b>\
	<br/>\
	Strings should not be created from a String literal.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds places in the code where a String literal is used to \
	initialize a newly created String. Doing so is almost never necessary and \
	usually only serves to waste both time and space.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following expression would be flagged as a violation:\
	<p><code>\
	\tnew String("Pause");\
	</code>

stringCreatedFromLiteral.stringLiteral.description = \
	String literal used to create a String
stringCreatedFromLiteral.stringLiteral.explanation = \
	String literals should not be used to initialize a newly created String.

	stringCreatedFromLiteral.stringLiteral.useLiteral.name = Use the literal
	stringCreatedFromLiteral.stringLiteral.useLiteral.description = \
		Use the literal directly without copying it.

################################################################################

stringIndexOfUse.name = String indexOf Use
stringIndexOfUse.longName = \
	Don't compare output from String.indexOf with &gt; 0 or &lt;= 0
stringIndexOfUse.description = \
	<b>Summary</b>\
	<br/>\
	Don't compare output from String.indexOf with &gt; 0 or &lt;= 0.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for the common off-by-one-error caused by comparing \
	String.indexOf() to 0, for example: "indexOf(..) &gt; 0." This is read as \
	"if indexOf is greater than 0 then the there doesn't exist an instance of \
	what we are looking for", but the mistake here is that indexOf returns -1 \
	if nothing was found, not 0. Hence, the user meant "&gt;=", not "&gt;". The \
	opposite mistake is made with "indexOf &lt;= 0."\
	<p>\
	All "indexOf" methods in java.lang.String are detected by this rule, see \
	indexOf(int), indexOf(int, int), lastIndexOf(int), lastIndexOf(int, int), \
	indexOf(String), etc.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following comparison would be flagged as a violation:\
	<p><code>\
	\tstr.indexOf('.') &gt; 0\
	</code>

stringIndexOfUse.shouldBeGTE.description = \
	Comparison may be an off-by-one error
stringIndexOfUse.shouldBeGTE.explanation = \
	The indexOf and lastIndexOf methods return a 0-indexed result, comparing \
	such a result with "&gt; 0" is most likely a typo.

	stringIndexOfUse.shouldBeGTE.makeGTE.name = Change operator to >=
	stringIndexOfUse.shouldBeGTE.makeGTE.description = \
		Most comparisons of this type mean "&gt;=", not "&gt;"

stringIndexOfUse.shouldBeLTE.description = \
	Comparison may be an off-by-one error
stringIndexOfUse.shouldBeLTE.explanation = \
	The indexOf and lastIndexOf methods return a 0-indexed result, comparing \
	such a result with "0 &lt;" is most likely a typo.

	stringIndexOfUse.shouldBeLTE.makeLTE.name = Change operator to <=
	stringIndexOfUse.shouldBeLTE.makeLTE.description = \
		Most comparisons of this type mean "&lt;=", not "&lt;"

stringIndexOfUse.shouldBeGT.description = \
	Comparison may be an off-by-one error
stringIndexOfUse.shouldBeGT.explanation = \
	The indexOf and lastIndexOf methods return a 0-indexed result, comparing \
	such a result with "&gt;= 0" is most likely a typo.

	stringIndexOfUse.shouldBeGT.makeGT.name = Change operator to >
	stringIndexOfUse.shouldBeGT.makeGT.description = \
		Most comparisons of this type mean "&gt;", not "&gt;="

stringIndexOfUse.shouldBeLT.description = \
	Comparison may be an off-by-one error
stringIndexOfUse.shouldBeLT.explanation = \
	The indexOf and lastIndexOf methods return a 0-indexed result, comparing \
	such a result with "&lt;= 0" is most likely a typo.

	stringIndexOfUse.shouldBeLT.makeLT.name = Change operator to <
	stringIndexOfUse.shouldBeLT.makeLT.description = \
		Most comparisons of this type mean "&lt;", not "&lt;="

################################################################################

stringLiterals.name = String Literals
stringLiterals.longName = \
	Place literal strings in property files
stringLiterals.description = \
	<b>Summary</b>\
	<br/>\
	String literals should not appear in code.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for string literals within the code that are not \
	included in a user-defined list of acceptable literal values. The rule \
	can be configured to ignore strings that are used as static final field \
	initializers, contain single characters, only whitespace and/or digits \
	and/or a specially formed trailing comment.\
	<p>\
	The primary purpose of this rule is to aid in internationalization \
	efforts. With this rule on, you can identify all of the hardcoded strings \
	in the application and move them out into external property files that can \
	be translated.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tString message = "Houston, we have ignition.";\
	</code>

stringLiterals.invalid.description = \
	Invalid string literal: {0}
stringLiterals.invalid.explanation = \
	Literal strings should not appear in code because it is too hard to \
	localize the code.

	stringLiterals.invalid.recommendation.name = Recommendation...
	stringLiterals.invalid.recommendation.description = \
		Consider defining a constant to represent the string or move it to a \
		resource bundle.

	stringLiterals.invalid.markNonNLS.name = Mark as non-NLS
	stringLiterals.invalid.markNonNLS.description = \
		Mark the string as not containing natural language text.

stringLiterals.unnecessaryTag.description = \
	Unnecessary override tag
stringLiterals.unnecessaryTag.explanation = \
	Override tags that are not required should be removed.

	stringLiterals.unnecessaryTag.delete.name = Delete the Tag
	stringLiterals.unnecessaryTag.delete.description = \
		Delete the unnecessary override tag

################################################################################

stringMethodUsage.name = String Method Usage
stringMethodUsage.longName = \
	Use the class Collator to compare strings
stringMethodUsage.description = \
	<b>Summary</b>\
	<br/>\
	The String.equals(), String.equalsIgnoreCase() and String.comparesTo() \
	methods should not be used in an internationalized environment.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for the use of the String.equals(),\
	String.equalsIgnoreCase(), String.comparesTo() and String.indexOf() \
	methods in an internationalized environment. These methods cannot be \
	relied on to sort strings because the Unicode values of the characters \
	in the strings do not correspond to the relative order of the characters \
	in most languages.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following expression would be flagged as a violation:\
	<p><code>\
	\tif (stringArray[i].equals(stringToInsert)) {<br>\
	\t\t...<br>\
	\t}\
	</code>

stringMethodUsage.equals.description = \
	Don''t use String.equals() in an internationalized environment
stringMethodUsage.equals.explanation = \
	The String.equals() method should not be used in an internationalized \
	environment because the Unicode values of the characters in the strings \
	do not correspond to the relative order of the characters in most languages.

	stringMethodUsage.equals.replace.name = Replace with Collator.equals()
	stringMethodUsage.equals.replace.description = \
		Replace with a call to Collator.equals().

stringMethodUsage.equalsIgnoreCase.description = \
	Don''t use String.equalsIgnoreCase() in an internationalized environment
stringMethodUsage.equalsIgnoreCase.explanation = \
	The String.equalsIgnoreCase() method should not be used in an \
	internationalized environment because the Unicode values of the characters \
	in the strings do not correspond to the relative order of the characters \
	in most languages.

	stringMethodUsage.equalsIgnoreCase.replace.name = Replace with Collator.equals()
	stringMethodUsage.equalsIgnoreCase.replace.description = \
		Replace with a call to Collator.equals()

stringMethodUsage.compareTo.description = \
	Don''t use String.compareTo() in an internationalized environment
stringMethodUsage.compareTo.explanation = \
	The String.compareTo() method should not be used in an internationalized \
	environment because the Unicode values of the characters in the strings do \
	not correspond to the relative order of the characters in most languages.

	stringMethodUsage.compareTo.replace.name = Replace with Collator.compare()
	stringMethodUsage.compareTo.replace.description = \
		Replace with a call to Collator.compare().

stringMethodUsage.compareToIgnoreCase.description = \
	Don''t use String.compareToIgnoreCase() in an internationalized environment
stringMethodUsage.compareToIgnoreCase.explanation = \
	The String.compareToIgnoreCase() method should not be used in an internationalized \
	environment because the Unicode values of the characters in the strings do \
	not correspond to the relative order of the characters in most languages.

	stringMethodUsage.compareToIgnoreCase.replace.name = Replace with Collator.compare()
	stringMethodUsage.compareToIgnoreCase.replace.description = \
		Replace with a call to Collator.compare().

stringMethodUsage.indexOf.description = \
	Don''t use String.indexOf() in an internationalized environment
stringMethodUsage.indexOf.explanation = \
	The String.indexOf() method should not be used in an internationalized \
	environment.

	stringMethodUsage.indexOf.recommendation.name = Recommendation...
	stringMethodUsage.indexOf.recommendation.description = \
		Don''t use String.indexOf() in an internationalized environment.

################################################################################

stringTokenizer.name = StringTokenizer Usage
stringTokenizer.longName = \
	Don't use the class StringTokenizer
stringTokenizer.description = \
	<b>Summary</b>\
	<br/>\
	The StringTokenizer class should not be used in an internationalized \
	environment.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for the use of the StringTokenizer class \
	in an internationalized environment. This class cannot be relied on \
	because the Unicode values of the characters in the strings do not \
	correspond to the relative order of the characters in most languages.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following instance creation expression would be flagged as a \
	violation:\
	<p><code>\
	\tnew StringTokenizer(inputString)\
	</code>

stringTokenizer.create.description = \
	Don''t use StringTokenizer in an internationalized environment
stringTokenizer.create.explanation = \
	The StringTokenizer class should not be used in an internationalized \
	environment.

	stringTokenizer.create.recommendation.name = Recommendation...
	stringTokenizer.create.recommendation.description = \
		Do not use StringTokenizer in an internationalized environment.

################################################################################

synchronizedInLoop.name = Synchronized In Loop
synchronizedInLoop.longName = \
	Place synchronized statements outside of loops when possible
synchronizedInLoop.description = \
	<b>Summary</b>\
	<br/>\
	Synchronized statement used in a loop.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for uses of the synchronized statement that occur \
	within a loop. Synchronization is relatively expensive, so the synchronized \
	statement should be moved to enclose the loop.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following use of the synchronized statement would be flagged as an \
	error:\
	<p><code>\
	\tfor (int i = 0; i &lt; 10; i++) {<br>\
	\t\tsynchronized (monitor) {<br>\
	\t\t\tmonitor.doSomeWork();<br>\
	\t\t}<br>\
	\t}\
	</code>

synchronizedInLoop.inLoop.description = \
	Synchronized statement used in loop
synchronizedInLoop.inLoop.explanation = \
	A synchronized statement is being used in loop.

	synchronizedInLoop.inLoop.recommendation.name = Recommendation...
	synchronizedInLoop.inLoop.recommendation.description = \
		Move the synchronized statement to be outside the loop if possible.

################################################################################

synchronizedMethod.name = Synchronized Method
synchronizedMethod.longName = \
	Use the synchronized statement rather than marking methods as synchronized
synchronizedMethod.description = \
	<b>Summary</b>\
	<br/>\
	Methods should never be marked as synchronized.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule reports the use of the synchronized modifier with methods. \
	It is too easy to miss the existence of the synchronized modifier, so \
	following this rule leads to more readable code.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tpublic synchronized String getName()<br>\
	\t{<br>\
	\t\t...<br>\
	\t}\
	</code>

synchronizedMethod.invalid.description = \
	Use of synchronized modifier
synchronizedMethod.invalid.explanation = \
	Methods should not be marked as "synchronized" because it is too hard to \
	see the modifier. Consider wrapping the appropriate portion of the \
	method''s body in a synchronized statement.

	synchronizedMethod.invalid.recommendation.name = Recommendation...
	synchronizedMethod.invalid.recommendation.description = \
		Use a synchronized statement rather than the synchronized modifier.

################################################################################

temporaryObjectCreation.name = Temporary Object Creation
temporaryObjectCreation.longName = \
	Don't create numeric objects to convert primitive values to Strings
temporaryObjectCreation.description = \
	<b>Summary</b>\
	<br/>\
	Instances of numeric classes should not be created solely for the purpose \
	of converting a numeric value to a string.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for the creation of numeric classes where the only \
	purpose for the object is to invoke the toString() method on it. All of \
	the numeric classes implement a static toString() method that can do the \
	same thing, but without the cost of creating and collecting an extra \
	object.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following expression would be flagged as a violation:\
	<p><code>\
	\t(new Integer(age)).toString()\
	</code>

temporaryObjectCreation.toString.description = \
	Unnecessary creation of {0} object
temporaryObjectCreation.toString.explanation = \
	There is no need to create an instance of the class {0} in order to convert \
	a numeric value to a string. There is a static toString() method that will \
	return exactly the same result.

	temporaryObjectCreation.toString.replace.name = Replace with {0}.toString()
	temporaryObjectCreation.toString.replace.description = \
		Replace with a call to {0}.toString(...).

################################################################################

testCaseNamingConvention.name = Test Case Naming Convention
testCaseNamingConvention.longName = \
	Use the standard naming convention for test cases
testCaseNamingConvention.description = \
	<b>Summary</b>\
	<br/>\
	Test case names should conform to the defined standard.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks the names of all test cases to ensure that they \
	conform to the standard.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule were configured to require that the word "Test" be appended \
	to every test case's name, the following class declaration would be \
	flagged as a violation:\
	<p><code>\
	\tpublic class MyTestClass extends TestCase<br>\
	\t{<br>\
	\t\t...<br>\
	\t}\
	</code>

testCaseNamingConvention.invalidName.description = \
	Invalid test case name: "{0}" {1}
testCaseNamingConvention.invalidName.explanation = \
	The test case name "{0}" does not conform because it {1}.

	testCaseNamingConvention.invalidName.recommendation.name = Rename test case to "{1}"
	testCaseNamingConvention.invalidName.recommendation.description = \
		Rename the test case from "{0}" to "{1}".

################################################################################

toStringMethodUsage.name = toString() Method Usage
toStringMethodUsage.longName = \
	Use formatting classes to convert dates and numbers to Strings
toStringMethodUsage.description = \
	<b>Summary</b>\
	<br/>\
	The toString() methods for Dates, Times and Numerics should not \
	be used in an internationalized environment.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for the use of the toString() methods for Dates, \
	Times and Numerics in an internationalized environment. Date, time and \
	numeric formats differ with region and language, so consistent results \
	cannot be counted on.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following use of the toString() method would be flagged as a \
	violation:\
	<p><code>\
	\ttoday = new Date();<br>\
	\tdateString = today.toString();\
	</code>

toStringMethodUsage.date.description = \
	Don''t use Date.toString() in an internationalized environment
toStringMethodUsage.date.explanation = \
	The Date.toString() method should not be used in an internationalized \
	environment because date formats differ with region and language, so \
	consistent results cannot be counted on.

	toStringMethodUsage.date.replace.name = Replace with DateFormat.format()
	toStringMethodUsage.date.replace.description = \
		Replace with a call to DateFormat.format().

toStringMethodUsage.time.description = \
	Don''t use Time.toString() in an internationalized environment
toStringMethodUsage.time.explanation = \
	The Time.toString() method should not be used in an internationalized \
	environment because time formats differ with region and language, so \
	consistent results cannot be counted on.

	toStringMethodUsage.time.replace.name = Replace with DateFormat.format()
	toStringMethodUsage.time.replace.description = \
		Replace with a call to DateFormat.format().

toStringMethodUsage.number.description = \
	Don''t use {0}.toString() in an internationalized environment
toStringMethodUsage.number.explanation = \
	The {0}.toString() method should not be used in an internationalized \
	environment because numeric formats differ with region and language, so \
	consistent results cannot be counted on.

	toStringMethodUsage.number.replace.name = Replace with NumberFormat.format()
	toStringMethodUsage.number.replace.description = \
		Replace with a call to NumberFormat.format().

################################################################################

throwInFinally.name = Throw in Finally
throwInFinally.longName = \
	Don't use a throw statement within a finally clause
throwInFinally.description = \
	<b>Summary</b>\
	<br/>\
	Finally blocks should not contain a throw statement.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds places where a throw statement is contained in a \
	finally block.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following throw statement would be flagged as a violation because it \
	occurs within a finally block:\
	<p><code>\
	\ttry {<br>\
	\t\t...<br>\
	\t} finally {<br>\
	\t\tthrow new Exception("This is never OK");<br>\
	\t}\
	</code>
	

throwInFinally.throw.description = \
	Throw statement in a finally block
throwInFinally.throw.explanation = \
	Throw statements should not appear in finally blocks because the semantics \
	are too difficult to understand.

	throwInFinally.throw.delete.name = Delete the throw
	throwInFinally.throw.delete.description = \
		Delete the throw statement.

################################################################################

thrownExceptions.name = Thrown Exceptions
thrownExceptions.longName = \
	Always throw the most specific exception possible
thrownExceptions.description = \
	<b>Summary</b>\
	<br/>\
	Some exceptions should not be thrown.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds throw statements that throw an exception class that \
	is disallowed. The list initially includes exception classes that are \
	either too general (such as Throwable or Exception), or that are unchecked \
	(Error, RuntimeException, and all subclasses of either).\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule is configured to disallow throwing of instances of Throwable, \
	then the following throw statement would be flagged as a violation:\
	<p><code>\
	\tthrow new Throwable("Bet this won't get caught");\
	</code>

thrownExceptions.disallowed.description = \
	Disallowed exception thrown: {0}
thrownExceptions.disallowed.explanation = \
	The exception {0} should not be thrown. Consider throwing a more specific \
	class of exception (one or more subclasses of {0}).

	thrownExceptions.disallowed.delete.name = Delete throw
	thrownExceptions.disallowed.delete.description = \
		Delete the throw statement.

thrownExceptions.disallowedHierarchy.description = \
	Disallowed exception thrown: {0}
thrownExceptions.disallowedHierarchy.explanation = \
	The exception {0} should not be thrown.

	thrownExceptions.disallowedHierarchy.delete.name = Delete throw
	thrownExceptions.disallowedHierarchy.delete.description = \
		Delete the throw statement.

################################################################################

transientFieldInNonSerializable.name = Transient Field in Non-Serializable Class
transientFieldInNonSerializable.longName = \
	Avoid declaring transient fields in classes that don't extend Serializable
transientFieldInNonSerializable.description = \
	<b>Summary</b>\
	<br/>\
	Classes that do not implement java.io.Serializable should not declare \
	fields as transient.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for declarations of fields that are \
	transient in classes that do not implement the interface \
	java.io.Serializable.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following field would be flagged as a violation:\
	<p><code>\
	\tclass NonSerializable<br>\
	\t{<br>\
	\t\tprivate transient int value;<br>\
	\t}\
	</code>

transientFieldInNonSerializable.transientFound.description = \
	Transient field "{0}" found in a non-serializable class "{1}"
transientFieldInNonSerializable.transientFound.explanation = \
	Non-serializable classes should not have fields declared with \
	the modifier "transient".

	transientFieldInNonSerializable.transientFound.makeSerializable.name = Make Serializable
	transientFieldInNonSerializable.transientFound.makeSerializable.description = \
		Make the type implement Serializable.

	transientFieldInNonSerializable.transientFound.removeTransientKeyword.name = Remove "transient"
	transientFieldInNonSerializable.transientFound.removeTransientKeyword.description = \
		Remove the "transient" modifier.

################################################################################

typeDeclaration.name = Type Declarations
typeDeclaration.longName = \
	Place the primary type first in a file, followed by public types
typeDeclaration.description = \
	<b>Summary</b>\
	<br/>\
	Verification that type declarations follow a specified style of coding.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds source in which type declarations \
	do not follow a specified style of coding. One example is that \
	the first type declaration in a file should be a one with a name \
	matching that of the file if such a type is defined in the file.

typeDeclaration.publicTypesBeforeOthers.description = \
	Public type should be declared before any non public types: {0}
typeDeclaration.publicTypesBeforeOthers.explanation = \
	The public type {0} should be declared before any non public types.

	typeDeclaration.publicTypesBeforeOthers.recommendation.name = Recommendation...
	typeDeclaration.publicTypesBeforeOthers.recommendation.description = \
		Move the type declaration before any non public types.

typeDeclaration.primaryTypeFirst.description = \
	Primary type should be declared first: {0}
typeDeclaration.primaryTypeFirst.explanation = \
	The public type {0} should be declared first in the file \
	because its name matches the name of the file in which it is defined.

	typeDeclaration.primaryTypeFirst.recommendation.name = Recommendation...
	typeDeclaration.primaryTypeFirst.recommendation.description = \
		Make the type declaration the first in the file.

################################################################################

typeDepth.name = Type Depth
typeDepth.longName = \
	Extract deeply nested types
typeDepth.description = \
	<b>Summary</b>\
	<br/>\
	Types should not be deeply nested.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds source in which type declarations are deeply nested. \
	The maximum depth can be configured. Top level types have a depth of zero \
	(0), so a maximum depth of 2 would mean, for example, that an inner class \
	of a top-level class could have an anonymous inner class without being \
	flagged, but a third level of nesting would be flagged.

typeDepth.anonymous.description = \
	Deeply nested anonymous class
typeDepth.anonymous.explanation = \
	An anonymous class was found {0} levels deep, when they should be no more \
	than {1} levels deep.

	typeDepth.anonymous.recommendation.name = Recommendation...
	typeDepth.anonymous.recommendation.description = \
		Refactor either this type or one of its outer types to make it a \
		top-level type.

typeDepth.named.description = \
	Deeply nested type
typeDepth.named.explanation = \
	An inner type was found {0} levels deep, when they should be no more \
	than {1} levels deep.

	typeDepth.named.recommendation.name = Recommendation...
	typeDepth.named.recommendation.description = \
		Refactor either this type or one of its outer types to make it a \
		top-level type.

################################################################################

typeJavadoc.name = Type Javadoc Conventions
typeJavadoc.longName = \
	All types should have a correct Javadoc comment
typeJavadoc.description = \
	<b>Summary</b>\
	<br/>\
	All types should have a Javadoc comment associated with them.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for the existence of a Javadoc comment for each \
	type. It optionally checks for the existence of at least one @author tag \
	and always ensures that every author tag has some text following it. It \
	also optionally checks for the existence of at least one @version tag and \
	always ensures that every version tag has some text following it.

typeJavadoc.missing.description = \
	Missing Javadoc comment for type {0}
typeJavadoc.missing.explanation = \
	The type "{0}" should have a Javadoc comment.

	typeJavadoc.missing.repair.name = Add missing type Javadoc
	typeJavadoc.missing.repair.description = \
		Run the Javadoc Repair tool on this type to add missing type Javadoc.

typeJavadoc.emptyAuthor.description = \
	Empty @author tag for type {0}
typeJavadoc.emptyAuthor.explanation = \
	The @author tag is expected to have a value consisting of the name of the \
	person that has made contributions to the type.

	typeJavadoc.emptyAuthor.repair.name = Correct the @author tag
	typeJavadoc.emptyAuthor.repair.description = \
		Run the Javadoc Repair tool on this type to correct the @author tag.

typeJavadoc.emptyVersion.description = \
	Empty @version tag for type {0}
typeJavadoc.emptyVersion.explanation = \
	The @version tag is expected to have a value consisting of the version \
	number for the type.

	typeJavadoc.emptyVersion.repair.name = Correct the @version tag
	typeJavadoc.emptyVersion.repair.description = \
		Run the Javadoc Repair tool on this type to correct the @version tag.

typeJavadoc.extraVersion.description = \
	Extra @version tag for type {0}
typeJavadoc.extraVersion.explanation = \
	Each type''s Javadoc should have at most one @version tag.

	typeJavadoc.extraVersion.repair.name = Remove the extra @version tag
	typeJavadoc.extraVersion.repair.description = \
		Run the Javadoc Repair tool on this type to remove the extra @version \
		tag.

typeJavadoc.missingAuthor.description = \
	Missing @author tag for type {0}
typeJavadoc.missingAuthor.explanation = \
	The Javadoc for the type {0} should contain at least one @author tag.

	typeJavadoc.missingAuthor.repair.name = Add the missing @author tag
	typeJavadoc.missingAuthor.repair.description = \
		Run the Javadoc Repair tool on this type to add the missing @author tag.

typeJavadoc.missingVersion.description = \
	Missing @version tag for type {0}
typeJavadoc.missingVersion.explanation = \
	The Javadoc for the type {0} should contain a @version tag.

	typeJavadoc.missingVersion.repair.name = Add the missing @version tag
	typeJavadoc.missingVersion.repair.description = \
		Run the Javadoc Repair tool on this type to add the missing @version tag.

typeJavadoc.duplicateDeprecated.description = \
	Duplicated @deprecated tag in Javadoc comment for type
typeJavadoc.duplicateDeprecated.explanation = \
	The type should have at most one @deprecated tag in its Javadoc comment.

	typeJavadoc.duplicateDeprecated.repair.name = Remove duplicate tag
	typeJavadoc.duplicateDeprecated.repair.description = \
		Run the Javadoc Repair tool on this type to remove the duplicate tag.

typeJavadoc.emptyDeprecated.description = \
	Empty @deprecated tag in Javadoc comment for type
typeJavadoc.emptyDeprecated.explanation = \
	The @deprecated tag should have text describing when the type was \
	deprecated and what to use in its place.

	typeJavadoc.emptyDeprecated.repair.name = Add description
	typeJavadoc.emptyDeprecated.repair.description = \
		Run the Javadoc Repair tool on this type to add text to the \
		@deprecated tag.

typeJavadoc.emptyParamTag.description = \
	Empty @param tag in {0}
typeJavadoc.emptyParamTag.explanation = \
	The @param tag is expected to have a value consisting of the name of the \
	type parameter and a description of how the type is used.

#	typeJavadoc.emptyParamTag.repair.name = Correct the @param tag
#	typeJavadoc.emptyParamTag.repair.description = \
#		Run the Javadoc Repair tool on this type to correct the @param tag.

	typeJavadoc.emptyParamTag.recommendation.name = Recommendation...
	typeJavadoc.emptyParamTag.recommendation.description = \
		Add text specifying the name of the type parameter and its use.

typeJavadoc.extraParamTag.description = \
	Extra @param tag for {0} in {1}
typeJavadoc.extraParamTag.explanation = \
	There is a @param tag for the parameter {0}, but there is no type parameter \
	with that name. Check to see whether the parameter might have been removed \
	or whether it was renamed but the Javadoc not updated.

#	typeJavadoc.extraParamTag.repair.name = Remove the extra @param tag
#	typeJavadoc.extraParamTag.repair.description = \
#		Run the Javadoc Repair tool on this type to remove the extra @param \
#		tag.

	typeJavadoc.extraParamTag.recommendation.name = Recommendation...
	typeJavadoc.extraParamTag.recommendation.description = \
		Remove this @param tag.

typeJavadoc.missingParamTag.description = \
	Missing @param tag for {0} in {1}
typeJavadoc.missingParamTag.explanation = \
	This type declares the type parameter {0}, but there is no @param tag for \
	it. Add a @param tag for the parameter.

#	typeJavadoc.missingParamTag.repair.name = Add the missing @param tag
#	typeJavadoc.missingParamTag.repair.description = \
#		Run the Javadoc Repair tool on this type to add the missing @param tag.

	typeJavadoc.missingParamTag.recommendation.name = Recommendation...
	typeJavadoc.missingParamTag.recommendation.description = \
		Add a @param tag for the type parameter

typeJavadoc.unknown.description = \
	Unknown tag in Javadoc comment for type
typeJavadoc.unknown.explanation = \
	Only the standard tags should be included in Javadoc comments.

	typeJavadoc.unknown.repair.name = Remove unknown tag
	typeJavadoc.unknown.repair.description = \
		Run the Javadoc Repair tool on this method to remove the unknown tag.

################################################################################

typeMemberOrdering.name = Type Member Ordering
typeMemberOrdering.longName = \
	Order the members of a type in the specified order
typeMemberOrdering.description = \
	<b>Summary</b>\
	<br/>\
	Verification that type members follow a specified order.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule is used to check the order of members within a type. \
	Simple rules include checking that main() is last and that members with a \
	common name are grouped together. More complex orderings are specified \
	with the Global Ordering check box. When the global ordering check box is \
	checked you can choose one of the orderings from the list:\
	<p>\
	Alphabetical - all members should be arranged alphabetically by name with \
	no regard for member type or modifiers. Initializers have no names and can \
	appear anywhere.\
	<p>\
	Fields First - members should appear in the order: fields, initializers, \
	constructors, methods, inner types. Within those groups they should be \
	arranged alphabetically.\
	<p>\
	Constructors First - members should appear in the order: constructors, \
	fields, initializers, methods, inner types. Within those groups they \
	should be arranged alphabetically.\
	<p>\
	Public to Private - members should appear in the modifier order: public, \
	protected, private. Within those groups they should be arranged \
	alphabetically.\
	<p>\
	Private to Public - members should appear in the order: private, \
	protected, public. Within those groups they should be arranged \
	alphabetically.\
	<p>\
	The above choices are followed by combinations. "Fields First/Public to \
	Private", for example, means that members should be arranged in Fields \
	First order, be arranged in Public to Private order within those groups, \
	then alphabetically. The other combinations follow suit.

typeMemberOrdering.mainShouldBeLast.description = \
	The static function main(String[]) should be declared last
typeMemberOrdering.mainShouldBeLast.explanation = \
	According to your type member ordering rules \
	the static function main(String[]) should be the last type member declared.

	typeMemberOrdering.mainShouldBeLast.recommendation.name = Recommendation...
	typeMemberOrdering.mainShouldBeLast.recommendation.description = \
		Make the "main" method the last member in the file.

typeMemberOrdering.groupMembersByName.description = \
	Members should be grouped by name
typeMemberOrdering.groupMembersByName.explanation = \
	According to your type member ordering rules \
	all members that have the same name should be contiguous.

	typeMemberOrdering.groupMembersByName.recommendation.name = Recommendation...
	typeMemberOrdering.groupMembersByName.recommendation.description = \
		Group all members of the same name together.

typeMemberOrdering.orderAllMembers.description = \
	{0} is out of {1} order
typeMemberOrdering.orderAllMembers.explanation = \
	According to the {2} rule, type member {0} needs to be \
	in {1} order with the preceding and following member. \
	It is not.

	typeMemberOrdering.orderAllMembers.recommendation.name = Recommendation...
	typeMemberOrdering.orderAllMembers.recommendation.description = \
		Put the member in the proper order.

################################################################################

typeNamesMustBeSingular.name = Type Names Must Be Singular
typeNamesMustBeSingular.longName = \
	Type names must be singular
typeNamesMustBeSingular.description = \
	<b>Summary</b>\
	<br/>\
	Type names must be singular.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for types whose name is plural.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following class declaration would be flagged because the name is \
	plural:\
	<p><code>\
	\tpublic class Employees<br>\
	\t{<br>\
	\t\t...<br>\
	\t}\
	</code>

typeNamesMustBeSingular.plural.description = \
	Plural type name
typeNamesMustBeSingular.plural.explanation = \
	The type name {0} appears to be plural, but type names should be singular.

	typeNamesMustBeSingular.plural.rename.name = Rename...
	typeNamesMustBeSingular.plural.rename.description = \
		Rename the type to have a singular name.

################################################################################

typeParameterNamingConvention.name = Type Parameter Naming Convention
typeParameterNamingConvention.longName = \
	Use the standard naming convention for type parameters
typeParameterNamingConvention.description = \
	<b>Summary</b>\
	<br/>\
	Type parameter names should conform to the defined standard.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks the names of all type parameters.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the rule were configured to require that all type parameter names \
	start with a capital letter, the following declaration would be flagged as \
	a violation:\
	<p><code>\
	\tpublic class BetterCollection&lt;elementType&gt; ...\
	</code>

typeParameterNamingConvention.invalidName.description = \
	Invalid parameter name name: "{0}" {1}
typeParameterNamingConvention.invalidName.explanation = \
	The parameter name name "{0}" does not conform because it {1}.

	typeParameterNamingConvention.invalidName.rename.name = Rename parameter name to "{1}"
	typeParameterNamingConvention.invalidName.rename.description = \
		Rename the parameter name from "{0}" to "{1}".

################################################################################

unassignedField.name = Unassigned Field
unassignedField.longName = Private fields should be assigned a value
unassignedField.description = \
	<b>Summary</b>\
	<br/>\
	Private fields should be assigned a value.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for private fields that are never assigned a value.

unassignedField.unassignedField.description = \
	Private fields should be assigned a value
unassignedField.unassignedField.explanation = \
	The field {0} is never assigned.

	unassignedField.unassignedField.recommendation.name = Recommendation...
	unassignedField.unassignedField.recommendation.description = \
		Remove the field definition.

################################################################################

undefinedProperty.name = Undefined Property
undefinedProperty.longName = \
	Properties referenced in a plugin.xml file need to be defined
undefinedProperty.description = \
	<b>Summary</b>\
	<br/>\
	Properties referenced in a plugin.xml file need to be defined in the \
	corresponding plugin.properties file.\
	<p>\
	<b>Description</b>\
	<br/>\
	The plugin.xml file can be internationalized by using properties names \
	(names prefixed by a percent sign (%)) anywhere a value is expected This \
	rule checks to see that all referenced properties are defined in the \
	corresponding plugin.properties file.

undefinedProperty.undefined.description = \
	The property {0} is not defined in the plugin.properties file
undefinedProperty.undefined.explanation = \
	The property {0} is not defined in the plugin.properties file.

	undefinedProperty.undefined.recommendation.name = Recommendation...
	undefinedProperty.undefined.recommendation.description = \
		Add a definition of the property to the plugin.properties file.

################################################################################

unhashableClassInHashedCollection.name = Unhashable class in hashed collection
unhashableClassInHashedCollection.longName = \
	An unhashable class is put into a hashed collection.
unhashableClassInHashedCollection.description = \
	<b>Summary</b>\
	<br/>\
	In order to be stored in a hashed collection, a class must override both \
	the <code>equals()</code> method, and the <code>hashCode()</code>, or \
	else it must not override either.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds places where a type that only overrides one of \
	<code>equals()</code> or <code>hashCode()</code> is used in a hashed \
	collection.
	
# {0} the name of type being stored in the collection.
# {1} the type of the collection it is used in (unescaped)
# {2} the type of the collection it is used in (escaped angle brackets)
unhashableClassInHashedCollection.found.description = \
	Unhashable type used in {1}.
unhashableClassInHashedCollection.found.explanation = \
	The type <code>{0}</code> does not override both <code>equals()</code> and <code>hashCode()</code>.\
	This can cause erratic behavior when it is used in a hashed collection, such as \
	<code>{2}</code>.

	unhashableClassInHashedCollection.found.recommendation.name = Recommendation...
	unhashableClassInHashedCollection.found.recommendation.description = \
		Either fix the type <code>{0}</code>, or use an unhashed collection.

################################################################################

unnecessaryCast.name = Unnecessary Type Cast
unnecessaryCast.longName = \
	Remove unnecessary type casts
unnecessaryCast.description = \
	<b>Summary</b>\
	<br/>\
	Unnecessary type casts should be removed.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for places where a value is being cast to another \
	type and the type cast is not necessary. This includes the following cases:<br>\
	- casting from one type to the same type,<br>\
	- casting from one type to a supertype of that type,<br>\
	- casting to a more specific type when the result will be assigned to a \
	variable of the same type, or<br>\
	- casting immediately prior to using the instanceof operator to test the \
	type.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following cast would be flagged because the type of the literal is \
	already int:\
	<p><code>\
	\tint i = (int) 0;\
	</code><p>\
	The following cast would be flagged because the variable list can be \
	assigned to the variable collection without the cast:\
	<p><code>\
	\tList list = new ArrayList();<br>\
	\tCollection collection = (ArrayList) list;\
	</code>

unnecessaryCast.same.description = \
	Unnecessary type cast to {0}
unnecessaryCast.same.explanation = \
	The type cast is unnecessary because the expression is already of \
	type {0}.

	unnecessaryCast.same.delete.name = Delete the cast
	unnecessaryCast.same.delete.description = \
		Delete the unnecessary cast.

unnecessaryCast.class.description = \
	Unnecessary type cast from {0} to {1}
unnecessaryCast.class.explanation = \
	The type cast is unnecessary because the expression is of type {0} \
	which inherits from {1}. Casting to a supertype is not necessary.

	unnecessaryCast.class.delete.name = Delete the cast
	unnecessaryCast.class.delete.description = \
		Delete the unnecessary cast.

unnecessaryCast.array.description = \
	Unnecessary type cast from {0} to {1}
unnecessaryCast.array.explanation = \
	The type cast is unnecessary because the expression is of type {0} \
	and {2} inherits from {3}. Casting to a supertype is not necessary.

	unnecessaryCast.array.delete.name = Delete the cast
	unnecessaryCast.array.delete.description = \
		Delete the unnecessary cast.

unnecessaryCast.beforeAssignment.same.description = \
	Unnecessary type cast from {0} to {1}
unnecessaryCast.beforeAssignment.same.explanation = \
	The type cast is unnecessary because the expression has the same type as \
	the variable to which it is being assigned.

	unnecessaryCast.beforeAssignment.same.delete.name = Delete the cast
	unnecessaryCast.beforeAssignment.same.delete.description = \
		Delete the unnecessary cast.

unnecessaryCast.beforeAssignment.superclass.description = \
	Unnecessary type cast from {0} to {1}
unnecessaryCast.beforeAssignment.superclass.explanation = \
	The type cast is unnecessary because the expression is being assigned to a \
	variable of type {2} and {0} inherits from {2}.

	unnecessaryCast.beforeAssignment.superclass.delete.name = Delete the cast
	unnecessaryCast.beforeAssignment.superclass.delete.description = \
		Delete the unnecessary cast.

unnecessaryCast.beforeInstanceOf.description = \
	Unnecessary type cast to {0}
unnecessaryCast.beforeInstanceOf.explanation = \
	The type cast is unnecessary because it will not change the value of the \
	instanceof operator.

	unnecessaryCast.beforeInstanceOf.delete.name = Delete the cast
	unnecessaryCast.beforeInstanceOf.delete.description = \
		Delete the unnecessary cast.

################################################################################

unnecessaryCatchBlock.name = Unnecessary Catch Block
unnecessaryCatchBlock.longName = \
	Do not include unnecessary catch blocks
unnecessaryCatchBlock.description = \
	<b>Summary</b>\
	<br/>\
	Catch blocks should do more than rethrow the exception.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for catch blocks whose body consists only of a throw \
	of the exception that was just caught. Unless there is another catch block \
	in the same try statement that catches a superclass of the exception's \
	class, such catch blocks only serve to clutter the code.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following catch clause would be flagged as a violation:\
	<p><code>\
	\ttry {<br>\
	\t\t...<br>\
	\t} catch (NullPointerException exception) {<br>\
	\t\tthrow exception;<br>\
	\t}\
	</code>

unnecessaryCatchBlock.blockFound.description = \
	Unnecessary catch block found
unnecessaryCatchBlock.blockFound.explanation = \
	An unnecessary catch block was found, rethrowing an exception just after catching it \
	serves no purpose.

	unnecessaryCatchBlock.blockFound.textReplacement.name = Remove catch block
	unnecessaryCatchBlock.blockFound.textReplacement.description = \
		Delete this catch block if there are multiple catches in the try statement, or \
		remove the try-catch logic, if it the only catch in the try-catch statement.

################################################################################

unnecessaryDefaultConstructor.name = Unnecessary Default Constructor
unnecessaryDefaultConstructor.longName = \
	Do not include unnecessary constructor
unnecessaryDefaultConstructor.description = \
	<b>Summary</b>\
	<br/>\
	Default constructors should not be declared unless necessary.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for declarations of default (zero-argument) constructors \
	in classes with no other constructors, whose body is either empty or contains \
	only an invocation of the superclass' default constructor.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following constructor would be flagged as a violation:\
	<p><code>\
	\tpublic UnnecessaryConstructor() {<br>\
	\t\tsuper();<br>\
	\t}\
	</code>

unnecessaryDefaultConstructor.defaultFound.description = \
	Unnecessary constructor found
unnecessaryDefaultConstructor.defaultFound.explanation = \
	The default super constructor was found within a constructor of \
	a subclass, such a call should be removed as it is automatically \
	included by the compiler.

	unnecessaryDefaultConstructor.defaultFound.removeConstructor.name = Remove default constructor
	unnecessaryDefaultConstructor.defaultFound.removeConstructor.description = \
		Since this constructor is included automatically by the compiler, it should be removed.

################################################################################

unnecessaryExceptions.name = Unnecessary Exceptions
unnecessaryExceptions.longName = \
	Remove unnecessary exceptions in method declarations
unnecessaryExceptions.description = \
	<b>Summary</b>\
	<br/>\
	Unnecessary exceptions should be removed.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for methods that declare an exception that cannot \
	be thrown within the body of the method.\
	<p>\
	There are two options. The first controls whether unchecked exceptions \
	will be allowed to be declared. This is sometimes desirable to allow the \
	full range of exceptions to be fully documented.\
	<p>\
	The second option controls whether a class of exception can be declared \
	when a subclass of the exception class is thrown, or whether only the \
	classes of exceptions that are actually thrown can be declared.\
	<p>\
	Note: this rule does not examine the implementations of a method \
	that occur in subclasses to see whether an exception is being declared in \
	a superclass in order to allow it to be thrown by a method in a subclass.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following throws clause would be flagged as a violation because there \
	is no way for the exception to be thrown:\
	<p><code>\
	\tpublic int getChildCount()<br>\
	\t\tthrows RemoteException<br>\
	\t{<br>\
	\t\treturn 0;<br>\
	\t}\
	</code>

unnecessaryExceptions.notThrown.description = \
	Unnecessary declaration of {0}
unnecessaryExceptions.notThrown.explanation = \
	The exception {0} does not need to be declared because it cannot be thrown \
	from the method.

	unnecessaryExceptions.notThrown.delete.name = Delete the exception
	unnecessaryExceptions.notThrown.delete.description = \
		Delete the unnecessary exception.

################################################################################

unnecessaryFinalMethod.name = Unnecessary Final Method
unnecessaryFinalMethod.longName = \
	Don't declare final methods in a final class
unnecessaryFinalMethod.description = \
	<b>Summary</b>\
	<br/>\
	Methods in a final class should not be declared as final.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for methods that are declared as being final that \
	are defined in a class that is also declared as final. It is not necessary \
	to declare the method to also be final because no subclass of the class \
	could ever be defined.\
	<p>\
	<b>Example</b>\
	<br/>\
	The "final" modifier on the following method would be flagged as a \
	violation because the class is also marked as being final"\
	<p><code>\
	\tpublic final class Point<br>\
	\t{<br>\
	\t\tpublic final int getX()<br>\
	\t\t{<br>\
	\t\t\t...<br>\
	\t\t}<br>\
	\t}\
	</code>

unnecessaryFinalMethod.unnecessary.description = \
	Method unnecessarily declared as final: {0}
unnecessaryFinalMethod.unnecessary.explanation = \
	The method {0} does not need to be declared as final because it is already \
	effectively final as a result of being defined in a class that is also \
	declared as final.

	unnecessaryFinalMethod.unnecessary.delete.name = Remove modifier
	unnecessaryFinalMethod.unnecessary.delete.description = \
		Remove the modifier that makes this method final.

################################################################################

unnecessaryImport.name = Unnecessary Import Declarations
unnecessaryImport.longName = \
	Remove imports that are not necessary
unnecessaryImport.description = \
	<b>Summary</b>\
	<br/>\
	There should not be imports for types or packages that are not referenced.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks to ensure that each of the import declarations is \
	actually necessary. A type import is considered necessary if the type that \
	is imported by it is referenced within the compilation unit. A demand \
	import is considered necessary if there is at least one type within the \
	specified package that is referenced that is not also imported by a type \
	import.\
	<p>\
	In neither case does this rule consider whether the reference to the type \
	is fully qualified, only that the type is being referenced.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following import statement would be flagged as a violation because the \
	package is always implicitly imported:\
	<p><code>\
	\timport java.lang.*;\
	</code>

unnecessaryImport.demand.description = \
	Unnecessary import: {0}
unnecessaryImport.demand.explanation = \
	None of the types in the imported package are used in this compilation unit.

	unnecessaryImport.demand.delete.name = Delete import
	unnecessaryImport.demand.delete.description = \
		Delete the import.

unnecessaryImport.static.description = \
	Unnecessary import: {0}
unnecessaryImport.static.explanation = \
	The imported member is not used in this compilation unit.

	unnecessaryImport.static.delete.name = Delete import
	unnecessaryImport.static.delete.description = \
		Delete the import.

unnecessaryImport.staticDemand.description = \
	Unnecessary import: {0}
unnecessaryImport.staticDemand.explanation = \
	None of the members in the imported type are used in this compilation unit.

	unnecessaryImport.staticDemand.delete.name = Delete import
	unnecessaryImport.staticDemand.delete.description = \
		Delete the import.

unnecessaryImport.type.description = \
	Unnecessary import: {0}
unnecessaryImport.type.explanation = \
	The imported type is not used in this compilation unit.

	unnecessaryImport.type.delete.name = Delete import
	unnecessaryImport.type.delete.description = \
		Delete the import.

################################################################################

unnecessaryInstanceof.name = Unnecessary "instanceof" Test
unnecessaryInstanceof.longName = \
	Remove unnecessary instanceof tests
unnecessaryInstanceof.description = \
	<b>Summary</b>\
	<br/>\
	Unnecessary instanceof tests should be removed.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for unnecessary uses of "instanceof". \
	An "instanceof" test against a superclass or superinterface of the \
	static type of an object is unnecessary and should be removed.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\t"this is a string" instanceof String;\
	</code>

unnecessaryInstanceof.same.description = \
	Unnecessary instanceof test comparing to {0}
unnecessaryInstanceof.same.explanation = \
	The "instanceof" test is unnecessary because the expression is already of \
	type {0}. Testing for the current type is not necessary.

	unnecessaryInstanceof.same.recommendation.name = Recommendation...
	unnecessaryInstanceof.same.recommendation.description = \
		Remove the "instanceof" test.

unnecessaryInstanceof.class.description = \
	Unnecessary instanceof test comparing {0} to {1}
unnecessaryInstanceof.class.explanation = \
	The "instanceof" test is unnecessary because the expression is of type {0} \
	which inherits from {1}. Testing for a superclass or superinterface is not \
	necessary.

	unnecessaryInstanceof.class.recommendation.name = Recommendation...
	unnecessaryInstanceof.class.recommendation.description = \
		Remove the "instanceof" test.

unnecessaryInstanceof.array.description = \
	Unnecessary instanceof test comparing {0} to {1}
unnecessaryInstanceof.array.explanation = \
	The "instanceof" test is unnecessary because the expression is of type {0} \
	and {2} inherits from {3}. Testing for a superclass or superinterface is \
	not necessary.

	unnecessaryInstanceof.array.recommendation.name = Recommendation...
	unnecessaryInstanceof.array.recommendation.description = \
		Remove the "instanceof" test.

################################################################################

unnecessaryNegation.name = Unnecessary Negation
unnecessaryNegation.longName = \
	The use of the negation operator should be minimized
unnecessaryNegation.description = \
	<b>Summary</b>\
	<br/>\
	The use of the negation operator should be minimized.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for if statements with both then and else clauses whose \
	condition is negated. The negation operator can be removed by reversing the \
	then and else clauses.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tif (!student.passed()) {<br>\
	\t\tfailedCount++;<br>\
	\t} else {<br>\
	\t\tpassedCount++;<br>\
	\t}\
	</code>

unnecessaryNegation.unnecessary.description = \
	Unnecessary negation
unnecessaryNegation.unnecessary.explanation = \
	The use of the negation operator should be minimized.

	unnecessaryNegation.unnecessary.recommendation.name = Recommendation...
	unnecessaryNegation.unnecessary.recommendation.description = \
		The negation operator should be removed by reversing the then and else clauses.

################################################################################

unnecessaryNullCheck.name = Unnecessary Null Check
unnecessaryNullCheck.longName = \
	Don't check for null unnecessarily
unnecessaryNullCheck.description = \
	<b>Summary</b>\
	<br/>\
	A variable is being checked against null when it is not necessary.\
	<p>\
	<b>Description</b>\
	<br/>\
	This rule identifies places where an object-valued variable is being \
	compared to null when the comparison is unnecessary because of preceding \
	code.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following comparison would be flagged as a violation:\
	<p><code>\
	\tairplane.prepareForTakeOff();<br>\
	\tif (airplane != null) ...\
	</code>

unnecessaryNullCheck.cannotBeNull.description = \
	Unnecessary check: cannot be null
unnecessaryNullCheck.cannotBeNull.explanation = \
	The variable "{0}" cannot be null in this context, so the check is unnecessary.

	unnecessaryNullCheck.cannotBeNull.recommendation.name = Recommendation...
	unnecessaryNullCheck.cannotBeNull.recommendation.description = \
		Remove the test.

unnecessaryNullCheck.canOnlyBeNull.description = \
	Unnecessary check: can only be null
unnecessaryNullCheck.canOnlyBeNull.explanation = \
	The variable "{0}" can only be null in this context, so the check is unnecessary.

	unnecessaryNullCheck.canOnlyBeNull.recommendation.name = Recommendation...
	unnecessaryNullCheck.canOnlyBeNull.recommendation.description = \
		Remove the test.

################################################################################

unnecessaryReturn.name = Unnecessary Return
unnecessaryReturn.longName = \
	Remove return statements appearing at the end of void methods
unnecessaryReturn.description = \
	<b>Summary</b>\
	<br/>\
	Methods that do not return a value should not end with a return.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds methods that are declared to not return a value \
	(void) but whose last statement is a return statement.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tpublic void markChanged()<br>\
	\t{<br>\
	\t\tchanged = true;<br>\
	\t\treturn;<br>\
	\t}\
	</code>

unnecessaryReturn.unnecessary.description = \
	Unnecessary return
unnecessaryReturn.unnecessary.explanation = \
	Methods that do not return a value should not contain a final return.

	unnecessaryReturn.unnecessary.recommendation.name = Recommendation...
	unnecessaryReturn.unnecessary.recommendation.description = \
		Remove the return statement or change the method so that it returns a \
		value.

################################################################################

unnecessaryReturnStatementParentheses.name = Unnecessary Return Statement Parentheses
unnecessaryReturnStatementParentheses.longName = \
	Remove parentheses from around the expression in a return statement
unnecessaryReturnStatementParentheses.description = \
	<b>Summary</b>\
	<br/>\
	The expression in a return statement should not be parenthesized.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for return statements where the expression that \
	computes the value to be returned is enclosed in parentheses. They are \
	unnecessary and typically make the code harder to read and maintain.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following return statement's expression would be flagged as a \
	violation because the parentheses are not necessary:\
	<p><code>\
	\treturn (x * x);\
	</code>

unnecessaryReturnStatementParentheses.unnecessary.description = \
	Unnecessary parentheses around the expression in a return statement
unnecessaryReturnStatementParentheses.unnecessary.explanation = \
	Placing unnecessary parentheses around the expression that computes the \
	returned value decreases the readability of the code.

	unnecessaryReturnStatementParentheses.unnecessary.delete.name = Delete the parentheses
	unnecessaryReturnStatementParentheses.unnecessary.delete.description = \
		Delete the unnecessary parentheses.

################################################################################

unnecessaryToString.name = Unnecessary toString() Method Invocation
unnecessaryToString.longName = \
	Remove unnecessary invocations of toString()
unnecessaryToString.description = \
	<b>Summary</b>\
	<br/>\
	Remove unnecessary invocations of toString().\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule flags instances of toString() that are called on String \
	objects. Removing such invocations does not affect the program logic and \
	can reduce timing.\
	<p>\
	<b>Example</b>\
	<br/>\
	The invocation of toString() below would be flagged as it can be removed.\
	<p><code>\
	\tString string = ...;<br>\
	\tSystem.out.println(string.toString());\
	</code>

unnecessaryToString.toStringInvoked.description = \
	toString() called on a String object
unnecessaryToString.toStringInvoked.explanation = \
	Removing unnecessary invocations to toString() does not change program \
	logic and can reduce timing of the program.

	unnecessaryToString.toStringInvoked.delete.name = Delete toString()
	unnecessaryToString.toStringInvoked.delete.description = \
		Delete the call to toString().

################################################################################

unnecessaryOverride.name = Unnecessary Override
unnecessaryOverride.longName = \
	Remove methods that only invoke the overriddden method
unnecessaryOverride.description = \
	<b>Summary</b>\
	<br/>\
	Methods that override other methods should do more than invoke the overridden method.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for methods whose body consists only of an invocation of the \
	overridden method with the same argument values. Such methods can safely be removed.\
	<br>\
	<br>\
	<b>Example</b>\
	<br/>\
	The following method would be flagged as a violation because it \
	only invokes the method it overrides:\
	<p><code>\
	\tpublic void clear() {<br>\
	\t\tsuper.clear();<br>\
	\t}\
	</code>

unnecessaryOverride.unused.description = \
	Unnecessary Override: {0}
unnecessaryOverride.unused.explanation = \
	The method "{0}" should do more than invoke the overridden method.

	unnecessaryOverride.unused.delete.name = Delete Method
	unnecessaryOverride.unused.delete.description = \
		Delete the unused method.

################################################################################

unsupportedClone.name = Unsupported Clone
unsupportedClone.longName = Don't invoke clone() when it isn't supported
unsupportedClone.description = \
	<b>Summary</b>\
	<br/>\
	Find invocations of clone() that will throw an exception.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for invocations of the clone() method on objects \
	that do not either implement the Cloneable interface or override the \
	default implementation of clone() in Object.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following invocation would be flagged as being a violation if the \
	object is not Cloneable:\
	<p><code>\
	\tobject.clone();\
	</code>

unsupportedClone.notCloneable.description = \
	The object is not Cloneable
unsupportedClone.notCloneable.explanation = \
	An exception will be thrown at runtime because the object does not \
	implement Cloneable.

	unsupportedClone.notCloneable.recommendation.name = Recommendation...
	unsupportedClone.notCloneable.recommendation.description = \
		Ensure the runtime type of the expression implements Cloneable.

unsupportedClone.noCloneMethod.description = \
	The object does not implement clone()
unsupportedClone.noCloneMethod.explanation = \
	An exception will be thrown at runtime because the object does not \
	override the default definition of clone().

	unsupportedClone.noCloneMethod.recommendation.name = Recommendation...
	unsupportedClone.noCloneMethod.recommendation.description = \
		Ensure the clone() method is defined in the runtime type of the \
		expression.

################################################################################

unusedField.name = Unused Field
unusedField.longName = \
	Remove unused fields
unusedField.description = \
	<b>Summary</b>\
	<br/>\
	Fields that are not used should be removed.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for any private instance fields that are not \
	referenced within their declaring class.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following field would be flagged as a violation if it is not used \
	within its declaring class:\
	<p><code>\
	\tprivate int unused;\
	</code>

unusedField.unused.description = \
	Unused field: {0}
unusedField.unused.explanation = \
	The field "{0}" is not used within its declaring class.

	unusedField.unused.delete.name = Delete field
	unusedField.unused.delete.description = \
		Delete the unused field.

################################################################################

unusedLabel.name = Unused Label
unusedLabel.longName = \
	Remove unused labels
unusedLabel.description = \
	<b>Summary</b>\
	<br/>\
	Labels that are not used should be removed.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for any labeled statements whose labels are not \
	used in either a break or continue statement within the scope of the \
	labeled statement.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following label would be flagged as a violation because it is not used \
	within the body of the for loop:\
	<p><code>\
	\tint sum = 0;<br>\
	\tsumElements: for (int i = 0; i &lt; array.length; i++) {<br>\
	\t\tsum = sum + array[i];<br>\
	\t}\
	</code>

unusedLabel.unused.description = \
	Unused label: {0}
unusedLabel.unused.explanation = \
	The label "{0}" is not used in either a break or continue statement within \
	the scope of the labeled statement.

	unusedLabel.unused.delete.name = Delete label
	unusedLabel.unused.delete.description = \
		Delete the unused label.

################################################################################

unusedMethod.name = Unused Method
unusedMethod.longName = \
	Remove unused methods
unusedMethod.description = \
	<b>Summary</b>\
	<br/>\
	Methods that are not used should be removed.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for any private instance methods that are not \
	referenced within their declaring class.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following method would be flagged as a violation if it is not used \
	within its declaring class:\
	<p><code>\
	\tprivate int unused()<br>\
	\t{<br>\
	\t\t...<br>\
	\t}\
	</code>

unusedMethod.unused.description = \
	Unused method: {0}
unusedMethod.unused.explanation = \
	The method "{0}" is not used within its declaring class.

	unusedMethod.unused.delete.name = Delete Method
	unusedMethod.unused.delete.description = \
		Delete the unused method.

################################################################################

unusedReturnValue.name = Unused Return Value
unusedReturnValue.longName = The value returned from methods should be used
unusedReturnValue.description = \
	<b>Summary</b>\
	<br/>\
	The value returned from methods should be used.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for invocations of methods that return values where \
	the value is ignored. Most methods that return a value either have no \
	side-effect or are using the returned value as an indication of success or \
	failure. In the first case, the invocation should be removed if the value \
	is not needed. In the second case, the status value should be checked.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following method invocation would be flagged as a violation if the \
	method <code>getX</code> returns a value:\
	<p><code>\
	\tpoint.getX();\
	</code>

unusedReturnValue.returnedValueIgnored.description = \
	The value returned by {0} is not used
unusedReturnValue.returnedValueIgnored.explanation = \
	Most methods that return a value either have no side-effects, or are \
	returning a value that should be checked (such as a status code).

	unusedReturnValue.returnedValueIgnored.addToList.name = Ignore this method
	unusedReturnValue.returnedValueIgnored.addToList.description = \
		Ignore invocations of this method by adding it to the rule''s list of \
		ignored methods.

	unusedReturnValue.returnedValueIgnored.recommendation.name = Recommendation...
	unusedReturnValue.returnedValueIgnored.recommendation.description = \
		Remove the method invocation or use its value.

################################################################################

unusedStringBuffer.name = Unused StringBuffer
unusedStringBuffer.longName = \
	The contents of a StringBuffer should be used
unusedStringBuffer.description = \
	<b>Summary</b>\
	<br/>\
	The contents of a StringBuffer should be used.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for any instances of the class StringBuffer whose \
	contents are not retrieved. This usually means that the code to use the \
	contents of the buffer was omitted, but can also indicate that old code \
	is no longer needed and should have been deleted.\
	<br>\
	<b>Example</b>\
	<br/>\
	The StringBuffer declared in the following method would be flagged as a \
	violation:\
	<p><code>\
	\tprivate String toString()<br>\
	\t{<br>\
	\t\tStringBuffer buffer;<br>\
	<br>\
	\t\tbuffer = new StringBuffer();<br>\
	\t\tbuffer.append("Product #");<br>\
	\t\tbuffer.append(getName());<br>\
	\t\treturn getName();<br>\
	\t}\
	</code>

unusedStringBuffer.unused.description = \
	Unused StringBuffer
unusedStringBuffer.unused.explanation = \
	The contents of the StringBuffer are not used.

	unusedStringBuffer.unused.recommendation.name = Recommendation...
	unusedStringBuffer.unused.recommendation.description = \
		Remove the StringBuffer and all references to it.

################################################################################

unusedStringBuilder.name = Unused StringBuilder
unusedStringBuilder.longName = \
	The contents of a StringBuilder should be used
unusedStringBuilder.description = \
	<b>Summary</b>\
	<br/>\
	The contents of a StringBuilder should be used.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for any instances of the class StringBuilder whose \
	contents are not retrieved. This usually means that the code to use the \
	contents of the builder was omitted, but can also indicate that old code \
	is no longer needed and should have been deleted.\
	<br>\
	<b>Example</b>\
	<br/>\
	The StringBuilder declared in the following method would be flagged as a \
	violation:\
	<p><code>\
	\tprivate String toString()<br>\
	\t{<br>\
	\t\tStringBuilder builder;<br>\
	<br>\
	\t\tbuilder = new StringBuilder();<br>\
	\t\tbuilder.append("Product #");<br>\
	\t\tbuilder.append(getName());<br>\
	\t\treturn getName();<br>\
	\t}\
	</code>

unusedStringBuilder.unused.description = \
	Unused StringBuilder
unusedStringBuilder.unused.explanation = \
	The contents of the StringBuilder are not used.

	unusedStringBuilder.unused.recommendation.name = Recommendation...
	unusedStringBuilder.unused.recommendation.description = \
		Remove the StringBuilder and all references to it.

################################################################################

useArraycopyRatherThanALoop.name = Use arraycopy() Rather Than a Loop
useArraycopyRatherThanALoop.longName = \
	The method arraycopy() should be used to copy arrays
useArraycopyRatherThanALoop.description = \
	<b>Summary</b>\
	<br/>\
	The method arraycopy() should be used to copy arrays.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for places where a loop is being used to copy the \
	elements of one array to another array. The method System.arraycopy() \
	is much faster at copying array elements, so it should always be used \
	when possible.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following loop would be flagged because it is only copying the \
	elements of one array to another without performing any computation \
	based on those elements:\
	<p><code>\
	\temployees = new Employee[people.length];<br>\
	\tfor (int i = 0; i &lt; people.length; i++) {<br>\
	\t\temployees[i] = (Employee) people[i];<br>\
	\t}\
	</code>

useArraycopyRatherThanALoop.loop.description = \
	Loop used to copy an array
useArraycopyRatherThanALoop.loop.explanation = \
	A loop is being used to copy the contents of one array to another array.

	useArraycopyRatherThanALoop.loop.recommendation.name = Recommendation...
	useArraycopyRatherThanALoop.loop.recommendation.description = \
		Use the method arraycopy defined in java.lang.System instead.


################################################################################
useAfterAnnotationRatherThanTeardown.name = Use @After Annotation Rather than tearDown()
useAfterAnnotationRatherThanTeardown.longName = \
	Use the @After annotation rather than tearDown() to clean up all the data entities required in running tests
useAfterAnnotationRatherThanTeardown.description = \
	<b>Summary</b>\
	<br/>\
	Use the @After annotation rather than tearDown() to clean up all the data \
	entities required in running tests.\
	<p>\
	<b>Description</b>\
	<br/>\
	In JUnit 3, the tearDown method was used to clean up all data entities \
	required in running tests. JUnit 4 skips the tearDown method and executes \
	all methods annotated with @After after running each test.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following test case would be flagged as a violation because \
	it uses tearDown() rather than @After for clean up activities:\
	<p><code>\
	\tpublic class MyTest extends TestCase {<br>\
	\t\tpublic void tearDown(){<br>\
	\t\t\tdoReleaseConnection();<br>\
	\t\t}<br>\
	\t}\
	</code>

useAfterAnnotationRatherThanTeardown.usage.description = \
	Method tearDown not declared with @After annotation
useAfterAnnotationRatherThanTeardown.usage.explanation  = \
	JUnit 4 requires that all clean up activities be done in methods annotated by @After.

	useAfterAnnotationRatherThanTeardown.usage.recommendation.name = Recommendation...
	useAfterAnnotationRatherThanTeardown.usage.recommendation.description = \
		Use @After Annotation
################################################################################

useAvailableConstants.name = Use Available Constants
useAvailableConstants.longName = \
	Use available constants instead of creating new instances
useAvailableConstants.description = \
	<b>Summary</b>\
	<br/>\
	Use available constants instead of creating new instances.\
	<p>\
	<b>Description</b>\
	<br/>\
	Some classes provide constants for commonly used values. When possible, \
	use these constants rather than creating new instances.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following test case would be flagged as a violation because \
	<code>BigInteger.ZERO</code> could be used instead:\
	<p><code>\
	\tnew BigInteger("0");\
	</code>

# {0} the type that is instantiated.
# {1} the constant that should be used instead
useAvailableConstants.couldUse.description = \
	The constant {1} could be used instead
useAvailableConstants.couldUse.explanation  = \
	Rather than creating a new instance of <code>{0}</code>, <code>{1}</code> \
	could be used instead.

	useAvailableConstants.couldUse.recommendation.name = Replace with {1}
	useAvailableConstants.couldUse.recommendation.description = \
		Replace this instance creation with {1}

################################################################################

useBeforeAnnotationRatherThanSetup.name = Use @Before Annotation Rather than setUp()
useBeforeAnnotationRatherThanSetup.longName = \
	Use the @Before annotation rather than setUp() to initialize the data entities required in running tests
useBeforeAnnotationRatherThanSetup.description = \
	<b>Summary</b>\
	<br/>\
	Use the @Before annotation rather than setUp() to initialize the data \
	entities required in running tests.\
	<p>\
	<b>Description</b>\
	<br/>\
	In JUnit 3, the setUp method was used to set up all data entities \
	required in running tests. JUnit 4 skips the setUp method and executes \
	all methods annotated with @Before before all tests.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following test case would be flagged as a violation because \
	it uses setUp() rather than @Before for setting up the Junit test:\
	<p><code>\
	\tpublic class MyTest extends TestCase {<br>\
	\t\tpublic void setUp(){<br>\
	\t\t\tdoEstablishConnection();<br>\
	\t\t}<br>\
	\t}\
	</code>

useBeforeAnnotationRatherThanSetup.usage.description = \
	Method setUp not declared with @Before annotation
useBeforeAnnotationRatherThanSetup.usage.explanation  = \
	JUnit 4 requires that all the test setup be done in methods annotated by @Before.

	useBeforeAnnotationRatherThanSetup.usage.recommendation.name = Recommendation...
	useBeforeAnnotationRatherThanSetup.usage.recommendation.description = \
		Use @Before Annotation

################################################################################

useRunWithAnnotationRatherThanSuite.name = Use @RunWith and @SuiteClasses to build test suite 
useRunWithAnnotationRatherThanSuite.longName = \
	Use  @RunWith and @SuiteClasses annotations to build test suite for JUnit
useRunWithAnnotationRatherThanSuite.description = \
	<b>Summary</b>\
	<br/>\
	Use the @RunWith and @SuiteClasses annotations rather than suite() \
	method to build test suite for JUnit \
	<p>\
	<b>Description</b>\
	<br/>\
	 In JUnit 3, test suites are indicated by the suite() method. In JUnit 4, \
	 suites are indicated through the @RunWith and @SuiteClasses annotations. \
	<p>\
	<b>Example</b>\
	<br/>\
	The following test class would be flagged as a violation because \
	it uses suite() rather than @RunWith and @SuiteClasses annotations to \
	construct test suite:\
	<p><code>\
	\tpublic class BadExample extends TestCase{<br>\
	\t\tpublic static Test suite(){<br>\
	\t\t\treturn new Suite();<br>\
	\t\t}<br>\
	\t}\
	</code>

useRunWithAnnotationRatherThanSuite.usage.description = \
	The class uses suite() method to construct test suite. 
useRunWithAnnotationRatherThanSuite.usage.explanation  = \
	JUnit 4 requires that test suite be constructed using @RunWith and @SuiteClasses annotations.
	useRunWithAnnotationRatherThanSuite.usage.recommendation.name = Recommendation...
	useRunWithAnnotationRatherThanSuite.usage.recommendation.description = \
		Use @RunWith Annotation

################################################################################

useBufferedIO.name = Use Buffered IO
useBufferedIO.longName = \
	All input and output should be buffered
useBufferedIO.description = \
	<b>Summary</b>\
	<br/>\
	All input and output should be buffered.\
	<p>\
	<b>Description</b>\
	<br/>\
	This rule finds places where non-buffered IO classes are created and are \
	not subsequently wrapped inside a buffered form of the class.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following FileReader creation would be flagged because it is not \
	wrapped inside an instance of BufferedReader:\
	<p><code>\
	\tpublic FileReader getReader(String fileName)<br>\
	\t{<br>\
	\t\treturn new FileReader(fileName);<br>\
	\t}\
	</code><p>\
	It could be fixed by rewriting the code as follows:\
	<p><code>\
	\tpublic Reader getReader(String fileName)<br>\
	\t{<br>\
	\t\treturn new BufferedReader(new FileReader(fileName));<br>\
	\t}\
	</code>

useBufferedIO.unbuffered.description = \
	Creation of unbuffered {0}
useBufferedIO.unbuffered.explanation = \
	Instances of {0} are unbuffered, so they should be wrapped by an instance \
	of {1}.

	useBufferedIO.unbuffered.recommendation.name = Recommendation...
	useBufferedIO.unbuffered.recommendation.description = \
		Wrap the creation of the {0} inside the creation of a {1}.

################################################################################

useCharRatherThanString.name = Use char Rather Than String
useCharRatherThanString.longName = \
	Use char rather than String when possible
useCharRatherThanString.description = \
	<b>Summary</b>\
	<br/>\
	Some String literals can be replaced by a character literal to improve \
	performance when being used as parameter to some methods.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds single character string literals as an argument \
	to a method invocation where that argument can be replaced by a character \
	literal to improve performance.\
	<p>\
	<b>Example</b>\
	<br/>\
	Given the following declaration:\
	<p><code>\
	\tString s = "hello world";\
	</code><p>\
	The expression\
	<p><code>\
	\ts.indexOf("d")\
	</code><p>\
	would be flagged as needing to be replaced by the expression\
	<p><code>\
	\ts.indexOf('d');\
	</code>

useCharRatherThanString.singleChar.description = \
	String literal can be replaced by a character literal
useCharRatherThanString.singleChar.explanation = \
	The single character string literal can be replaced \
	by a character literal to improve performance.

	useCharRatherThanString.singleChar.replace.name = Replace with character
	useCharRatherThanString.singleChar.replace.description = \
		Replace the string literal with a character literal.

################################################################################

useCharAtRatherThanStartsWith.name = Use charAt() Rather Than startsWith()
useCharAtRatherThanStartsWith.longName = \
	Use charAt() rather than startsWith() when possible
useCharAtRatherThanStartsWith.description = \
	<b>Summary</b>\
	<br/>\
	Use charAt() rather than startsWith() when the constant is a single \
	character string.\
	<p>\
	<b>Description</b>\
	<br/>\
	Use charAt(0) rather than startsWith("string constant") when the constant \
	is a single character string. Using startsWith() with a one character \
	argument works, but it makes several computations while preparing to \
	compare its prefix with another string, which is unnecessary when you just \
	want to compare one character against another.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following method invocation would be flagged as a violation:\
	<p><code>\
	\tstring.startsWith("&lt;")\
	</code><p>\
	because the condition could more efficiently be tested using:\
	<p><code>\
	\tstring.length() > 0 &amp;&amp; string.charAt(0) == '&lt;'\
	</code>

useCharAtRatherThanStartsWith.useCharAt.description = \
	Use charAt() rather than startsWith()
useCharAtRatherThanStartsWith.useCharAt.explanation = \
	Use charAt(0) rather than startsWith("string constant") when the constant \
	is a single character string. Using startsWith() with a one character \
	argument works, but it makes several computations while preparing to \
	compare its prefix with another string, which is unnecessary when you just \
	want to compare one character against another.

	useCharAtRatherThanStartsWith.useCharAt.replace.name = Replace with charAt()
	useCharAtRatherThanStartsWith.useCharAt.replace.description = \
		Replace with a call to charAt().

################################################################################

useCompoundAssignment.name = Use Compound Assignment
useCompoundAssignment.longName = \
	Use compound assignment operators when possible
useCompoundAssignment.description = \
	<b>Summary</b>\
	<br/>\
	Compound assignment statements are more compact and hence make the code \
	easier to read.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for simple assignment statements that could be \
	converted into compound assignment statements.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following assignment would be flagged as a violation:\
	<p><code>\
	\tsum = sum + array[i];\
	</code><p>\
	because it could be more compactly written as:\
	<p><code>\
	\tsum += array[i];\
	</code>

useCompoundAssignment.compound.description = \
	Use compound assignment
useCompoundAssignment.compound.explanation = \
	The expression on the left-hand side of the assignment operator is \
	duplicated on the right-hand side. The assignment operator should be \
	replaced by a compound assignment in order to simplify the code.

	useCompoundAssignment.compound.replace.name = Replace with compound assignment
	useCompoundAssignment.compound.replace.description = \
		Replace the assignment with a compound assignment.

################################################################################

useDeepArraysMethods.name = Use deep Arrays methods when necessary
useDeepArraysMethods.longName = \
	Use deep Arrays methods when necessary
useDeepArraysMethods.description = \
	<b>Summary</b>\
	<br/>\
	Use deep <code>Arrays</code> methods when necessary.\
	<p>\
	<b>Description</b>\
	<br/>\
	The <code>toString()</code>, <code>equals()</code>, and <code>hashCode()</code>\
	methods in the Arrays class are shallow methods. That is, if you pass in an \
	array of arrays, the elements in each sub-array will not be considered during \
	the operation. Instead use the <code>deepToString()</code>, <code>deepEquals()</code>, \
	and <code>hashCode()</code>\
	<p>\
	<b>Example</b>\
	<br/>\
	The following would be flagged as a violation:\
	<p><code>\
	\tArrays.toString(new int[][] {{1, 2, 3}, {4, 5, 6}});\
	</code>

# {0} The shallow Arrays method that was used.
# {1} The deep Arrays method that should be used instead.

useDeepArraysMethods.shallowMethod.description = \
	{0}() is used with a multidimensional array
useDeepArraysMethods.shallowMethod.explanation = \
	The deep Arrays method <code>{1}()</code> should be used instead.

	useDeepArraysMethods.shallowMethod.resolution.name=Replace {0}
	useDeepArraysMethods.shallowMethod.resolution.description=\
		Replace {0} with {1}.
		
################################################################################

useDomainspecificTerminology.name = Use Domain-specific Terminology
useDomainspecificTerminology.longName = \
	Use terminology applicable to the domain
useDomainspecificTerminology.description = \
	<b>Summary</b>\
	<br/>\
	Use terminology applicable to the domain.\
	<p>\
	<b>Description</b>\
	<br/>\
	Avoid using generic terms in identifiers. Use terms appropriate to the \
	domain instead. This rule maps generic terms to specific terms according \
	to a user-supplied list.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the term "thingy" were added as a generic term for the domain-specific \
	term "widget", the following class name would be flagged as needing to be \
	replaced by "MyWidget":\
	<p><code>\
	\tpublic class MyThingy<br>\
	\t{<br>\
	\t}\
	</code>

useDomainspecificTerminology.inappropriateTerm.description = \
	A generic term "{0}" is used in an identifier
useDomainspecificTerminology.inappropriateTerm.explanation = \
	A domain-specific term "{1}" should be used instead.

	useDomainspecificTerminology.inappropriateTerm.resolution.name=Rename "{0}"
	useDomainspecificTerminology.inappropriateTerm.resolution.description=\
		Rename "{0}" to "{1}".
		
################################################################################

useIdentityToCompareNull.name = Use == to Compare With null
useIdentityToCompareNull.longName = \
	Use the equals operator (==) to compare with null 
useIdentityToCompareNull.description = \
	<b>Summary</b>\
	<br/>\
	A null value should not be compared using methods equals() or equalsIgnoreCase().\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds places where an object is compared to the null value \
	using either the equals() or (if the object is a String) the equalsIgnoreCase() \
	method. In both cases, the contract of the method requires this comparison \
	to always return false. Either the test is unnecessary, or it should be \
	replaced by an identity comparison.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following comparison would be flagged as a violation:\
	<p><code>\
	\tif (object.equals(null)) \
	</code>

# {0} = method
useIdentityToCompareNull.usage.description = \
	Should not compare with null using the "{0}" method
useIdentityToCompareNull.usage.explanation = \
	The contract of the {0} method requires this comparison to always return \
	false.

	useIdentityToCompareNull.usage.recommendation.name = Recommendation...
	useIdentityToCompareNull.usage.recommendation.description = \
		Use the identity operator (==) rather than the equals() method.

################################################################################

useEquals.name = Use equals() Rather Than ==
useEquals.longName = \
	Use the equals() method rather than the equals operator (==)
useEquals.description = \
	<b>Summary</b>\
	<br/>\
	Values should not be compared using equals (==) or not equals (!=).\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds places where two values are compared using either \
	the equals (==) or not equals (!=) operators.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following expression would be flagged as a violation:\
	<p><code>\
	\tif (firstString == secondString) {\
	</code><p>\
	because it should be rewritten as:\
	<p><code>\
	\tif (firstString.equals(secondString)) {\
	</code>

useEquals.equals.description = \
	Should not compare values using the equals (==) operator
useEquals.equals.explanation = \
	Comparing values by using the equality (==) operator is not always accurate.

	useEquals.equals.replace.name = Replace with equals()
	useEquals.equals.replace.description = \
		Replace the comparison with an invocation of equals().

useEquals.notEquals.description = \
	Should not compare values using the not equals (!=) operator
useEquals.notEquals.explanation = \
	Comparing values by using the inequality (!=) operator is not always \
	accurate.

	useEquals.notEquals.replace.name = Replace with equals()
	useEquals.notEquals.replace.description = \
		Replace the comparison with an invocation of equals().

################################################################################

useEqualsRatherThanEqualsIgnoreCase.name = Use equals() Rather Than equalsIgnoreCase()
useEqualsRatherThanEqualsIgnoreCase.longName = \
	Use String.equals() rather than String.equalsIgnoreCase() to compare strings
useEqualsRatherThanEqualsIgnoreCase.description = \
	<b>Summary</b>\
	<br/>\
	Use String.equals() rather than String.equalsIgnoreCase() to compare \
	strings.\
	<p>\
	<b>Description</b>\
	<br/>\
	The method String.equals() should be used rather than the method \
	String.equalsIgnoreCase() to compare strings.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following use of the method equalsIgnoreCase() would be flagged:\
	<p><code>\
	\tif (command.equalsIgnoreCase("delete")) {\
	</code>

useEqualsRatherThanEqualsIgnoreCase.foundEqualsIgnoreCase.description = \
	Use of equalsIgnoreCase()
useEqualsRatherThanEqualsIgnoreCase.foundEqualsIgnoreCase.explanation = \
	The method equalsIgnoreCase() is being used to compare strings.

	useEqualsRatherThanEqualsIgnoreCase.foundEqualsIgnoreCase.replace.name = Replace
	useEqualsRatherThanEqualsIgnoreCase.foundEqualsIgnoreCase.replace.description = \
		Replace the invocation of equalsIgnoreCase() with an invocation of \
		equals().

################################################################################

useForLoop.name = Use "for" Loops Instead of "while" Loops
useForLoop.longName = \
	Use for loops rather than while loops when possible
useForLoop.description = \
	<b>Summary</b>\
	<br/>\
	Disallows the use of "while" loops.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for the use of "while" loops rather than "for" \
	loops. "for" loops allow loop-scoped variables to be declared during loop \
	setup, minimizing the scope of loop-control variables to just the body of \
	the loop. Since their scope ends after the loop, they cannot be referenced \
	later accidentally.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following while loop would be flagged as a violation:\
	<p><code>\
	\tint index = 0;<br>\
	\twhile (index &lt; array.length) {<br>\
	\t\t...<br>\
	\t\tindex++;<br>\
	\t}\
	</code><p>\
	because it should be rewritten as:\
	<p><code>\
	\tfor (int i = 0; i &lt; array.length; i++) {<br>\
	\t\t...<br>\
	\t}\
	</code>

useForLoop.whileLoop.description = \
	Use a "for" loop instead of a "while" loop
useForLoop.whileLoop.explanation = \
	"for" loops allow loop-scoped variables to be declared during loop setup, \
	minimizing the scope of loop-control variables to just the body of the \
	loop. Since their scope ends after the loop, they cannot be referenced \
	later accidentally.

	useForLoop.whileLoop.recommendation.name = Recommendation...
	useForLoop.whileLoop.recommendation.description = \
		Use a "for" loop rather than a "while" loop.

################################################################################

useInterfacesOnlyToDefineTypes.name = Use Interfaces Only to Define Types
useInterfacesOnlyToDefineTypes.longName = \
	Use interfaces to define types rather than constants
useInterfacesOnlyToDefineTypes.description = \
	<b>Summary</b>\
	<br/>\
	Use interfaces to define types, not as places to store constants.\
	<p>\
	<b>Description</b>\
	<br/>\
	This rule identifies interfaces that do not define any methods. Interfaces \
	that do not define any fields are ignored.

useInterfacesOnlyToDefineTypes.notAType.description = \
	The interface {0} does not define a type
useInterfacesOnlyToDefineTypes.notAType.explanation = \
	{0} defines static fields but no methods.

	useInterfacesOnlyToDefineTypes.notAType.recommendation.name = Recommendation...
	useInterfacesOnlyToDefineTypes.notAType.recommendation.description = \
		Move the field definitions to an appropriate class.

################################################################################

useLocaleSpecificMethods.name = Use locale-specific methods
useLocaleSpecificMethods.longName = \
	Use locale-specific methods
useLocaleSpecificMethods.description = \
	<b>Summary</b>\
	<br/>\
	Locale-specific methods should be used to convert Strings \
	to either upper or lower case.\
	<p>\
	<b>Description</b>\
	<br/>\
	This rule looks for invocations of either toUpperCase() or toLowerCase() \
	that do not have an instance of Locale as an argument. When converting a \
	String to either upper or lower case, the locale-specific method should be \
	used to ensure proper conversion.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following would be flagged as an error because the invocation of \
	toLowerCase does not have a Locale as an argument:\
	<p><code>\
	\tif (x.toLowerCase().equals("test"))\
	</code>

useLocaleSpecificMethods.foundGenericMethod.description = \
	No locale
useLocaleSpecificMethods.foundGenericMethod.explanation = \
	Method does not use a locale.
		
	useLocaleSpecificMethods.foundGenericMethod.addLocale.name = Add Locale
	useLocaleSpecificMethods.foundGenericMethod.addLocale.description = \
		Add a locale parameter to the method call.

################################################################################

useNoSuchElementException.name = Use NoSuchElementException in next()
useNoSuchElementException.longName = \
	An Iterator's next() method should be able to throw a NoSuchElementException
useNoSuchElementException.description = \
	<b>Summary</b>\
	<br/>\
	An <code>Iterator</code>'s <code>next()</code> method should always be \
	able to throw NoSuchElementExceptions in case a client ignores a false \
	return from <code>hasNext()</code>.\
	<p>\
	<b>Description</b>\
	<br/>\
	This rule looks for <code>Iterator</code>s whose <code>next()</code> \
	method will never throw a NoSuchElementException.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following would be flagged as an error: \
	<p>\
	<code>\
	\tpublic class FooIterator implements Iterator {<br>\
	\t\tpublic Object next(){};<br>\
	\t}\
	</code>

useNoSuchElementException.violation.description = \
	Next() cannot throw a NoSuchElementException
useNoSuchElementException.violation.explanation = \
	<code>{0}</code> is incapable of throwing a NoSuchElementException

	useNoSuchElementException.violation.recommendation.name = Add Locale
	useNoSuchElementException.violation.recommendation.description = \
		Check if there are more elements to return; if not, throw a \
		<code>NoSuchElementException</code>.

################################################################################

useOfInstanceOfWithThis.name = Use of "instanceof" with "this"
useOfInstanceOfWithThis.longName = \
	Don't test the type of "this" using the instanceof operator
useOfInstanceOfWithThis.description = \
	<b>Summary</b>\
	<br/>\
	The type of "this" should not be tested using the "instanceof" operator.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for places where the type of "this" is being tested \
	using the "instanceof" operator. Code that depends on the type of an \
	object should be distributed to the sublasses so that polymorphism will \
	automatically choose the right code to execute.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tif (this instanceof SpecialSublass) ...\
	</code>

useOfInstanceOfWithThis.invalid.description = \
	Use of instanceof with this
useOfInstanceOfWithThis.invalid.explanation = \
	The type of "this" should not be tested using the "instanceof" operator. \
	Code that depends on the type of an object should be distributed to the \
	sublasses so that polymorphism will automatically choose the right code \
	to execute.

	useOfInstanceOfWithThis.invalid.recommendation.name = Recommendation...
	useOfInstanceOfWithThis.invalid.recommendation.description = \
		Distribute the conditional code to the subclasses being tested for.

################################################################################

useOfRandom.name = Use of Random
useOfRandom.longName = \
	Use SecureRandom rather than Random
useOfRandom.description = \
	<b>Summary</b>\
	<br/>\
	The class java.util.Random is not as secure as java.security.SecureRandom.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for any use of the class java.util.Random, including \
	any classes declared as a subclass of Random, and any instances of Random \
	being instantiated. The class java.security.SecureRandom should be used \
	instead.\
	<p>\
	<b>Security Implications</b>\
	<br/>\
	By using a cryptographically strong random number generated by \
	SecureRandom, any risks that may be caused by a malicious user being able \
	to anticipate the outcome of a random number, will be prevented.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following would be flagged as a violation:\
	<p><code>\
	\tclass A extends Random {}\
	</code>

useOfRandom.randomInstantiated.description = \
	Use of Random through a new Random object
useOfRandom.randomInstantiated.explanation = \
	Random should not be used, SecureRandom is more secure.

	useOfRandom.randomInstantiated.recommendation.name = Recommendation...
	useOfRandom.randomInstantiated.recommendation.description = \
		Use SecureRandom.

useOfRandom.randomSubclassed.description = \
	Subclass of Random found: "{0}"
useOfRandom.randomSubclassed.explanation = \
	The class java.util.Random should not be subclassed, SecureRandom is more \
	secure.

	useOfRandom.randomSubclassed.recommendation.name = Recommendation...
	useOfRandom.randomSubclassed.recommendation.description = \
		Define as a subclass of java.security.SecureRandom instead of \
		java.util.Random.

useOfRandom.mathRandomInvocation.description = \
	Invocation of Math.random() found
useOfRandom.mathRandomInvocation.explanation = \
	The invocation of Math.random() uses java.util.Random, which is not as \
	secure as java.security.SecureRandom.

	useOfRandom.mathRandomInvocation.recommendation.name = Recommendation...
	useOfRandom.mathRandomInvocation.recommendation.description = \
		Do not invoke Math.random().

#################################################################################

useOfThreadInterrupted.name = Improper Use of Thread.interrupted()
useOfThreadInterrupted.longName = \
	Improper Use of Thread.interrupted()
useOfThreadInterrupted.description = \
	<b>Summary</b>\
	<br/>\
	The static method <code>Thread.interrupted()</code> can be easily \
	confused with the instance method <code>isInterrupted()</code>.\
	<p>\
	<b>Description</b>\
	<br/>\
	Since <code>interrupted()</code> is a static method which returns \
	whether the <i>current</i> thread is interrupted, it should always be \
	invoked using <code>Thread.interrupted()</code>. This audit rule looks \
	for any invocations of <code>interrupted()</code> on instances of \
	<code>Thread</code>.\
	instead.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following would be flagged as a violation:\
	<p><code>\
	\tnew Thread().interrupted()\
	</code>

useOfThreadInterrupted.threadCurrentThread.description = \
	Invocation of interrupted() on Thread.currentThread()
useOfThreadInterrupted.threadCurrentThread.explanation = \
	Since <code>interrupted()</code> is a static method which always returns \
	whether the <i>current</i> thread is interrupted, it is unnecessary to \
	invoke it on <code>Thread.currentThread()</code>.

	useOfThreadInterrupted.threadCurrentThread.recommendation.name = Recommendation...
	useOfThreadInterrupted.threadCurrentThread.recommendation.description = \
		Use <code>Thread.interrupted()</code> instead.

useOfThreadInterrupted.notCurrentThread.description = \
	Invocation of interrupted() on an instance of Thread
useOfThreadInterrupted.notCurrentThread.explanation = \
	The method <code>interrupted()</code> is a static method which returns \
	whether the <i>current</i> thread is interrupted. However, it is invoked \
	on an instance of <code>Thread</code>. This will <b>not</b> check whether \
	that instance is interrupted.

	useOfThreadInterrupted.notCurrentThread.testInstance.name = Test instance
	useOfThreadInterrupted.notCurrentThread.testInstance.description = \
		If you intend to test whether a <b>particular</b> thread is interrupted, \
		call <code>isInterrupted()</code> on it instead.<br>\

	useOfThreadInterrupted.notCurrentThread.testCurrent.name = Test current
	useOfThreadInterrupted.notCurrentThread.testCurrent.description = \
		If you intend to test whether the <b>current</b> thread is interrupted, \
		use <code>Thread.interrupted()</code> instead.

useOfThreadInterrupted.subclassOfThread.description = \
	Invocation of interrupted() on a subclass of Thread
useOfThreadInterrupted.subclassOfThread.explanation = \
	The method <code>interrupted()</code> is a static method in <code>Thread</code> \
	which returns whether the <i>current</i> thread is interrupted. However, it is \
	invoked on a subclass of <code>Thread</code>. For the sake of clarity, this should \
	be invoked on <code>Thread</code>

	useOfThreadInterrupted.subclassOfThread.recommendation.name = Recommendation...
	useOfThreadInterrupted.subclassOfThread.recommendation.description = \
		Use <code>Thread.interrupted()</code> instead.

################################################################################

useOrToCombineSWTStyles.name = Use Or to Combine SWT Style Bits
useOrToCombineSWTStyles.longName = \
	Use the bit-wise-or operator to combine SWT style bits
useOrToCombineSWTStyles.description = \
	<b>Summary</b>\
	<br/>\
	SWT style bits should be combined using the bitwise-OR operator.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for creations of SWT widgets where the style bits are \
	being combined using an operator other than the bitwise-OR. \
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tText text = new Text(shell, SWT.SINGLE & SWT.BORDER);\
	</code>

useOrToCombineSWTStyles.and.description = \
	Use of the bit-wise-and operator to combine styles
useOrToCombineSWTStyles.and.explanation = \
	The bit-wise-and operator should not be used to combine SWT styles.

	useOrToCombineSWTStyles.and.recommendation.name = Recommendation...
	useOrToCombineSWTStyles.and.recommendation.description = \
		Replace the use of the bit-wise-and operator with a use of the \
		bit-wise-or operator.

################################################################################

usePrivilegedCodeSparingly.name = Use Privileged Code Sparingly
usePrivilegedCodeSparingly.longName = \
	Flags the overuse of privileged code
usePrivilegedCodeSparingly.description = \
	<b>Summary</b>\
	<br/>\
	Prevents the use or overuse of privileged code.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule flags instances of java.security.PrivilegedAction and \
	java.security.PrivilegedExceptionAction which have more than a specified number \
	(default 0) of statements within run().\
	<p>\
	Note: When set to default value of 0, no privileged code will be allowed since \
	the method run, see PrivilegedAction or PrivilegedExceptionAction, returns an \
	Object, which at minimum takes one statement: "return null;".\
	<p>\
	<b>Security Implications</b>\
	<br/>\
	Privileged code allows code access to system variables the Java API \
	would normally not allow access to, for security purposes privileged code \
	should be used sparingly.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following source would be flagged since there are statements in a run() \
	method declared for a PrivilegedAction.\
	<p><code>\
	\tAccessController.doPrivileged(new PrivilegedAction() {<br>\
	\t\tpublic Object run() {<br>\
	\t\t\t\System.loadLibrary("awt");<br>\
	\t\t\treturn null;<br>\
	\t\t}<br>\
	\t});\
	</code>

usePrivilegedCodeSparingly.overuseOfPrivilegedCode.description = \
	Overuse of privileged code
usePrivilegedCodeSparingly.overuseOfPrivilegedCode.explanation = \
	Minimize number of statements in privileged code from {1} to {0}.

	usePrivilegedCodeSparingly.overuseOfPrivilegedCode.recommendation.name = Recommendation...
	usePrivilegedCodeSparingly.overuseOfPrivilegedCode.recommendation.recommendation = \
	Minimize the number of statements in run().

################################################################################

useStartRatherThanRun.name = Use Start Rather Than Run
useStartRatherThanRun.longName = \
	Threads should be started, not run
useStartRatherThanRun.description = \
	<b>Summary</b>\
	<br/>\
	Threads should be started rather than run.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for places where a thread is run using the run() \
	method, rather than started using the start() method. This is usually a \
	mistake since it causes the run() method to be run in the calling thread \
	rather than in a newly spawned thread.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following invocation would be flagged:\
	<p><code>\
	\tthread.run();\
	</code>

useStartRatherThanRun.runInvoked.description = \
	Run method invoked on thread
useStartRatherThanRun.runInvoked.explanation = \
	The run() method was invoked on a thread rather than the start() method.

	useStartRatherThanRun.runInvoked.replace.name = Replace with start()
	useStartRatherThanRun.runInvoked.replace.description = \
		Replace the invocation of run() with an invocation of start().

################################################################################

useStringBufferLength.name = Use StringBuffer length()
useStringBufferLength.longName = \
	Use StringBuffer's or StringBuilder's length() method
useStringBufferLength.description = \
	<b>Summary</b>\
	<br/>\
	Test the length of a StringBuffer or StringBuilder using its \
	length() method directly rather than converting it to a string first.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for places where the length of a StringBuffer or \
	StringBuilder is computed by first converting it to a String.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following would be flagged: \
	<p><code>\
	\tStringBuffer sb = new StringBuffer("Foo");<br>\
	\tif (sb.toString().length() == 0) ...\
	</code>

useStringBufferLength.comparingToEmptyString.description = \
	Unnecessary conversion to String
useStringBufferLength.comparingToEmptyString.explanation = \
	A <code>{0}</code> was converted to a String to compare it \
	to the empty String. Conversion to a string is unnecessary, \
	and it is faster to test for a length of 0 than to test equality \
	with the empty string.

	useStringBufferLength.comparingToEmptyString.replace.name = Replace with .length() == 0
	useStringBufferLength.comparingToEmptyString.replace.description = \
		Replaces the code with code that checks that length == 0.

useStringBufferLength.usingStringLength.description = \
	Unnecessary conversion to String
useStringBufferLength.usingStringLength.explanation = \
	A <code>{0}</code> was converted to a String before checking its length. \
	This is unnecessary, as the length of a <code>{0}</code> can be directly checked.

	useStringBufferLength.usingStringLength.replace.name = Replace with .length()
	useStringBufferLength.usingStringLength.replace.description = \
		Replaces the code with code that directly checks the length.

################################################################################

useTestAnnotationForJunitTest.name = Use @Test Annotation for JUnit test
useTestAnnotationForJunitTest.longName = \
	Use the @Test annotation for JUnit test
useTestAnnotationForJunitTest.description = \
	<b>Summary</b>\
	<br/>\
	JUnit 4 tests should use the @Test annotation.\
	<p>\
	<b>Description</b>\
	<br/>\
	In JUnit 3, the framework executed all methods which started with \
	the word test as a unit test. In JUnit 4, only methods annotated \
	with the @Test annotation are identified as tests.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following test case would be flagged as a violation because \
	the test method  does not contain any @Test annotation:\
	<p><code>\
	\tpublic class MyTest extends TestCase {<br>\
	\t\tpublic void testFoo(){<br>\
	\t\t\tdoSomething();<br>\
	\t\t}<br>\
	\t}\
	</code>

useTestAnnotationForJunitTest.usage.description = \
	Use @Test annotation for test method "{0}"
useTestAnnotationForJunitTest.usage.explanation  = \
	The test method "{0}" does not have  @Test annotation, only methods annotated \
	with @Test are identified as tests in JUnit 4.

	useTestAnnotationForJunitTest.usage.recommendation.name = Recommendation...
	useTestAnnotationForJunitTest.usage.recommendation.description = \
		Use @Test annotation

################################################################################

useThreadSafeLazyInitialization.name = Use Thread-safe Lazy Initialization
useThreadSafeLazyInitialization.longName = \
	Perform lazy initialization in a thread-safe way.
useThreadSafeLazyInitialization.description = \
	<b>Summary</b>\
	<br/>\
	Static fields should be initialized in a thread safe way.\
	<p>\
	<b>Description</b>\
	<br/>\
	Static fields are typically initialized either as part of their declaration, \
	in a static initializer, or lazily in a static method. The first two ways \
	are thread safe because of the way the JVM initializes classes. In order for the \
	initialization of a lazily initialized field (such as the unique instance of a \
	Singleton class) to be thread safe, either the method must be synchronized or the \
	body of the method must be inside a synchronize statement. If not, and if the \
	method is called by multiple threads, one of the threads might get a reference to \
	the field before it is fully initialized or it might be initialized multiple times. \
	This audit rule looks for places where a static field is initialized in a way that \
	is not thread safe.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following singleton is not thread-safe, and would be marked as a violation.\
	<p><code>\
	\tpublic class MySingleton {<br>\
	\t\tpublic MySingleton instance = null;<br>\
	\t\t<br>\
	\t\tpublic MySingleton getInstance() {<br>\
	\t\t\tif (instance == null) {<br>\
	\t\t\t\tinstance = new MySingleton();<br>\
	\t\t\t}<br>\
	\t\t\treturn instance;<br>\
	\t\t}<br>\
	\t\t<br>\
	\t\tprivate MySingleton() {}<br>\
	\t}

# {0} The name of the method
# {1} The name of the instance
useThreadSafeLazyInitialization.found.description = \
	Lazy initialization of {1} is not thread safe
useThreadSafeLazyInitialization.found.explanation = \
	If multiple threads invoked <code>{0}()</code> at the same time, it is \
	possible that one of them could get a reference to <code>{1}</code> before \
	it is fully initialized.

# {0} The name of the method
	useThreadSafeLazyInitialization.found.synchMethod.name = Recommendation...
	useThreadSafeLazyInitialization.found.synchMethod.description = \
		Make the method <code>{0}</code> synchronized.

	useThreadSafeLazyInitialization.found.synchStatement.name = Recommendation...
	useThreadSafeLazyInitialization.found.synchStatement.description = \
		Surround this <code>if</code> statement with a \
		<code>synchronized</code> statement.

################################################################################

useTypeSpecificNames.name = Use Type-Specific Names
useTypeSpecificNames.longName = \
	Variables of some types should have a well-known name
useTypeSpecificNames.description = \
	<b>Summary</b>\
	<br/>\
	Variables of some types should have a well-known name.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for variable declarations where the type of the \
	variable is a known type but whose name is not one of the names approved \
	for variables of that type.\
	<p>\
	<b>Example</b>\
	<br/>\
	If the class java.io.InputStream were on the list with the names "in" \
	and "input" as the only valid names, the following declaration would be \
	flagged as a violation:\
	<p><code>\
	\tInputStream stream;\
	</code>

useTypeSpecificNames.badName.description = \
	Invalid name "{0}" for type {1}
useTypeSpecificNames.badName.explanation = \
	Variables of type {1} should have one of the following names: {2}.

	useTypeSpecificNames.badName.recommendation.name = Recommendation...
	useTypeSpecificNames.badName.recommendation.description = \
		Rename the variable to one of the approved names.

################################################################################

useValidSWTStyles.name = Use Valid SWT Styles
useValidSWTStyles.longName = \
	Widget types should only be assigned valid SWT styles
useValidSWTStyles.description = \
	<b>Summary</b>\
	<br/>\
	Widget types should only be assigned valid SWT styles.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for declarations of widget types with incorrect \
	styles set. Incorrectly set styles create a user interface not intended \
	by the developer, are unnecessary, and can lead to program errors or \
	exceptions. Styles input into a constructor are assumed to directly \
	reference the integer values, that is, local integer fields or integer \
	constants are assumed not to be passed instead.\
	<p>\
	Under the audit rule parameters ("Parameters" tab) the sets of valid \
	styles for each widget can be changed. After selecting a widget from the \
	left-hand list, say Label, the list on the right is the set of "incompatible \
	style groups". For the Label widget, you will see both "SWT.SEPARATOR" \
	and "SWT.SHADOW_IN | SWT.SHADOW_OUT | SWT.SHADOW_NONE" in this list. \
	This means that these four styles are all valid styles for the Label widget.\
	<p>\
	Furthermore, since SWT.SHADOW_IN, SWT.SHADOW_OUT and SWT.SHADOW_NONE are \
	in a group, only one of these styles may be attributed to a Label. If two \
	of these three are given to a Label, the constructor will be flagged.\
	<p>\
	The buttons 2.0/.../3.2 restore all widgets and styles included in the SWT \
	package for the specified version. All non-SWT widgets entered by the user, \
	aren't affected by these buttons.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following would be flagged twice as Button widgets can't have the \
	SWT.SINGLE style and can also not contain both the SWT.CHECK and SWT.PUSH \
	styles at the same time.\
	<p><code>\
	\tButton button = new Button(shell, SWT.SINGLE | SWT.CHECK | SWT.PUSH);\
	</code>

useValidSWTStyles.duplicateStylesFound.description = \
	Duplicate styles found in {1} constructor: {0}
useValidSWTStyles.duplicateStylesFound.explanation = \
	Styles should not be included twice.

	useValidSWTStyles.duplicateStylesFound.replaceFirstStyle.name = Remove first {0}
	useValidSWTStyles.duplicateStylesFound.replaceFirstStyle.description = \
		Remove first {0}.
	
	useValidSWTStyles.duplicateStylesFound.replaceSecondStyle.name = Remove second {0}
	useValidSWTStyles.duplicateStylesFound.replaceSecondStyle.description = \
		Remove second {0}.

useValidSWTStyles.incompatibleStylesFound.description = \
	Incompatible styles found in {3} constructor: {0} and {1}
useValidSWTStyles.incompatibleStylesFound.explanation = \
	Styles {0} and {1} cannot both be declared as styles for the {2} widget.

	useValidSWTStyles.incompatibleStylesFound.replaceFirstStyle.name = Remove {0}
	useValidSWTStyles.incompatibleStylesFound.replaceFirstStyle.description = \
		Remove {0}.

	useValidSWTStyles.incompatibleStylesFound.replaceSecondStyle.name = Remove {0}
	useValidSWTStyles.incompatibleStylesFound.replaceSecondStyle.description = \
		Remove {0}.

useValidSWTStyles.invalidStyleFound.description = \
	Invalid style found in {1} constructor: {0}
useValidSWTStyles.invalidStyleFound.explanation = \
	{0} is not a style of the {1} widget, or any of the superclasses of {1}.

	useValidSWTStyles.invalidStyleFound.replace.name = Remove {0}
	useValidSWTStyles.invalidStyleFound.replace.description = \
		Remove {0}.

################################################################################

useValueOf.name = Use valueOf() to wrap primitives
useValueOf.longName = Use valueOf() to wrap primitives
useValueOf.description = \
	<b>Summary</b>\
	<br/>\
	When wrapping primitives, always use the valueOf() method to convert them \
	instead of calling the constructor.\
	<p>\
	<b>Description</b>\
	<br/>\
	The valueOf() methods in the wrapper classes cache commonly used values. It \
	is therefore more efficient to use them, rather than to use the constructor \
	which creates a new instance every single time.\
	<p>\
	<b>Example</b>\
	<br/>The following would be marked as a violation: \
	<p><code>\
	\tnew Integer(5);\
	</code>

useValueOf.usedConstructor.description = A constructor was used
useValueOf.usedConstructor.explanation = A constructor was used where valueOf \
	could have been used instead.

	useValueOf.usedConstructor.fix.name = Replace constructor
	useValueOf.usedConstructor.fix.description = \
		Replace the constructor with a call to valueOf()

################################################################################

variableDeclaredInLoop.name = Variable Declared Within a Loop
variableDeclaredInLoop.longName = \
	Don't declare variables inside for, while, or do loops
variableDeclaredInLoop.description = \
	<b>Summary</b>\
	<br/>\
	One should be careful when declaring variables inside of for, while, or do \
	loops. This may lead to problems especially if the variable is initialized \
	as well.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for variables that have been declared or initialized \
	within a for, while, or do loop. \
	<p>\
	Declaring a variable within a loop breaks some suggested style rules. \
	<p>\
	Initializing a variable within a loop may indicate a problem with the \
	program's logic. It could also lead to degraded performance.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following declaration of the variable "event" would be flagged as a \
	violation:\
	<p><code>\
	\twhile (hasMoreEvents()) {<br>\
	\t\tEvent event = getNextEvent();<br>\
	\t\t...<br>\
	\t}\
	</code>

variableDeclaredInLoop.showOnlyInitialized.label = \
	Only show declarations with initializers
variableDeclaredInLoop.showOnlyInitialized.description = \
	Warn only for variables that are declared and initialized in a loop

variableDeclaredInLoop.declared.description = \
	The variable "{0}" is declared within a loop
variableDeclaredInLoop.declared.explanation = \
	The variable "{0}" has been declared within the body of a loop. \
	This breaks some suggested style rules. Are you sure this \
	is what you intended?

	variableDeclaredInLoop.declared.recommendation.name = Recommendation...
	variableDeclaredInLoop.declared.recommendation.description = \
		Declare the "{0}" variable outside of the loop.

variableDeclaredInLoop.initialized.description = \
	The variable "{0}" is initialized within a loop
variableDeclaredInLoop.initialized.explanation = \
	The variable "{0}" has been initialized within the body of a loop. \
	This may cause some performance problems or indicate a problem with the \
	program logic. Are you sure this is what you intended?

	variableDeclaredInLoop.initialized.recommendation.name = Recommendation...
	variableDeclaredInLoop.initialized.recommendation.description = \
		Initialize the "{0}" variable outside of the loop.

################################################################################

variableShouldBeFinal.name = Variable Should Be Final
variableShouldBeFinal.longName = \
	Declare variables that are only assigned once to be final
variableShouldBeFinal.description = \
	<b>Summary</b>\
	<br/>\
	Variables that are assigned only once should be final. \
	Variables marked as final communicate additional information to the reader \
	about how the variable is supposed to be used.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule finds\
	<p>\
	* private fields that have a value assigned in an initializer or in a \
	constructor and no where else,\
	<p>\
	* method parameters that are not assigned a value in the method,\
	<p>\
	* catch parameters that are not assigned a value in the catch block, and\
	<p>\
	* local variables that have a value assigned in their initializer and no \
	where else.\
	<p>\
	The variable should be marked as final indicating that the value of the \
	variable does not change through out the variable's lifetime.\
	<p>\
	<b>Security Implications</b>\
	<br/>\
	When a field is only assigned a value in one place, this usually indicates \
	that the field is not supposed to be changed during the life cycle of the \
	object. By marking the field as <code>final</code> you reduce the risk that \
	a malicious user can alter its value and thus create an unexpected situation \
	with unpredictable results.

variableShouldBeFinal.constantCatchParameter.label = \
	Find constant catch parameters
variableShouldBeFinal.constantCatchParameter.description = \
	Identify catch parameters that are never assigned to

variableShouldBeFinal.constantField.label = \
	Find constant private fields
variableShouldBeFinal.constantField.description = \
	Identify private fields with values assigned only in initializers or \
	constructors

variableShouldBeFinal.constantLocal.label = \
	Find constant local variables
variableShouldBeFinal.constantLocal.description = \
	Identify local variables with values assigned only in initializers

variableShouldBeFinal.constantMethodParameter.label = \
	Find constant method parameters
variableShouldBeFinal.constantMethodParameter.description = \
	Identify method parameters that are never assigned to

variableShouldBeFinal.catchParameterShouldBeFinal.description = \
	Catch parameter should be final: {0}
variableShouldBeFinal.catchParameterShouldBeFinal.explanation = \
	The catch parameter "{0}" should be marked as final to indicate that its \
	value does not change.

	variableShouldBeFinal.catchParameterShouldBeFinal.makeFinal.name = Make Final
	variableShouldBeFinal.catchParameterShouldBeFinal.makeFinal.description = \
		Declare the "{0}" variable final.

variableShouldBeFinal.fieldShouldBeFinal.description = \
	Private field should be final: {0}
variableShouldBeFinal.fieldShouldBeFinal.explanation = \
	The private field "{0}" should be marked as final to indicate that its \
	value does not change.

	variableShouldBeFinal.fieldShouldBeFinal.makeFinal.name = Make Final
	variableShouldBeFinal.fieldShouldBeFinal.makeFinal.description = \
		Declare the "{0}" field final.

variableShouldBeFinal.localShouldBeFinal.description = \
	Local variable should be final: {0}
variableShouldBeFinal.localShouldBeFinal.explanation = \
	The local variable "{0}" should be marked as final to indicate that its \
	value does not change.

	variableShouldBeFinal.localShouldBeFinal.makeFinal.name = Make Final
	variableShouldBeFinal.localShouldBeFinal.makeFinal.description = \
		Declare the "{0}" variable final.

variableShouldBeFinal.methodParameterShouldBeFinal.description = \
	Method parameter should be final: {0}
variableShouldBeFinal.methodParameterShouldBeFinal.explanation = \
	The method parameter "{0}" should be marked as final to indicate that its \
	value does not change.

	variableShouldBeFinal.methodParameterShouldBeFinal.makeFinal.name = Make Final
	variableShouldBeFinal.methodParameterShouldBeFinal.makeFinal.description = \
		Declare the "{0}" variable final.

################################################################################

variableUsage.name = Variable Usage
variableUsage.longName = \
	Don't shadow variables in an outer scope
variableUsage.description = \
	<b>Summary</b>\
	<br/>\
	Variables should never shadow variables with the same name that are \
	defined in an outer scope.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule checks for any declarations of variables that shadow a \
	variable with the same name that is defined in an outer scope.\
	<p>\
	<b>Example</b>\
	<br/>\
	In a class with a field declaration such as:\
	<p><code>\
	\tprivate int inventoryCount;\
	</code><p>\
	the following parameter would be flagged as a violation:\
	<p><code>\
	\tpublic void printInventory(int inventoryCount)\
	</code>

variableUsage.assignedButNotReferenced.description = \
	{0} assigned to but not referenced: "{1}"
variableUsage.assignedButNotReferenced.explanation = \
	The {2} is assigned a value but that value is never referenced. This most \
	likely represents a problem in the program.

	variableUsage.assignedButNotReferenced.recommendation.name = Recommendation...
	variableUsage.assignedButNotReferenced.recommendation.description = \
		Check your logic and remove this variable if it is not needed.

variableUsage.declaredButNotUsed.description = \
	{0} declared but not used: "{1}"
variableUsage.declaredButNotUsed.explanation = \
	The {2} is declared but is neither assigned a value nor referenced. \
	Consider removing it.

	variableUsage.declaredButNotUsed.recommendation.name = Recommendation...
	variableUsage.declaredButNotUsed.recommendation.description = \
		Check your logic and remove this variable if it is not needed.

variableUsage.shadowsField.description = \
	{0} shadows field from outer scope: "{1}"
variableUsage.shadowsField.explanation = \
	The {2} shadows a field that is defined in an outer scope. This make the \
	program more difficult to understand. Consider renaming one of them.

	variableUsage.shadowsField.recommendation.name = Recommendation...
	variableUsage.shadowsField.recommendation.description = \
		Check your logic and consider renaming this variable.

################################################################################

waitInsideWhile.name = Wait Inside While
waitInsideWhile.longName = \
	Only invoke the method wait() from within a while loop
waitInsideWhile.description = \
	<b>Summary</b>\
	<br/>\
	The wait() method should only be invoked within a while loop.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for invocations of the wait() method that occur \
	outside of a while loop.\
	<p>\
	<b>Example</b>\
	<br/>\
	The following invocation of the wait() method would be flagged as a \
	violation:\
	<p><code>\
	\tpublic void waitForEvent()<br>\
	\t{<br>\
	\t\tsynchronize (eventQueue) {<br>\
	\t\t\teventQueue.wait();<br>\
	\t\t\t...<br>\
	\t\t}<br>\
	\t}\
	</code>

waitInsideWhile.invalid.description = \
	Invocation of wait() outside while loop
waitInsideWhile.invalid.explanation = \
	The method wait() should only be invoked within the body of a while loop.

	waitInsideWhile.invalid.recommendation.name = Recommendation...
	waitInsideWhile.invalid.recommendation.description = \
		Re-work the code so that the invocation can occur within a while loop.

################################################################################

whiteSpaceBeforePropertyName.name = White Space Before Property Name
whiteSpaceBeforePropertyName.longName = \
	Don't precede property names with whitespace
whiteSpaceBeforePropertyName.description = \
	<b>Summary</b>\
	<br/>\
	Property names should not be preceded by white space.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for property names that are preceded by white \
	space. Property names that are preceded by white space often indicate a \
	missing line continuation character on the preceding line.\
	<p>\
	<b>Example</b>\
	<br/>\
	The property named "operation" below, which was likely intended to be part \
	of the line before it, would be flagged as a violation:\
	<p><code>\
	\tmessageText = You should have known better than to have tried this<br>\
	\t\toperation without first changing your preference settings.\
	</code>

whiteSpaceBeforePropertyName.whiteSpace.description = \
	White space before property named {0}
whiteSpaceBeforePropertyName.whiteSpace.explanation = \
	There is white space before the property named {0}, which might indicate \
	that there was a missing continuation character on the line before.

	whiteSpaceBeforePropertyName.whiteSpace.recommendation.name = Recommendation...
	whiteSpaceBeforePropertyName.whiteSpace.recommendation.description = \
		Place property names at the beginning of the line so that forgotten \
		line continuation characters can be found.

################################################################################

whiteSpaceUsage.name = White Space Usage
whiteSpaceUsage.longName = \
	Use a consistent style for indentation
whiteSpaceUsage.description = \
	<b>Summary</b>\
	<br/>\
	Indentation should consistently be done using either tabs or spaces.\
	<p>\
	<b>Description</b>\
	<br/>\
	Indentation should either be done using tabs, or it should be done using \
	spaces, but should not be done using a combination of the two. This audit \
	rule allows you to specify the indentation style you prefer, and then \
	looks for places where space and tab characters are used in ways that \
	violate the specified criteria.

whiteSpaceUsage.spaceAtStart.description = \
	Use of space at start of line
whiteSpaceUsage.spaceAtStart.explanation = \
	Spaces should not be used at the start of a line as a way of indenting \
	the source code.

	whiteSpaceUsage.spaceAtStart.recommendation.name = Recommendation...
	whiteSpaceUsage.spaceAtStart.recommendation.description = \
		Use tabs to indent the source code.

whiteSpaceUsage.tabAfterStart.description = \
	Use of tab character after start of line
whiteSpaceUsage.tabAfterStart.explanation = \
	Tabs should not be used after the first non-whitespace character.

	whiteSpaceUsage.tabAfterStart.recommendation.name = Recommendation...
	whiteSpaceUsage.tabAfterStart.recommendation.description = \
		Use spaces rather than tabs.

whiteSpaceUsage.tabInsideLiteral.description = \
	Use of tab within string or character literal
whiteSpaceUsage.tabInsideLiteral.explanation = \
	Tabs should not be used in either a literal string or literal character.

	whiteSpaceUsage.tabInsideLiteral.replace.name = Replace with "\\t"
	whiteSpaceUsage.tabInsideLiteral.replace.description = \
		Replace with an escaped tab character.

whiteSpaceUsage.tabOutsideLiteral.description = \
	Use of tab character outside a literal
whiteSpaceUsage.tabOutsideLiteral.explanation = \
	Tabs should not be used anywhere except in a literal string or literal \
	character.

	whiteSpaceUsage.tabOutsideLiteral.recommendation.name = Recommendation...
	whiteSpaceUsage.tabOutsideLiteral.recommendation.description = \
		Use spaces rather than tabs.

################################################################################

wrongIntegerTypeSuffix.name = Wrong Integer Type Suffix
wrongIntegerTypeSuffix.longName = \
	Use a capital "L" for long literals
wrongIntegerTypeSuffix.description = \
	<b>Summary</b>\
	<br/>\
	Long literals should use 'L' for a suffix.\
	<p>\
	<b>Description</b>\
	<br/>\
	This audit rule looks for long-valued literals whose suffix is a lower-case \
	'l'. Although the language specification allows this, it is too easily \
	confused with the number one (1), and hence should not be used.\
	<p>\
	<b>Example</b>\
	<br/><code>\
	\tpublic static final long ONE = 1l;\
	</code>

wrongIntegerTypeSuffix.long.description = \
	Long literals should use "L" for a suffix
wrongIntegerTypeSuffix.long.explanation = \
	Long literals should use an upper-case "L" rather than a lower-case "l" for \
	a suffix.

	wrongIntegerTypeSuffix.long.replace.name = Replace with "L"
	wrongIntegerTypeSuffix.long.replace.description = \
		Replace with the lower-case "l" with an upper-case "L".

################################################################################
#
# Standard Resolutions
#
################################################################################

standard.disableRuleForLine.name = Disable the {0} rule for line
standard.disableRuleForLine.description = Disable the {0} rule for this line only

standard.disableAllRulesForLine.name = Disable all rules for line
standard.disableAllRulesForLine.description = Disable all rules for this line only

standard.disableRuleForFile.name = Disable the {0} rule for file
standard.disableRuleForFile.description = Disable the {0} rule for the whole file

standard.disableAllRulesForFile.name = Disable all rules for file
standard.disableAllRulesForFile.description = Disable all rules for the whole file

################################################################################
#
# Audit Result Writer
#
################################################################################

audit_textResultWriterName = Text
audit_tabSeparatedDataResultWriterName = Tab Separated Data
audit_commaSeparatedDataResultWriterName = Comma Separated Data
audit_csvSummaryResultWriterName = Comma Separated Data (Summary)
audit_htmlResultWriterName = HTML
audit_xmlResultWriterName = XML

################################################################################
#
# Audit Series Presentations
#
################################################################################

auditSeriesPresentationName = Audit Series Presentation

com.instantiations.assist.eclipse.totalViolationsGraph.name = Total Violations
com.instantiations.assist.eclipse.totalViolationsGraph.description = \
	A graph of the total number of violations, broken down by severity.

com.instantiations.assist.eclipse.violationsByProjectGraph.name = Violations By Project
com.instantiations.assist.eclipse.violationsByProjectGraph.description = \
	A graph of the number of violations in each project.

com.instantiations.assist.eclipse.violationsByGroupGraph.name = Violations By Audit Rule Group
com.instantiations.assist.eclipse.violationsByGroupGraph.description = \
	A graph of the number of violations in each audit rule group.

com.instantiations.assist.eclipse.violationsByAuthorGraph.name = Violations By Author
com.instantiations.assist.eclipse.violationsByAuthorGraph.description = \
	A graph of the number of violations owned by each author.

com.instantiations.assist.eclipse.totalFixedViolationsGraph.name = Total Fixed Violations
com.instantiations.assist.eclipse.totalFixedViolationsGraph.description = \
	A graph of the total number of fixed violations, broken down by severity.

com.instantiations.assist.eclipse.fixedViolationsByAuthorGraph.name = Fixed Violations By Author
com.instantiations.assist.eclipse.fixedViolationsByAuthorGraph.description = \
	A graph of the number of fixed violations owned by each author.

################################################################################
#
# Metrics Support
#
################################################################################

metricSetLocationExtensionPointName = CodePro Metric Set Locations
metricsMetricExtensionPointName = CodePro Metrics
metricsGroupExtensionPointName = CodePro Metric Groups
metricsViewerExtensionPointName = CodePro Metric Viewers
metricsResultWriterExtensionPointName = CodePro Metric Result Writers

################################################################################
#
# Metric Groups
#
################################################################################

basicsMetricsGroup.name = Basics
basicsMetricsGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains metrics that compute basic information about the code.

complexityMetricsGroup.name = Complexity
complexityMetricsGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains metrics that measure the complexity of the code.

dependencyMetricsGroup.name = Dependency
dependencyMetricsGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains metrics that measure the responsibility, independency \
	and stability of a body of code.

halsteadMetricsGroup.name = Halstead
halsteadMetricsGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains metrics defined by the Halstead Software Science \
	metrics.

inheritanceMetricsGroup.name = Inheritance
inheritanceMetricsGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains metrics based on the inheritance structure of the code.

ratioMetricsGroup.name = Ratio
ratioMetricsGroup.description = \
	<b>Description</b>\
	<br/>\
	This group contains metrics based on the ratio of one kind of thing to \
	another.

################################################################################
#
# Metrics
#
################################################################################

abstractnessMetric.name = Abstractness
abstractnessMetric.description = \
	This is the ratio of the number of abstract types (abstract classes and \
	interfaces) in the target elements to the total number of types in the \
	target elements.\
	<p>\
	This metric includes a breakdown based on whether the type is abstract or \
	concrete.

afferentCouplingsMetric.name = Afferent Couplings
afferentCouplingsMetric.description = \
	This is the number of types outside the target elements that depend on \
	types inside the target elements.

averageBlockDepthMetric.name = Average Block Depth
averageBlockDepthMetric.description = \
	This is the average of the maximum block depth of each of the methods \
	defined in the target elements.

averageCyclomaticComplexityMetric.name = Average Cyclomatic Complexity
averageCyclomaticComplexityMetric.description = \
	This is the average of the cyclomatic complexity of each of the methods \
	defined in the target elements. The cyclomatic complexity of a single \
	method is a measure of the number of distinct paths of execution within \
	the method. It is measured by adding the one path for the method with each \
	of the paths created by conditional statements (such as "if" and "for") \
	and operators (such as ?:).

averageDepthOfInheritanceHierarchyMetric.name = Average Depth of Inheritance Hierarchy
averageDepthOfInheritanceHierarchyMetric.description = \
	This is the average depth of the types defined in the target elements. The \
	depth of an interface is defined to be one (1). The depth of the class \
	java.lang.Object is defined to be one (1). The depth of any other class is \
	defined to be one more than the depth of its superclass.

averageConstructorsPerTypeMetric.name = Average Number of Constructors Per Type
averageConstructorsPerTypeMetric.description = \
	This is the average of the number of constructors defined for each type \
	defined in the target elements.\
	<p>\
	This metric includes details on the minimum and maximum numbers of \
	constructors defined by a type.

averageFieldsPerTypeMetric.name = Average Number of Fields Per Type
averageFieldsPerTypeMetric.description = \
	This is the average of the number of fields defined for each type defined \
	in the target elements.\
	<p>\
	This metric includes details on the minimum and maximum numbers of fields \
	defined by a type.

averageLinesOfCodePerMethodMetric.name = Average Lines Of Code Per Method
averageLinesOfCodePerMethodMetric.description = \
	This is the average of the number of lines of code in each method defined \
	in the target elements.\
	<p>\
	This metric includes details on the minimum and maximum numbers of lines \
	of code in any of the methods.

averageMethodsPerTypeMetric.name = Average Number of Methods Per Type
averageMethodsPerTypeMetric.description = \
	This is the average of the number of methods defined for each type defined \
	in the target elements.\
	<p>\
	This metric includes details on the minimum and maximum numbers of methods \
	defined by a type.

averageNumberOfSubtypesMetric.name = Average Number of Subtypes
averageNumberOfSubtypesMetric.description = \
	This is the average number of subtypes for the types defined in the target \
	elements.

averageParametersPerMethodMetric.name = Average Number of Parameters
averageParametersPerMethodMetric.description = \
	This is the average of the number of parameters defined for methods (but \
	not constructors) defined in the target elements.\
	<p>\
	This metric includes details on the minimum and maximum numbers of \
	parameters defined by a method. It also provides details on the number of \
	methods of each particular size.

averageStatmentsPerMethodMetric.name = Average Number of Statements
averageStatmentsPerMethodMetric.description = \
	This is the average of the number of statements in methods defined in the \
	target elements.\
	<p>\
	This metric includes details on the minimum and maximum numbers of \
	statements in a method.

commentsRatioMetric.name = Comments Ratio
commentsRatioMetric.description = \
	This is the ratio of comments to the number of lines of code. \
	Specifically, it is computed as the following:\
	<p>\
	\t[Number of Comments] / [Lines of Code]

distanceMetric.name = Distance
distanceMetric.description = \
	This is the normalized distance of the target elements from the main \
	sequence. The normalized distance is computed by\
	<p>\
	\t[Abstractness] + [Instability] - 1

efferentCouplingsMetric.name = Efferent Couplings
efferentCouplingsMetric.description = \
	This is the number of types inside the target elements that depend on \
	types outside the target elements.

halsteadDifficultyMetric.name = Difficulty
halsteadDifficultyMetric.description = \
	This is a measure of difficulty. It is computed by\
	<p>\
	\t([Number of Unique Operators] / 2) * ([Number of Operands] / [Number of Unique Operands])

halsteadEffortMetric.name = Effort
halsteadEffortMetric.description = \
	This is a measure of effort. It is computed by\
	<p>\
	\t[Difficulty] * [Program Volume]

halsteadNumberOfOperandsMetric.name = Number of Operands
halsteadNumberOfOperandsMetric.description = \
	This is the number of operands used in the scope.

halsteadNumberOfOperatorsMetric.name = Number of Operators
halsteadNumberOfOperatorsMetric.description = \
	This is the number of operators used in the scope.

halsteadNumberOfUniqueOperandsMetric.name = Number of Unique Operands
halsteadNumberOfUniqueOperandsMetric.description = \
	This is the number of unique operands used in the scope.

halsteadNumberOfUniqueOperatorsMetric.name = Number of Unique Operators
halsteadNumberOfUniqueOperatorsMetric.description = \
	This is the number of unique operators used in the scope.

halsteadProgramLengthMetric.name = Program Length
halsteadProgramLengthMetric.description = \
	This is an estimation of the size of the program. It is computed by\
	<p>\
	\t[Number of Operators] + [Number of Operands]

halsteadProgramVocabularyMetric.name = Program Vocabulary
halsteadProgramVocabularyMetric.description = \
	This is an estimation of the size of the program's vocabulary (the number \
	of things that must be known to understand the program). It is computed by\
	<p>\
	\t[Number of Unique Operators] + [Number of Unique Operands]

halsteadProgramVolumeMetric.name = Program Volume
halsteadProgramVolumeMetric.description = \
	This is an estimation of the size of the program. It is computed by\
	<p>\
	\t[Program Length] * log2([Program Vocabulary])

instabilityMetric.name = Instability
instabilityMetric.description = \
	This is the amount of instability within the target elements. The \
	instability is computed by\
	<p>\
	\t[Efferent Couplings] / ([Afferent Couplings] + [Efferent Couplings])

linesOfCodeMetric.name = Lines of Code
linesOfCodeMetric.description = \
	This is a count of the number of lines in the target elements that contain \
	characters other than white space and comments.

numberOfCharactersMetric.name = Number of Characters
numberOfCharactersMetric.description = \
	This is a simple count of the number of characters in the source code \
	associated with the target elements. The source code associated with an \
	element includes any Javadoc comment that might precede the element.

numberOfCommentsMetric.name = Number of Comments
numberOfCommentsMetric.description = \
	This is a count of the number of comments. It is not a count of the number \
	of lines that contain comments; multi-line comments are counted as a \
	single line no matter how many lines they occupy.\
	<p>\
	This metric includes a breakdown based on the kind of comment: \
	end-of-line, multi-line, and Javadoc.

numberOfConstructorsMetric.name = Number of Constructors
numberOfConstructorsMetric.description = \
	This is a count of the number of constructors defined in the target \
	elements.\
	<p>\
	This metric includes a breakdown based on the visibility of the \
	constructor (public, package, protected or private).

numberOfFieldsMetric.name = Number of Fields
numberOfFieldsMetric.description = \
	This is a count of the number of fields defined in the target elements.\
	<p>\
	This metric includes a breakdown based on both the scope of the field \
	(static or instance) and the visibility of the field (public, package, \
	protected or private).

numberOfLinesMetric.name = Number of Lines
numberOfLinesMetric.description = \
	This is a simple count of the number of lines in the target elements, \
	including blank lines.

numberOfMethodsMetric.name = Number of Methods
numberOfMethodsMetric.description = \
	This is a count of the number of methods defined in the target elements.\
	<p>\
	This metric includes a breakdown based on both the scope of the method \
	(static or instance) and the visibility of the method (public, package, \
	protected or private).

numberOfPackagesMetric.name = Number of Packages
numberOfPackagesMetric.description = \
	This is a count of the number of packages defined in the target elements.

numberOfSemicolonsMetric.name = Number of Semicolons
numberOfSemicolonsMetric.description = \
	This is a simple count of the number of semicolons in the source code \
	associated with the target elements. Semicolons occurring within comments \
	are not counted, but those at the end of package and import declarations \
	are.

numberOfTypesMetric.name = Number of Types
numberOfTypesMetric.description = \
	This is a count of the number of types defined in the target elements.\
	<p>\
	This metric includes a breakdown based on whether the type is a class or \
	an interface.

weightedMethodsMetric.name = Weighted Methods
weightedMethodsMetric.description = \
	This is the sum of the cyclomatic complexity of each of the methods \
	defined in the target elements. The cyclomatic complexity of a single \
	method is a measure of the number of distinct paths of execution within \
	the method. It is measured by adding the one path for the method with each \
	of the paths created by conditional statements (such as "if" and "for") \
	and operators (such as ?:).

################################################################################
#
# Metric Result Writer
#
################################################################################

metrics_textResultWriterName = Text
metrics_tabSeparatedDataResultWriterName = Tab Separated Data
metrics_commaSeparatedDataResultWriterName = Comma Separated Data
metrics_htmlResultWriterName = HTML
metrics_xmlResultWriterName = XML

build = 201009141335
