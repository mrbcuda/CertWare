/**
 * Copyright (c) 2010 Object Management Group (SMM metamodel)
 * Copyright (c) 2010 Castor Technology (ecore from schema, Eclipse GMT MODISCO)
 * Kestrel Technology LLC (modified generated models) 
 */
package net.certware.argument.smm.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.certware.argument.smm.util.SmmAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SmmItemProviderAdapterFactory extends SmmAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SmmItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.smm.SmmModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SmmModelItemProvider smmModelItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.smm.SmmModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSmmModelAdapter() {
		if (smmModelItemProvider == null) {
			smmModelItemProvider = new SmmModelItemProvider(this);
		}

		return smmModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.smm.CategoryRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CategoryRelationshipItemProvider categoryRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.smm.CategoryRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCategoryRelationshipAdapter() {
		if (categoryRelationshipItemProvider == null) {
			categoryRelationshipItemProvider = new CategoryRelationshipItemProvider(this);
		}

		return categoryRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.smm.Category} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CategoryItemProvider categoryItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.smm.Category}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCategoryAdapter() {
		if (categoryItemProvider == null) {
			categoryItemProvider = new CategoryItemProvider(this);
		}

		return categoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.smm.Observation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObservationItemProvider observationItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.smm.Observation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObservationAdapter() {
		if (observationItemProvider == null) {
			observationItemProvider = new ObservationItemProvider(this);
		}

		return observationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.smm.MeasureRelationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeasureRelationshipItemProvider measureRelationshipItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.smm.MeasureRelationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeasureRelationshipAdapter() {
		if (measureRelationshipItemProvider == null) {
			measureRelationshipItemProvider = new MeasureRelationshipItemProvider(this);
		}

		return measureRelationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.smm.DimensionalMeasure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DimensionalMeasureItemProvider dimensionalMeasureItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.smm.DimensionalMeasure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDimensionalMeasureAdapter() {
		if (dimensionalMeasureItemProvider == null) {
			dimensionalMeasureItemProvider = new DimensionalMeasureItemProvider(this);
		}

		return dimensionalMeasureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.smm.Ranking} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RankingItemProvider rankingItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.smm.Ranking}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRankingAdapter() {
		if (rankingItemProvider == null) {
			rankingItemProvider = new RankingItemProvider(this);
		}

		return rankingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.smm.RankingInterval} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RankingIntervalItemProvider rankingIntervalItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.smm.RankingInterval}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRankingIntervalAdapter() {
		if (rankingIntervalItemProvider == null) {
			rankingIntervalItemProvider = new RankingIntervalItemProvider(this);
		}

		return rankingIntervalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.smm.Characteristic} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CharacteristicItemProvider characteristicItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.smm.Characteristic}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCharacteristicAdapter() {
		if (characteristicItemProvider == null) {
			characteristicItemProvider = new CharacteristicItemProvider(this);
		}

		return characteristicItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.smm.Scope} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScopeItemProvider scopeItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.smm.Scope}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScopeAdapter() {
		if (scopeItemProvider == null) {
			scopeItemProvider = new ScopeItemProvider(this);
		}

		return scopeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.smm.BinaryMeasure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryMeasureItemProvider binaryMeasureItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.smm.BinaryMeasure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryMeasureAdapter() {
		if (binaryMeasureItemProvider == null) {
			binaryMeasureItemProvider = new BinaryMeasureItemProvider(this);
		}

		return binaryMeasureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.smm.DirectMeasure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DirectMeasureItemProvider directMeasureItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.smm.DirectMeasure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDirectMeasureAdapter() {
		if (directMeasureItemProvider == null) {
			directMeasureItemProvider = new DirectMeasureItemProvider(this);
		}

		return directMeasureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.smm.CollectiveMeasure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CollectiveMeasureItemProvider collectiveMeasureItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.smm.CollectiveMeasure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCollectiveMeasureAdapter() {
		if (collectiveMeasureItemProvider == null) {
			collectiveMeasureItemProvider = new CollectiveMeasureItemProvider(this);
		}

		return collectiveMeasureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.smm.NamedMeasure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamedMeasureItemProvider namedMeasureItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.smm.NamedMeasure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNamedMeasureAdapter() {
		if (namedMeasureItemProvider == null) {
			namedMeasureItemProvider = new NamedMeasureItemProvider(this);
		}

		return namedMeasureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.smm.RescaledMeasure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RescaledMeasureItemProvider rescaledMeasureItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.smm.RescaledMeasure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRescaledMeasureAdapter() {
		if (rescaledMeasureItemProvider == null) {
			rescaledMeasureItemProvider = new RescaledMeasureItemProvider(this);
		}

		return rescaledMeasureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.smm.RatioMeasure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RatioMeasureItemProvider ratioMeasureItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.smm.RatioMeasure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRatioMeasureAdapter() {
		if (ratioMeasureItemProvider == null) {
			ratioMeasureItemProvider = new RatioMeasureItemProvider(this);
		}

		return ratioMeasureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.smm.Counting} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CountingItemProvider countingItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.smm.Counting}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCountingAdapter() {
		if (countingItemProvider == null) {
			countingItemProvider = new CountingItemProvider(this);
		}

		return countingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.smm.Grade} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GradeItemProvider gradeItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.smm.Grade}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGradeAdapter() {
		if (gradeItemProvider == null) {
			gradeItemProvider = new GradeItemProvider(this);
		}

		return gradeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.smm.DirectMeasurement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DirectMeasurementItemProvider directMeasurementItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.smm.DirectMeasurement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDirectMeasurementAdapter() {
		if (directMeasurementItemProvider == null) {
			directMeasurementItemProvider = new DirectMeasurementItemProvider(this);
		}

		return directMeasurementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.smm.Count} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CountItemProvider countItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.smm.Count}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCountAdapter() {
		if (countItemProvider == null) {
			countItemProvider = new CountItemProvider(this);
		}

		return countItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.smm.CollectiveMeasurement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CollectiveMeasurementItemProvider collectiveMeasurementItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.smm.CollectiveMeasurement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCollectiveMeasurementAdapter() {
		if (collectiveMeasurementItemProvider == null) {
			collectiveMeasurementItemProvider = new CollectiveMeasurementItemProvider(this);
		}

		return collectiveMeasurementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.smm.AggregatedMeasurement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AggregatedMeasurementItemProvider aggregatedMeasurementItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.smm.AggregatedMeasurement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAggregatedMeasurementAdapter() {
		if (aggregatedMeasurementItemProvider == null) {
			aggregatedMeasurementItemProvider = new AggregatedMeasurementItemProvider(this);
		}

		return aggregatedMeasurementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.smm.NamedMeasurement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamedMeasurementItemProvider namedMeasurementItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.smm.NamedMeasurement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNamedMeasurementAdapter() {
		if (namedMeasurementItemProvider == null) {
			namedMeasurementItemProvider = new NamedMeasurementItemProvider(this);
		}

		return namedMeasurementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.smm.ReScaledMeasurement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReScaledMeasurementItemProvider reScaledMeasurementItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.smm.ReScaledMeasurement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReScaledMeasurementAdapter() {
		if (reScaledMeasurementItemProvider == null) {
			reScaledMeasurementItemProvider = new ReScaledMeasurementItemProvider(this);
		}

		return reScaledMeasurementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.smm.Attribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeItemProvider attributeItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.smm.Attribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeAdapter() {
		if (attributeItemProvider == null) {
			attributeItemProvider = new AttributeItemProvider(this);
		}

		return attributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.smm.Annotation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnnotationItemProvider annotationItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.smm.Annotation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnnotationAdapter() {
		if (annotationItemProvider == null) {
			annotationItemProvider = new AnnotationItemProvider(this);
		}

		return annotationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (smmModelItemProvider != null) smmModelItemProvider.dispose();
		if (categoryRelationshipItemProvider != null) categoryRelationshipItemProvider.dispose();
		if (categoryItemProvider != null) categoryItemProvider.dispose();
		if (observationItemProvider != null) observationItemProvider.dispose();
		if (measureRelationshipItemProvider != null) measureRelationshipItemProvider.dispose();
		if (dimensionalMeasureItemProvider != null) dimensionalMeasureItemProvider.dispose();
		if (rankingItemProvider != null) rankingItemProvider.dispose();
		if (rankingIntervalItemProvider != null) rankingIntervalItemProvider.dispose();
		if (characteristicItemProvider != null) characteristicItemProvider.dispose();
		if (scopeItemProvider != null) scopeItemProvider.dispose();
		if (binaryMeasureItemProvider != null) binaryMeasureItemProvider.dispose();
		if (directMeasureItemProvider != null) directMeasureItemProvider.dispose();
		if (collectiveMeasureItemProvider != null) collectiveMeasureItemProvider.dispose();
		if (namedMeasureItemProvider != null) namedMeasureItemProvider.dispose();
		if (rescaledMeasureItemProvider != null) rescaledMeasureItemProvider.dispose();
		if (ratioMeasureItemProvider != null) ratioMeasureItemProvider.dispose();
		if (countingItemProvider != null) countingItemProvider.dispose();
		if (gradeItemProvider != null) gradeItemProvider.dispose();
		if (directMeasurementItemProvider != null) directMeasurementItemProvider.dispose();
		if (countItemProvider != null) countItemProvider.dispose();
		if (collectiveMeasurementItemProvider != null) collectiveMeasurementItemProvider.dispose();
		if (aggregatedMeasurementItemProvider != null) aggregatedMeasurementItemProvider.dispose();
		if (namedMeasurementItemProvider != null) namedMeasurementItemProvider.dispose();
		if (reScaledMeasurementItemProvider != null) reScaledMeasurementItemProvider.dispose();
		if (attributeItemProvider != null) attributeItemProvider.dispose();
		if (annotationItemProvider != null) annotationItemProvider.dispose();
	}

}
