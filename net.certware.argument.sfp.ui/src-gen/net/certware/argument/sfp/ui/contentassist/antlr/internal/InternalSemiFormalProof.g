/*
* generated by Xtext
*/
grammar InternalSemiFormalProof;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package net.certware.argument.sfp.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package net.certware.argument.sfp.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import net.certware.argument.sfp.services.SemiFormalProofGrammarAccess;

}

@parser::members {
 
 	private SemiFormalProofGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(SemiFormalProofGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleProof
entryRuleProof 
:
{ before(grammarAccess.getProofRule()); }
	 ruleProof
{ after(grammarAccess.getProofRule()); } 
	 EOF 
;

// Rule Proof
ruleProof
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProofAccess().getGroup()); }
(rule__Proof__Group__0)
{ after(grammarAccess.getProofAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleText
entryRuleText 
:
{ before(grammarAccess.getTextRule()); }
	 ruleText
{ after(grammarAccess.getTextRule()); } 
	 EOF 
;

// Rule Text
ruleText
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTextAccess().getSTRINGTerminalRuleCall()); }
	RULE_STRING
{ after(grammarAccess.getTextAccess().getSTRINGTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJustifications
entryRuleJustifications 
:
{ before(grammarAccess.getJustificationsRule()); }
	 ruleJustifications
{ after(grammarAccess.getJustificationsRule()); } 
	 EOF 
;

// Rule Justifications
ruleJustifications
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJustificationsAccess().getGroup()); }
(rule__Justifications__Group__0)
{ after(grammarAccess.getJustificationsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJustification
entryRuleJustification 
:
{ before(grammarAccess.getJustificationRule()); }
	 ruleJustification
{ after(grammarAccess.getJustificationRule()); } 
	 EOF 
;

// Rule Justification
ruleJustification
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJustificationAccess().getAlternatives()); }
(rule__Justification__Alternatives)
{ after(grammarAccess.getJustificationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQuotedAssertion
entryRuleQuotedAssertion 
:
{ before(grammarAccess.getQuotedAssertionRule()); }
	 ruleQuotedAssertion
{ after(grammarAccess.getQuotedAssertionRule()); } 
	 EOF 
;

// Rule QuotedAssertion
ruleQuotedAssertion
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQuotedAssertionAccess().getGroup()); }
(rule__QuotedAssertion__Group__0)
{ after(grammarAccess.getQuotedAssertionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEntailment
entryRuleEntailment 
:
{ before(grammarAccess.getEntailmentRule()); }
	 ruleEntailment
{ after(grammarAccess.getEntailmentRule()); } 
	 EOF 
;

// Rule Entailment
ruleEntailment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEntailmentAccess().getGroup()); }
(rule__Entailment__Group__0)
{ after(grammarAccess.getEntailmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConjunction
entryRuleConjunction 
:
{ before(grammarAccess.getConjunctionRule()); }
	 ruleConjunction
{ after(grammarAccess.getConjunctionRule()); } 
	 EOF 
;

// Rule Conjunction
ruleConjunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConjunctionAccess().getAlternatives()); }
(rule__Conjunction__Alternatives)
{ after(grammarAccess.getConjunctionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumeral
entryRuleNumeral 
:
{ before(grammarAccess.getNumeralRule()); }
	 ruleNumeral
{ after(grammarAccess.getNumeralRule()); } 
	 EOF 
;

// Rule Numeral
ruleNumeral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumeralAccess().getINTTerminalRuleCall()); }
	RULE_INT
{ after(grammarAccess.getNumeralAccess().getINTTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProofSteps
entryRuleProofSteps 
:
{ before(grammarAccess.getProofStepsRule()); }
	 ruleProofSteps
{ after(grammarAccess.getProofStepsRule()); } 
	 EOF 
;

// Rule ProofSteps
ruleProofSteps
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProofStepsAccess().getAlternatives()); }
(rule__ProofSteps__Alternatives)
{ after(grammarAccess.getProofStepsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatement
entryRuleStatement 
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getGroup()); }
(rule__Statement__Group__0)
{ after(grammarAccess.getStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValidation
entryRuleValidation 
:
{ before(grammarAccess.getValidationRule()); }
	 ruleValidation
{ after(grammarAccess.getValidationRule()); } 
	 EOF 
;

// Rule Validation
ruleValidation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValidationAccess().getGroup()); }
(rule__Validation__Group__0)
{ after(grammarAccess.getValidationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule ValidationKind
ruleValidationKind
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValidationKindAccess().getAlternatives()); }
(rule__ValidationKind__Alternatives)
{ after(grammarAccess.getValidationKindAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Justification__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJustificationAccess().getGroup_0()); }
(rule__Justification__Group_0__0)
{ after(grammarAccess.getJustificationAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getJustificationAccess().getEpsilonAssignment_1()); }
(rule__Justification__EpsilonAssignment_1)
{ after(grammarAccess.getJustificationAccess().getEpsilonAssignment_1()); }
)

    |(
{ before(grammarAccess.getJustificationAccess().getNumeralAssignment_2()); }
(rule__Justification__NumeralAssignment_2)
{ after(grammarAccess.getJustificationAccess().getNumeralAssignment_2()); }
)

    |(
{ before(grammarAccess.getJustificationAccess().getAssertionAssignment_3()); }
(rule__Justification__AssertionAssignment_3)
{ after(grammarAccess.getJustificationAccess().getAssertionAssignment_3()); }
)

    |(
{ before(grammarAccess.getJustificationAccess().getEntailmentAssignment_4()); }
(rule__Justification__EntailmentAssignment_4)
{ after(grammarAccess.getJustificationAccess().getEntailmentAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getGroup_0()); }
(rule__Conjunction__Group_0__0)
{ after(grammarAccess.getConjunctionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getConjunctionAccess().getLhsAssignment_1()); }
(rule__Conjunction__LhsAssignment_1)
{ after(grammarAccess.getConjunctionAccess().getLhsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProofSteps__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProofStepsAccess().getGroup_0()); }
(rule__ProofSteps__Group_0__0)
{ after(grammarAccess.getProofStepsAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getProofStepsAccess().getEpsilonAssignment_1()); }
(rule__ProofSteps__EpsilonAssignment_1)
{ after(grammarAccess.getProofStepsAccess().getEpsilonAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValidationKind__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValidationKindAccess().getUNKNOWNEnumLiteralDeclaration_0()); }
(	'unknown' 
)
{ after(grammarAccess.getValidationKindAccess().getUNKNOWNEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getValidationKindAccess().getVALIDEnumLiteralDeclaration_1()); }
(	'valid' 
)
{ after(grammarAccess.getValidationKindAccess().getVALIDEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getValidationKindAccess().getINVALIDEnumLiteralDeclaration_2()); }
(	'invalid' 
)
{ after(grammarAccess.getValidationKindAccess().getINVALIDEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Proof__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Proof__Group__0__Impl
	rule__Proof__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Proof__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProofAccess().getTheoremKeyword_0()); }

	'Theorem' 

{ after(grammarAccess.getProofAccess().getTheoremKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Proof__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Proof__Group__1__Impl
	rule__Proof__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Proof__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProofAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getProofAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Proof__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Proof__Group__2__Impl
	rule__Proof__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Proof__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProofAccess().getTitleAssignment_2()); }
(rule__Proof__TitleAssignment_2)
{ after(grammarAccess.getProofAccess().getTitleAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Proof__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Proof__Group__3__Impl
	rule__Proof__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Proof__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProofAccess().getLeftParenthesisKeyword_3()); }

	'(' 

{ after(grammarAccess.getProofAccess().getLeftParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Proof__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Proof__Group__4__Impl
	rule__Proof__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Proof__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProofAccess().getJustificationsAssignment_4()); }
(rule__Proof__JustificationsAssignment_4)
{ after(grammarAccess.getProofAccess().getJustificationsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Proof__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Proof__Group__5__Impl
	rule__Proof__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Proof__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProofAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getProofAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Proof__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Proof__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Proof__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProofAccess().getProofStepsAssignment_6()); }
(rule__Proof__ProofStepsAssignment_6)
{ after(grammarAccess.getProofAccess().getProofStepsAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Justifications__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Justifications__Group__0__Impl
	rule__Justifications__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Justifications__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJustificationsAccess().getJustificationsAction_0()); }
(

)
{ after(grammarAccess.getJustificationsAccess().getJustificationsAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Justifications__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Justifications__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Justifications__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJustificationsAccess().getGroup_1()); }
(rule__Justifications__Group_1__0)?
{ after(grammarAccess.getJustificationsAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Justifications__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Justifications__Group_1__0__Impl
	rule__Justifications__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Justifications__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJustificationsAccess().getJustificationsAssignment_1_0()); }
(rule__Justifications__JustificationsAssignment_1_0)
{ after(grammarAccess.getJustificationsAccess().getJustificationsAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Justifications__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Justifications__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Justifications__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJustificationsAccess().getGroup_1_1()); }
(rule__Justifications__Group_1_1__0)*
{ after(grammarAccess.getJustificationsAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Justifications__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Justifications__Group_1_1__0__Impl
	rule__Justifications__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Justifications__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJustificationsAccess().getCommaKeyword_1_1_0()); }

	',' 

{ after(grammarAccess.getJustificationsAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Justifications__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Justifications__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Justifications__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJustificationsAccess().getJustificationsAssignment_1_1_1()); }
(rule__Justifications__JustificationsAssignment_1_1_1)
{ after(grammarAccess.getJustificationsAccess().getJustificationsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Justification__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Justification__Group_0__0__Impl
	rule__Justification__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Justification__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJustificationAccess().getJustificationAction_0_0()); }
(

)
{ after(grammarAccess.getJustificationAccess().getJustificationAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Justification__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Justification__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Justification__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJustificationAccess().getHypothesisAssignment_0_1()); }
(rule__Justification__HypothesisAssignment_0_1)
{ after(grammarAccess.getJustificationAccess().getHypothesisAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QuotedAssertion__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuotedAssertion__Group__0__Impl
	rule__QuotedAssertion__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QuotedAssertion__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuotedAssertionAccess().getQuotedAssertionAction_0()); }
(

)
{ after(grammarAccess.getQuotedAssertionAccess().getQuotedAssertionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QuotedAssertion__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QuotedAssertion__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QuotedAssertion__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuotedAssertionAccess().getTextAssignment_1()); }
(rule__QuotedAssertion__TextAssignment_1)
{ after(grammarAccess.getQuotedAssertionAccess().getTextAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Entailment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entailment__Group__0__Impl
	rule__Entailment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Entailment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntailmentAccess().getEntailmentAction_0()); }
(

)
{ after(grammarAccess.getEntailmentAccess().getEntailmentAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entailment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entailment__Group__1__Impl
	rule__Entailment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Entailment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntailmentAccess().getHeadAssignment_1()); }
(rule__Entailment__HeadAssignment_1)
{ after(grammarAccess.getEntailmentAccess().getHeadAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entailment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entailment__Group__2__Impl
	rule__Entailment__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Entailment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntailmentAccess().getHyphenMinusGreaterThanSignKeyword_2()); }

	'->' 

{ after(grammarAccess.getEntailmentAccess().getHyphenMinusGreaterThanSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Entailment__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Entailment__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Entailment__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntailmentAccess().getTailAssignment_3()); }
(rule__Entailment__TailAssignment_3)
{ after(grammarAccess.getEntailmentAccess().getTailAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Conjunction__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group_0__0__Impl
	rule__Conjunction__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getConjunctionAction_0_0()); }
(

)
{ after(grammarAccess.getConjunctionAccess().getConjunctionAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conjunction__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group_0__1__Impl
	rule__Conjunction__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getLhsAssignment_0_1()); }
(rule__Conjunction__LhsAssignment_0_1)
{ after(grammarAccess.getConjunctionAccess().getLhsAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conjunction__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group_0__2__Impl
	rule__Conjunction__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getCircumflexAccentKeyword_0_2()); }

	'^' 

{ after(grammarAccess.getConjunctionAccess().getCircumflexAccentKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conjunction__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getRhsAssignment_0_3()); }
(rule__Conjunction__RhsAssignment_0_3)
{ after(grammarAccess.getConjunctionAccess().getRhsAssignment_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ProofSteps__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProofSteps__Group_0__0__Impl
	rule__ProofSteps__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProofSteps__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProofStepsAccess().getProofStepsAction_0_0()); }
(

)
{ after(grammarAccess.getProofStepsAccess().getProofStepsAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProofSteps__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProofSteps__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProofSteps__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProofStepsAccess().getGroup_0_1()); }
(rule__ProofSteps__Group_0_1__0)?
{ after(grammarAccess.getProofStepsAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ProofSteps__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProofSteps__Group_0_1__0__Impl
	rule__ProofSteps__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ProofSteps__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProofStepsAccess().getStatementsAssignment_0_1_0()); }
(rule__ProofSteps__StatementsAssignment_0_1_0)
{ after(grammarAccess.getProofStepsAccess().getStatementsAssignment_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ProofSteps__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ProofSteps__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ProofSteps__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProofStepsAccess().getStatementsAssignment_0_1_1()); }
(rule__ProofSteps__StatementsAssignment_0_1_1)*
{ after(grammarAccess.getProofStepsAccess().getStatementsAssignment_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Statement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group__0__Impl
	rule__Statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getStatementAction_0()); }
(

)
{ after(grammarAccess.getStatementAccess().getStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group__1__Impl
	rule__Statement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getIdAssignment_1()); }
(rule__Statement__IdAssignment_1)
{ after(grammarAccess.getStatementAccess().getIdAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group__2__Impl
	rule__Statement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getFullStopKeyword_2()); }

	'.' 

{ after(grammarAccess.getStatementAccess().getFullStopKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group__3__Impl
	rule__Statement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getStatementAssignment_3()); }
(rule__Statement__StatementAssignment_3)
{ after(grammarAccess.getStatementAccess().getStatementAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group__4__Impl
	rule__Statement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getLeftParenthesisKeyword_4()); }

	'(' 

{ after(grammarAccess.getStatementAccess().getLeftParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group__5__Impl
	rule__Statement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getJustificationAssignment_5()); }
(rule__Statement__JustificationAssignment_5)
{ after(grammarAccess.getStatementAccess().getJustificationAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group__6__Impl
	rule__Statement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getRightParenthesisKeyword_6()); }

	')' 

{ after(grammarAccess.getStatementAccess().getRightParenthesisKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getGroup_7()); }
(rule__Statement__Group_7__0)?
{ after(grammarAccess.getStatementAccess().getGroup_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__Statement__Group_7__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group_7__0__Impl
	rule__Statement__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_7__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getLeftCurlyBracketKeyword_7_0()); }

	'{' 

{ after(grammarAccess.getStatementAccess().getLeftCurlyBracketKeyword_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group_7__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group_7__1__Impl
	rule__Statement__Group_7__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_7__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getValidationAssignment_7_1()); }
(rule__Statement__ValidationAssignment_7_1)
{ after(grammarAccess.getStatementAccess().getValidationAssignment_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group_7__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group_7__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_7__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getRightCurlyBracketKeyword_7_2()); }

	'}' 

{ after(grammarAccess.getStatementAccess().getRightCurlyBracketKeyword_7_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Validation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Validation__Group__0__Impl
	rule__Validation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Validation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValidationAccess().getValidationAction_0()); }
(

)
{ after(grammarAccess.getValidationAccess().getValidationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Validation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Validation__Group__1__Impl
	rule__Validation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Validation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValidationAccess().getAuthorAssignment_1()); }
(rule__Validation__AuthorAssignment_1)
{ after(grammarAccess.getValidationAccess().getAuthorAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Validation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Validation__Group__2__Impl
	rule__Validation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Validation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValidationAccess().getTimeStampAssignment_2()); }
(rule__Validation__TimeStampAssignment_2)?
{ after(grammarAccess.getValidationAccess().getTimeStampAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Validation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Validation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Validation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValidationAccess().getStateAssignment_3()); }
(rule__Validation__StateAssignment_3)
{ after(grammarAccess.getValidationAccess().getStateAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__Proof__TitleAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProofAccess().getTitleTextParserRuleCall_2_0()); }
	ruleText{ after(grammarAccess.getProofAccess().getTitleTextParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Proof__JustificationsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProofAccess().getJustificationsJustificationsParserRuleCall_4_0()); }
	ruleJustifications{ after(grammarAccess.getProofAccess().getJustificationsJustificationsParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Proof__ProofStepsAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProofAccess().getProofStepsProofStepsParserRuleCall_6_0()); }
	ruleProofSteps{ after(grammarAccess.getProofAccess().getProofStepsProofStepsParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Justifications__JustificationsAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJustificationsAccess().getJustificationsJustificationParserRuleCall_1_0_0()); }
	ruleJustification{ after(grammarAccess.getJustificationsAccess().getJustificationsJustificationParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Justifications__JustificationsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJustificationsAccess().getJustificationsJustificationParserRuleCall_1_1_1_0()); }
	ruleJustification{ after(grammarAccess.getJustificationsAccess().getJustificationsJustificationParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Justification__HypothesisAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJustificationAccess().getHypothesisHypothesisKeyword_0_1_0()); }
(
{ before(grammarAccess.getJustificationAccess().getHypothesisHypothesisKeyword_0_1_0()); }

	'hypothesis' 

{ after(grammarAccess.getJustificationAccess().getHypothesisHypothesisKeyword_0_1_0()); }
)

{ after(grammarAccess.getJustificationAccess().getHypothesisHypothesisKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Justification__EpsilonAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJustificationAccess().getEpsilonEpsilonKeyword_1_0()); }
(
{ before(grammarAccess.getJustificationAccess().getEpsilonEpsilonKeyword_1_0()); }

	'epsilon' 

{ after(grammarAccess.getJustificationAccess().getEpsilonEpsilonKeyword_1_0()); }
)

{ after(grammarAccess.getJustificationAccess().getEpsilonEpsilonKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Justification__NumeralAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJustificationAccess().getNumeralNumeralParserRuleCall_2_0()); }
	ruleNumeral{ after(grammarAccess.getJustificationAccess().getNumeralNumeralParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Justification__AssertionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJustificationAccess().getAssertionQuotedAssertionParserRuleCall_3_0()); }
	ruleQuotedAssertion{ after(grammarAccess.getJustificationAccess().getAssertionQuotedAssertionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Justification__EntailmentAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJustificationAccess().getEntailmentEntailmentParserRuleCall_4_0()); }
	ruleEntailment{ after(grammarAccess.getJustificationAccess().getEntailmentEntailmentParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QuotedAssertion__TextAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQuotedAssertionAccess().getTextTextParserRuleCall_1_0()); }
	ruleText{ after(grammarAccess.getQuotedAssertionAccess().getTextTextParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Entailment__HeadAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntailmentAccess().getHeadConjunctionParserRuleCall_1_0()); }
	ruleConjunction{ after(grammarAccess.getEntailmentAccess().getHeadConjunctionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Entailment__TailAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEntailmentAccess().getTailNumeralParserRuleCall_3_0()); }
	ruleNumeral{ after(grammarAccess.getEntailmentAccess().getTailNumeralParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__LhsAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getLhsNumeralParserRuleCall_0_1_0()); }
	ruleNumeral{ after(grammarAccess.getConjunctionAccess().getLhsNumeralParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__RhsAssignment_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getRhsConjunctionParserRuleCall_0_3_0()); }
	ruleConjunction{ after(grammarAccess.getConjunctionAccess().getRhsConjunctionParserRuleCall_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__LhsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getLhsNumeralParserRuleCall_1_0()); }
	ruleNumeral{ after(grammarAccess.getConjunctionAccess().getLhsNumeralParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProofSteps__StatementsAssignment_0_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProofStepsAccess().getStatementsStatementParserRuleCall_0_1_0_0()); }
	ruleStatement{ after(grammarAccess.getProofStepsAccess().getStatementsStatementParserRuleCall_0_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProofSteps__StatementsAssignment_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProofStepsAccess().getStatementsStatementParserRuleCall_0_1_1_0()); }
	ruleStatement{ after(grammarAccess.getProofStepsAccess().getStatementsStatementParserRuleCall_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProofSteps__EpsilonAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProofStepsAccess().getEpsilonEpsilonKeyword_1_0()); }
(
{ before(grammarAccess.getProofStepsAccess().getEpsilonEpsilonKeyword_1_0()); }

	'epsilon' 

{ after(grammarAccess.getProofStepsAccess().getEpsilonEpsilonKeyword_1_0()); }
)

{ after(grammarAccess.getProofStepsAccess().getEpsilonEpsilonKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__IdAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getIdNumeralParserRuleCall_1_0()); }
	ruleNumeral{ after(grammarAccess.getStatementAccess().getIdNumeralParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__StatementAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getStatementTextParserRuleCall_3_0()); }
	ruleText{ after(grammarAccess.getStatementAccess().getStatementTextParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__JustificationAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getJustificationJustificationsParserRuleCall_5_0()); }
	ruleJustifications{ after(grammarAccess.getStatementAccess().getJustificationJustificationsParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__ValidationAssignment_7_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getValidationValidationParserRuleCall_7_1_0()); }
	ruleValidation{ after(grammarAccess.getStatementAccess().getValidationValidationParserRuleCall_7_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Validation__AuthorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValidationAccess().getAuthorTextParserRuleCall_1_0()); }
	ruleText{ after(grammarAccess.getValidationAccess().getAuthorTextParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Validation__TimeStampAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValidationAccess().getTimeStampTextParserRuleCall_2_0()); }
	ruleText{ after(grammarAccess.getValidationAccess().getTimeStampTextParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Validation__StateAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValidationAccess().getStateValidationKindEnumRuleCall_3_0()); }
	ruleValidationKind{ after(grammarAccess.getValidationAccess().getStateValidationKindEnumRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


