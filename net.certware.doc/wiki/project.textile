h1{color:red}. CertWare Project Notes

{toc:style=disc|maxLevel=3}

h2. Version History

h3. Version 1.0.0

* Created ARM Ecore model for arguments, then GSN, CAE, and EUR Ecore models each depending on ARM package.
* Created VCL Ecore model for check lists.
* Created argument pattern Ecore model. 
* Established basic target definition including Equinox and RCP.  
* Established basic feature definition and branding support.
* Established basic extended editing properties sheets using EEF.  
* Created Apache POI plugin library package for POI 3.6.
* Created import/export plugin library package for docx4j.
* Included EGit/JGit support in run configuration.  
* Unit test fragments created for ARM and GSN models.
* Navigator content contributions and filters for ARM, GSN, CAE, EUR, and VCL models.
* Example wizard using example resources contributed as fragments.
* Javadoc basic setup and Ant script saved. 
* Graphical editor for GSN models.

h2. Documentation

h3. Javadoc

Running the built-in Javadoc from Eclipse workbench with standard doclet.  Use @Project->Generate Javadoc@ to start the wizard.  Select all projects in the workspace.  Using additional VM and doclet tag settings as below:

* @-J-Xmx512M@ for the virtual machine.
* @-tag generated:a:"Generated" -tag generatedBy:a:"Generated by" -tag ordered:a:"Ordered" -tag model:a:"Model"@ for special tags.

The typical output goes to the local disk in a Javadoc directory.  The @overview.html@ file is kept in the @net.certware.doc@ project's @javadoc@ folder.  

h3. Meta-Models

* @ARM@ OMG argument metamodel and its Ecore implementation
* @CAE@ A claim-argument-evidence metamodel derived from the ARM metamodel.
* @GSN@ A goal structuring notation metamodel derived from the ARM metamodel.
* @EUR@ A EUROCONTROL notation metamodel derived from the ARM metamodel and reflecting the slight differences of this notation from GSN.  
* @VCL@ A verification checklist generic metamodel.

h4. Running the EEF Tools

The EEF model initialization occurs from the original @*.genmodel@ files in the model plugins.  
# The EEF model artifacts are redirected to the @EMF.Edit@ plugins, where a @model@ folder was created to contain the EEF models.  
# In the @*.eefgen@ model created, check that the generation directory property points to a source folder (typically @src-gen@) and that the builder identifies this as a source folder (e.g. @Build Path -> Use as Source Folder@).  
# Be sure to add the @model@ folder and the @src-gen@ folders to the plugin's @build.properties@ selections as necessary.  
# Add @org.eclipse.emf.eef.runtime@ as a plugin dependency, and in its properties select the re-export dependency option so that the @EMF.editor@ project can see it.  
# Run the @eefgen@ to create the new packages. 
# In the @EMF.edit@ plugin expose all of the packages in the runtime tab.  
# In the @EMF.editor@ plugin add the three standard provider extensions to enable the EEF contributions (see the generated plugin fragment for the class name references), then add individual extensions for the tabbed property parts for example.  
# In the generated editor file make it implement the tabbed properties interface @org.eclipse.ui.views.properties.tabbed.ITabbedPropertySheetPageContributor@ and implement the one method that returns the contributor ID as defined in the plugin extension. 
# Change the @PropertySheetPage@ reference type to @TabbedPropertySheetPage@ and modify the @getPropertySheetPage()@ method to work with the tabbed property sheet.  
# Add the double-click listener on the selection viewer.    

h4. Running the GMF Tools

The graphical model editors we create with the Eclipse Eugenia tools for GMF.  Use the following steps:
# Apply the Eugenia metadata annotations to the features in the desired Ecore metamodel files (e.g. add the tags to the @gsn.ecore@ file).
# From the @genmodel@ editor and root model node, run the corresponding @genmodel@ file to create the basic EMF model, edit, and editor support source and plugins.  
# From the explorer's context menu on the @ecore@ file run the @Eugenia -> Generate GMF tool, graph, and map models@ command.  This will yield the @gmfgraph@, @gmfmap@, and @gmftool@ files next to the @ecore@ file.  Note of the @gmfmap@ file does not appear there is something wrong with the model structure or annotations although no error messages are produced.
# From the explorer's context menu on the @gmfmap@ file run the @Create generator model command.@  This will run the wizard to create the @gmfgen@ file.  Note that the "Load" buttons should be used on each page and that the notification that the @genmodel@ file is out of date seems to be spurious.
# Edit the @gmfgen@ model's edit part properties to set Validation Enabled and Validation Decorators to @true@.  
# Edit the @gmfgen@ model's edit part properties to set the metamodel Display Name property to the diagram type, e.g. @GSN Argument Diagram@.  This value appears in the property sheet header when the argument canvas is selected.
# From the explorer's context menu on the @gmfgen@ file run the @Create diagram code@ command.  This will yield the @diagram@ plugin.  Ensure this new plugin is in the run configuration or deployment package.  

h4. Running the Xtext Tools

The Xtext DSL initialization is done with the wizard for creating Xtext projects from Ecore files.  Choose the EPackage desired and any of its imports so that the complete grammar is generated, and choose an appropriate entry rule because the default is not satisfactory.  For example, to create the GSN DSL choose both GSN and ARM packages, and choose the Goal class as the entry rule.  Some string type manipulation may need to be done in the resulting grammar specification.  Run the MWE generator on the @mwe2@ file.  No other changes seem to be necessary from the resulting artifacts.  

Exporting is done with @docx4j@ and a depth-first visitor pattern.  The visitor uses the EMF collections iterators and Ecore switch generated by the model generator.  


h3. Analysis Tools

To be worked.

h3. Workbench

h4. Editors

Several editors are contributed by the EMF generator models.   

h4. Views

None created to date apart from outline views accompanying editors.

h4. Navigator Contributions

* @net.certware.argument.arm.navigator@ Contributes content on model resource files and navigator filter.
* @net.certware.argument.cae.navigator@ Contributes content on model resource files and navigator filter.
* @net.certware.argument.gsn.navigator@ Contributes content on model resource files and navigator filter.
* @net.certware.argument.eur.navigator@ Contributes content on model resource files and navigator filter.
* @net.certware.verification.checklist.navigator@ Contributes content on verification checklist files and navigator filter.

h3. Plugins Summary

* @net.certware.argument.arm.*@ Argument model and editor support for OMG ARM.  The core plugin contains the model definition and generator.  The edit plugin contains the extended editing framework support models.  The editor plugin is modified to use extended editing features for property specification.  
* @net.certware.argument.arm.help@ Help content for ARM models and related workbench contributions.    
* @net.certware.argument.cae.*@ Argument model and editor support for CAE (ASCAD), built on ARM.  The core plugin contains the model definition and generator.  The edit plugin contains the extended editing framework support models.  The editor plugin is modified to use extended editing features for property specification. 
* @net.certware.argument.cae.help@ Help content for CAE models and related workbench contributions.    
* @net.certware.argument.eur.*@ Argument model and editor support for EUROCONTROL notation, built on ARM.  The core plugin contains the model definition and generator.  The edit plugin contains the extended editing framework support models.  The editor plugin is modified to use extended editing features for property specification.
* @net.certware.argument.eur.help@ Help content for EUROCONTROL models and related workbench contributions.    
* @net.certware.argument.gsn.*@ Argument model and editor support for GSN, built on ARM.  The core plugin contains the model definition and generator.  The edit plugin contains the extended editing framework support models.  The editor plugin is modified to use extended editing features for property specification.
* @net.certware.argument.gsn.help@ Help content for GSN models and related workbench contributions.    
* @net.certware.branding@ Project branding plugin for feature definition.
* @net.certware.core@ Core project content.
* @net.certware.core.ui@ Core project UI content including extension bases.  Includes interface constants files applying across the project source base.  
* @net.certware.doc@ General project to contain various documentation files including the wiki.
* @net.certware.example@ Example wizard and host plugin for contributing fragments.
* @net.certware.export@ Exporting model resources to other formats.  
* @net.certware.help@ Project help files, cheat sheets and dynamic context support.
* @net.certware.launch@ Launch configuration shared files.
* @net.certware.libs.doc@ Plugin packaging of docx4J 2.5 libraries.
* @net.certware.libs.poi@ Plugin packaging of Apache POI 3.6 libraries.
* @net.certware.target@ CertWare project target definition.
* @net.certware.update@ Update site definition project (currently unused).
* @net.certware.verification.checklist.*@ Verification model and editor support for generic check lists. The core plugin contains the model definition and generator.  The edit plugin contains the extended editing framework support models.  The editor plugin is modified to use extended editing features for property specification.


h3. File Names and Extensions

* @*.arm@ ARM model files
* @*.gsn@ GSN model files
* @*.cae@ CAE model files
* @*.eur@ EUROCONTROL model files
* @*.vcl@ Verification checklist model files

h3. Target Platform

* Eclipse Helios baseline
* EGit, requiring JGit as well
* Eclipse RCP delta pack for multi-platform exports.
* EasyMock 3.0 and JUnit 4.8.1 for testing

h3. Implementation Features

* EGit included in target platform and run configuration.  Provides Git distributed version control under the team menus.  
* Eclipse Extended Editing Framework (EEF) included for better property specification in EMF-generated editors.  

h2. Design and Implementation Notes

* Platform trace debugging features turned on for the @TBD@ plugin.

h2. Testing

h3. Unit Tests

* @net.certware.argument.arm.test@ fragment contains tests for ARM models.  Includes two structural tests for examples provided in the OMG standard.
* @net.certware.argument.gsn.test@ fragment contains tests for GSN models.  Includes one structural test for example provided in the OMG standard.
* @net.certware.argument.cae.test@ fragment contains tests for CAE models.  Includes one structural test for example provided in the OMG standard.

h3. Automated Analysis

* Uses CodePro AnalytiX for manually-generated code with full rule set.  Follow the majority of rule recommendations including Javadoc.
* FindBugs used on all code including automatically-generated code with nearly full rule set.  Some style rules disabled.       

h2. Update Site Publishing

Not yet configured.


