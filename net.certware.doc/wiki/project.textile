h1{color:red}. CertWare Project Notes

{toc:style=disc|maxLevel=3}

h2. Version History

h3. Version 1.0.0

* Created ARM Ecore model, then GSN and CAE Ecore models depending on ARM package.
* Established basic target definition including Equinox and RCP.  
* Established basic feature definition and branding support.
* Established basic extended editing properties sheets using EEF.  
* Created Apache POI plugin library package for POI 3.6.
* Created import/export plugin library package for docx4j.
* Included EGit/JGit support in run configuration.  
* Unit test fragments created for ARM and GSN models.

h2. Documentation


h3. Models

* @ARM@ OMG argument metamodel and its Ecore implementation
* @CAE@ A claim-argument-evidence metamodel derived from the ARM metamodel.
* @GSN@ A goal structuring notation metamodel derived from the ARM metamodel.

The EEF model initialization occurs from the original @*.genmodel@ files in the model plugins.  The EEF model artifacts are redirected to the @EMF.Edit@ plugins, where a @model@ folder was created to contain the EEF models.  In the @*.eefgen@ model created, check that the generation directory property points to a source folder (typically @src-gen@) and that the builder identifies this as a source folder (e.g. Build Path -> Use as Source Folder).  Be sure to add the @model@ folder and the @src-gen@ folders to the plugin's @build.properties@ selections as necessary.  Add @org.eclipse.emf.eef.runtime@ as a plugin dependency, and in its properties select the re-export dependency option so that the @EMF.editor@ project can see it.  In the @EMF.edit@ plugin expose all of the packages in the runtime tab.  In the @EMF.editor@ plugin add the three standard provider extensions to enable the EEF contributions (see the generated plugin fragment for the class name references), then add individual extensions for the tabbed property parts for example.  In the generated editor file make it implement the tabbed properties interface @org.eclipse.ui.views.properties.tabbed.ITabbedPropertySheetPageContributor@ and implement the one method that returns the contributor ID as defined in the plugin extension. Change the @PropertySheetPage@ reference type to @TabbedPropertySheetPage@ and modify the @getPropertySheetPage()@ method to work with the tabbed property sheet.  Add the double-click listener on the selection viewer.    

The Xtext DSL initialization is done with the wizard for creating Xtext projects from Ecore files.  Choose the EPackage desired and any of its imports so that the complete grammar is generated, and choose an appropriate entry rule because the default is not satisfactory.  For example, to create the GSN DSL choose both GSN and ARM packages, and choose the Goal class as the entry rule.  Some string type manipulation may need to be done in the resulting grammar specification.  Run the MWE generator on the @mwe2@ file.  No other changes seem to be necessary from the resulting artifacts.  

Exporting is done with @docx4j@ and a depth-first visitor pattern.  The visitor uses the EMF collections iterators and Ecore switch generated by the model generator.  

h3. Analysis Tools


h3. Workbench

h4. Editors

h4. Views

h4. Navigator Contributions

* @net.certware.argument.arm.navigator@ Contributes content on model resource files and navigator filter.
* @net.certware.argument.cae.navigator@ Contributes content on model resource files and navigator filter.
* @net.certware.argument.gsn.navigator@ Contributes content on model resource files and navigator filter.



h3. Plugins Summary

* @net.certware.argument.arm.*@ Argument model and editor support for OMG ARM.  The core plugin contains the model definition and generator.  The edit plugin contains the extended editing framework support models.  The editor plugin is modified to use extended editing features for property specification.  
* @net.certware.argument.cae.*@ Argument model and editor support for CAE (ASCAD), built on ARM.  The core plugin contains the model definition and generator.  The edit plugin contains the extended editing framework support models.  The editor plugin is modified to use extended editing features for property specification. 
* @net.certware.argument.gsn.*@ Argument model and editor support for GSN, built on ARM.  The core plugin contains the model definition and generator.  The edit plugin contains the extended editing framework support models.  The editor plugin is modified to use extended editing features for property specification. 
* @net.certware.branding@ Project branding plugin for feature definition.
* @net.certware.core@ Core project content.
* @net.certware.core.ui@ Core project UI content including extension bases.
* @net.certware.doc@ General project to contain various documentation files including the wiki.
* @net.certware.export@ Exporting model resources to other formats.  
* @net.certware.help@ Project help files, cheat sheets and dynamic support.
* @net.certware.launch@ Launch configuration shared files.
* @net.certware.libs.poi@ Plugin packaging of Apache POI 3.6 libraries.
* @net.certware.target@ CertWare project target definition.

h3. File Names

* @*.arm@ ARM model files
* @*.gsn@ GSN model files
* @*.cae@ CAE model files

h3. Target Platform

* Eclipse Helios baseline
* EGit, requiring JGit as well
* Eclipse RCP delta pack for multi-platform exports.
* EasyMock 3.0 for testing

h3. Implementation Features

* EGit included in target platform and run configuration.  Provides Git distributed version control under the team menus.  
* Eclipse Extended Editing Framework (EEF) included for better property specification in EMF-generated editors.  

h2. Design and Implementation Notes

* Platform trace debugging features turned on for the @TBD@ plugin.

h2. Testing

h3. Unit Tests

* @net.certware.argument.arm.test@ fragment contains tests for ARM models.  Includes two structural tests for examples provided in the OMG standard.
* @net.certware.argument.gsn.test@ fragment contains tests for GSN models.  Includes one structural test for example provided in the OMG standard.
* @net.certware.argument.cae.test@ fragment contains tests for CAE models.  Includes one structural test for example provided in the OMG standard.

h3. Automated Analysis

* Uses CodePro AnalytiX for manually-generated code with full rule set.  Follow the majority of rule recommendations including Javadoc.
* FindBugs used on all code including automatically-generated code with nearly full rule set.  Some style rules disabled.       

h2. Update Site Publishing




