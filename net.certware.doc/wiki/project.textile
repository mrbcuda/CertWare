h1{color:red}. CertWare Implementation and Integration Notes

{toc:style=disc|maxLevel=3}

<hr/>

h2. Version History

h3. Version 1.1.3

_Bugs Fixed_:
* Moved diagram preference page root into the CertWare preference page tree. 
* Moved diagram new wizard category to the CertWare UI category.  
_Enhancements_:
* Added the SRI Structured Argument Markup Language (AML) model, and generated edit support and editors for arguments of this type. _There may be editor issues with the mixed XML element types in this generated code.  A number of elements did not generate properly and manual repair was required._  A navigator contribution provides the explorer filter. 

h3. Version 1.1.2

_Bugs Fixed_:
* Removed Xtext-generated new project wizards for GSN DSL and CPN DSL.  
_Enhancements_:
* Changed content property feature of ARM generator model to multi-line, thereby creating multi-line properties for CAE, EUR, and GSN tree-based model editors using text areas with scroll bars.  Updated corresponding EEF framework parts to text areas.  

h3. Version 1.1.1

_Bugs Fixed_:
* Gather change orders allows empty lists on sum calculators.
* Proof theorem detail page with empty ID now sets text properly.

h3. Version 1.1

_Bugs Fixed_:
* Reassigned diagram model creation wizard to CertWare new wizard category.
* Fixed labels on EUZ plugin identities and branding plug-in. 
* Reassigned diagram preference pages to fall under the CertWare category.
* Added context and sub-strategy reference elements to the EUROCONTROL model strategy element.
_Enhancements_:
* Added API tooling setup to each project, adding nature and builder to support API report generation.  
* Expanded body text regions in all graphical shapes, allowing multi-line wrap display and editing.
* Expanded semi-formal proof support.  Added adapters for SFP outline view. Added active parser editor. Added validation for graph cycles and entailment. Added proof review wizard. Added dynamic help (first draft).  Added navigator contribution for SFP file types.
* Added planning module content for Microsoft Project MSPDI interchange model.
* Completed some string externalization.
* Updated to JGit 0.10.1 and EGit 0.10.1 for target platform and feature. Added these features to the CertWare parent.
* Added measurement model plugins.  The model is derived from the OMG Software Metrics Metamodel (1.0 beta 1, March 2009) XML schema, adopting and modifying an EMF implementation from Eclipse GMT MODISCO.
* Added CertWare Planning Notation (CPN) DSL for assigning planning data mapping onto ARM Metamodel.  Xtext project generated editor for DSL.  Validation included for editor content with markers.  Added a workbench view to show contents from workbench navigator or editor selections.  Added pop-up menu action to open selected resource in its view.  Added conversion action to translate the CPN file into Microsoft Project XML (MSPDI) file type for export.
* Added CertWare Software Project Metrics (SPM) EMF model for collecting and computing metrics on argument case artifacts in change sets.  Added corresponding navigator contribution summarized to the few key product and trend metrics with values.  Added example contribution fragment as a pattern for a fully-specified metrics model example with place-holder observations.  Added a workbench view to show contents from workbench navigator or editor selections.  Added pop-up menu action to open selected resource in its view.  Added object contribution action on selected project commit objects to compute change order count statistics from a selected change order (SCO) file.  Added object contribution action on selected project model or project commit objects to compute all metrics given the statistics in the model.  
* Added CertWare Software Change Order (SCO) EMF model for capturing change order records for metrics.  Added corresponding navigator contribution.  Added a workbench view to show contents from workbench navigator or editor selections.  Added pop-up menu action to open selected resource in its view.  Added an action to collect commit identifiers and file size history from a project's associated EGit repository, creating an SCO file in the project containing the results.  
* Added a CertWare workbench perspective.  Standard layout.  Added views and new-wizard perspective extensions from each plug-in.  Perspective defined in @net.certware.core.ui@ plug-in.   
* Added a quick-and-dirty task hour accumulator to the task list, activated on the pop-up menu for task category containers.  Added a similar task hour accumulator to the project navigator for selections on a project container, which accumulates all hours for all tasks.  
_Commit_:
* Committed as reference branch @M5@ with @1.1.0@ tag.

h3. Version 1.0.2

_Bugs Fixed_:
* Fixed help context provider for example host plug-in. 
* Added EVL feature as a sub-feature for the packaging.
_Enhancements_:
* Added CertWare category to diagram plug-in preference pages for improved navigation.
* Added help context IDs for details pages on the examples wizard.
* Added first draft of semi-formal proof editor, mapped to file extension @.sfp@.  
_Commit_:
* Committed with @1.0.2@ tag.

h3. Version 1.0.1

_Bugs Fixed_:
* Fixed example wizard's URL string matching for resource copying from fragment bundles.  This repair ensures the copying task is not dependent upon the extension point contribution's ordering of resources.  
_Enhancements_:
* None
_Commit_:
* Committed as reference branch @M4@ with @1.0.1@ tag.

h3. Version 1.0.0

_Enhancements_:
* Created ARM Ecore model for arguments, then GSN, CAE, and EUR Ecore models each depending on ARM package.
* Created VCL Ecore model for check lists.
* Established basic target definition including Equinox and RCP.  
* Established basic feature definition and branding support.
* Established basic extended editing properties sheets using EEF.  
* Created Apache POI plugin library package for POI 3.6.
* Created import/export plugin library package for docx4j.
* Included EGit/JGit support in run configuration.
* Unit test fragments created for ARM, GSN, and EUROCONTROL models.
* Navigator content contributions and filters for ARM, GSN, CAE, EUR, and VCL models.
* Example wizard using example resources contributed as fragments.
* Javadoc basic setup and Ant script saved. 
* Graphical argument editors for CAE, GSN and EUROCONTROL models.
_Commit_:
* Committed as reference branch @warr@ with @1.0.0@ tag.

<hr/>

h2. Documentation

h3. Javadoc

Running the built-in Javadoc from Eclipse workbench with standard doclet.  Use @Project->Generate Javadoc@ to start the wizard.  Select all projects in the workspace except perhaps the test fragments and library plug-ins.  Using additional VM and doclet tag settings as below:

* @-J-Xmx1g@ for the virtual machine.
* @-tag generated:a:"Generated" -tag generatedBy:a:"Generated by" -tag ordered:a:"Ordered" -tag model:a:"Model"@ for special tags.

The typical output goes to the local disk in a Javadoc directory.  The @overview.html@ file is kept in the @net.certware.doc@ project's @javadoc@ folder.  It is also possible to run the @pdfdoclet@ on these files even without an associated configuration file.     

h3. Meta-Models

* @AML@ SRI structured argument markup language and its Ecore implementation
* @ARM@ OMG argument metamodel and its Ecore implementation
* @CAE@ A claim-argument-evidence metamodel derived from the ARM metamodel.
* @CAZ@ A diagram for claim-argument-evidence notation derived from CAE and ARM metamodels.
* @EUR@ A EUROCONTROL notation metamodel derived from the ARM metamodel and reflecting the slight differences of this notation from GSN.  
* @EUZ@ A diagram for EUROCONTROL notation derived from EUR and ARM metamodels. 
* @GSN@ A goal structuring notation metamodel derived from the ARM metamodel.
* @GSZ@ A diagram for goal structuring notation derived from GSN and ARM metamodels.
* @SFP@ A semi-formal proof metamodel derived from an Xtext grammar for these proofs.
* @SMM@ OMG software measurement metamodel and its Ecore implementation.
* @VCL@ A verification checklist generic metamodel.
* @MSPDI@ The MSPDI schema from Microsoft Project.
* @CPN@ A CertWare-specific Planning Notation metamodel.  
* @SPM@ A CertWare-specific software project management metrics metamodel.
* @SCO@ A CertWare-specific software change order metamodel.

h3. Development

h4. Running the EEF Tools

We use the Eclipse Extended Editing Framework to provide better properties sheets for the EMF model editors.  The EEF model initialization occurs from the original @*.genmodel@ files in the model plugins.  
# The EEF model artifacts are redirected to the @EMF.Edit@ plugins, where a @model@ folder was created to contain the EEF models.  
# In the @*.eefgen@ model created, check that the generation directory property points to a source folder (typically @src-gen@) and that the builder identifies this as a source folder (e.g. @Build Path -> Use as Source Folder@).  
# Be sure to add the @model@ folder and the @src-gen@ folders to the plugin's @build.properties@ selections as necessary.  
# Add @org.eclipse.emf.eef.runtime@ as a plugin dependency, and in its properties select the re-export dependency option so that the @EMF.editor@ project can see it.  
# Run the @eefgen@ to create the new packages. 
# In the @EMF.edit@ plugin expose all of the packages in the runtime tab.  
# In the @EMF.editor@ plugin add the three standard provider extensions to enable the EEF contributions (see the generated plugin fragment for the class name references), then add individual extensions for the tabbed property parts for example.  
# In the generated editor file make it implement the tabbed properties interface @org.eclipse.ui.views.properties.tabbed.ITabbedPropertySheetPageContributor@ and implement the one method that returns the contributor ID as defined in the plugin extension. 
# Change the @PropertySheetPage@ reference type to @TabbedPropertySheetPage@ and modify the @getPropertySheetPage()@ method to work with the tabbed property sheet.  
# Add the double-click listener on the selection viewer.    

h4. Running the GMF Tools

The graphical model editors we create with the Eclipse Epsilon Eugenia tools for GMF (0.8.9, later 0.9.0).  Use the following steps:
# Apply the Eugenia metadata annotations to the features in the desired Ecore metamodel files (e.g. add the tags to the @gsn.ecore@ file).
# From the @genmodel@ editor and root model node, run the corresponding @genmodel@ file to create the basic EMF model, edit, and editor support source and plugins.  
# From the explorer's context menu on the @ecore@ file run the @Eugenia -> Generate GMF tool, graph, and map models@ command.  This will yield the @gmfgraph@, @gmfmap@, and @gmftool@ files next to the @ecore@ file.  Note of the @gmfmap@ file does not appear there is something wrong with the model structure or annotations although no error messages are produced; typical issues are container point-backs and nodes with identical tool names.
# From the explorer's context menu on the @gmfmap@ file run the @Create generator model command.@  This will run the wizard to create the @gmfgen@ file.  Note that the "Load" buttons should be used on each page and that the notification that the @genmodel@ file is out of date seems to be spurious.
# Edit the @gmfgen@ model's edit part properties to set Validation Enabled and Validation Decorators to @true@.  
# Edit the @gmfgen@ model's edit part properties to set the metamodel Display Name property to the diagram type, e.g. @GSN Argument Diagram@.  This value appears in the property sheet header when the argument canvas is selected.
# From the explorer's context menu on the @gmfgen@ file run the @Create diagram code@ command.  This will yield the @diagram@ plugin.  Ensure this new plugin is in the run configuration or deployment package.  

Afterward some adjustments may be necessary if wrapped labels are wanted inside figures.  The default layout manager seems to work fine for the children items on a figure (e.g. two wrapped labels inside an ellipse).  But the default is to truncate these labels, and the default is to provide a skimpy editor for the labels.  To make the adjustments from the generated code:
# In the @*diagram.edit.parts@ package edit the @createContents()@ method of @MyEditPart@ class's @MyFigure@ inner class.  For each @WrappedLabel@ child added in this method, set @setTextWrap(true)@ as in 			@fFigureContextLabelFigure.setTextWrap(true);@.  Set the @NOT@ flag on the generated tag.    
# In the same package edit the @setManager@ method of the @MyXyzEditPart@ for the label requiring a better editor, where @Xyz@ is the label child name.  Replace the call to @TextDirectEditManager.getTextCellEditorClass(this)@ with one to @WrapTextCellEditor.class@.  Apply the quick fix to the include file to eliminate the two warnings as this refers to internal API.  Set the @NOT@ flag on the generated tag.  The resulting method should resemble:
bc. 
	/**
	 * @generated NOT
	 */
	protected DirectEditManager getManager() {
		if (manager == null) {
			setManager(new TextDirectEditManager(this,
			// TextDirectEditManager.getTextCellEditorClass(this),
					WrapTextCellEditor.class,
					GszEditPartFactory.getTextCellEditorLocator(this)));
		}
		return manager;
	}
	

h4. Running the Xtext Tools

The Xtext DSL initialization is done with the wizard for creating Xtext projects from Ecore files.  Choose the EPackage desired and any of its imports so that the complete grammar is generated, and choose an appropriate entry rule because the default is not satisfactory.  For example, to create the GSN DSL choose both GSN and ARM packages, and choose the Goal class as the entry rule.  Some string type manipulation may need to be done in the resulting grammar specification.  When the wizard completes it is necessary to run the workflow.  First editor the workflow run configuration file (labeled @mwe2@) and add more memory for the virtual machine, e.g. @-Xmx1024m@). Run this MWE generator on the @mwe2@ file.  This will produce or update two or three more plug-ins depending on selections in the wizard.  Edits to the generated code might include tasks such as
# Modify the label and image provider in the @*.ui.labeling.*LabelProvider@ package to provide labels and icons for the outline.  The icons path presumes the @icons/@ path so provide text path beyond that root. 
# Create an exporter or command that writes the file as a duplicate with a different extension associated with a different installed editor.  The DSL-extension file can in fact be opened with the EMF-extension editor, but this is not obvious without cloning and renaming the file.  Example: @*.gsnl@ can be opened with either GSN DSL or GSN Ecore editors.  Code to do this might use the @Resource@ object in EMF, as in
bc. 
Resource res = resourceSet.createResource(URI.createURI("myFile.xmi"));
res.getContents().add(model);
res.save(null);

or

bc. 
Injector inj = new 
MyLanguageStandaloneSetup().createInjectorAndDoEMFRegistrati on();
ResourceSet resourceSet = inj.getInstance(ResourceSet.class);
Resource res = resourceSet.createResource(URI.createURI("myFile.xmi"));
res.getContents().add(model);
res.save(null);

h4. Running the Export Tools

Exporting to Word format is done with @docx4j@ and a depth-first visitor pattern.  The visitor uses the EMF collections iterators and Ecore switch generated by the model generator.  

h4. Running the Atlas Tools

The CertWare model transformations use the Eclipse Atlas Transformation Language (ATL) tools.  These features are selected in the target platform, and when the transformation plug-ins are deployed for user applications there is thus a dependency to the ATL features. 

The @*.argument.transform.*@ plug-ins are model transformation plug-ins.  These specify the ATL file and translation rules for converting one Ecore metamodel type into another.  In most cases we use this to transform a GSN model into an ARM model, for example.  The transformation of a model instance at run-time is thus done with the corresponding ATL launch configurations provided via the plugin.  
 

h3. Workbench

This section covers workbench editors, views, and common navigator contributions.

h4. Editors

Several editors are contributed by the EMF generator models.   

h4. Views

* @net.certware.measurement.sco.view@ Contributes a view for SCO model files.  Responds to both resource and object workbench selections.  Master-detail view on the artifact list items.  Uses the EMF-generated item provider adapter factory to populate the master tree.
* @net.certware.measurement.spm.view@ Contributes a view for SPM model files.  Responds to both resource and object workbench selections.  Master-detail view on the artifact list items.  Uses a local content and label provider because the model is generated by Xtext which does not product an item provider factory and because we do not want the full tree exposed for this view.   
* @net.certware.planning.cpn.view@ Contributes a view for CPN model files.  Responds to both resource and object workbench selections.  Master-detail view on the artifact list items.  Employs made-up adapter factory for item provider adapters so the Xtext injected model providers are not available in the view, instead uses the EMF reflective providers.  

h4. Navigator Contributions

* @net.certware.argument.arm.navigator@ Contributes content on ARM model resource files and navigator filter.
* @net.certware.argument.cae.navigator@ Contributes content on CAE model resource files and navigator filter.
* @net.certware.argument.gsn.navigator@ Contributes content on GSN model resource files and navigator filter.
* @net.certware.argument.eur.navigator@ Contributes content on EUR model resource files and navigator filter.
* @net.certware.argument.sfp.navigator@ Contributes content on SFP model resource files and navigator filter.
* @net.certware.measurement.sco.navigator@ Contributes content on SCO model resource files and navigator filter. 
* @net.certware.measurement.spm.navigator@ Contributes content on SPM model resource files and navigator filter. 
* @net.certware.planning.cpn.navigator@ Contributes content on CPN model resource files and navigator filter.
* @net.certware.verification.checklist.navigator@ Contributes VCL content on verification checklist files and navigator filter.

h3. Plugins Summary

* @net.certware.argument.aml.*@ Argument model and editor support for SRI AML.  The core plugin contains the model (derived from an XSD schema) definition and generator.  The edit plugin contains the extended editing framework support models.  The editor plugin is modified to use extended editing features for property specification.  
* @net.certware.argument.arm.*@ Argument model and editor support for OMG ARM.  The core plugin contains the model definition and generator.  The edit plugin contains the extended editing framework support models.  The editor plugin is modified to use extended editing features for property specification.  
* @net.certware.argument.arm.help@ Help content for ARM models and related workbench contributions.    
* @net.certware.argument.cae.*@ Argument model and editor support for CAE (ASCAD), built on ARM.  The core plugin contains the model definition and generator.  The edit plugin contains the extended editing framework support models.  The editor plugin is modified to use extended editing features for property specification. 
* @net.certware.argument.cae.help@ Help content for CAE models and related workbench contributions.
* @net.certware.argument.caz.*@ Argument diagram graphical model equivalent for CAE models.    
* @net.certware.argument.eur.*@ Argument model and editor support for EUROCONTROL notation, built on ARM.  The core plugin contains the model definition and generator.  The edit plugin contains the extended editing framework support models.  The editor plugin is modified to use extended editing features for property specification.
* @net.certware.argument.eur.help@ Help content for EUROCONTROL models and related workbench contributions.    
* @net.certware.argument.euz.*@ Argument diagram graphical model equivalent for EUROCONTROL models.    
* @net.certware.argument.gsn.*@ Argument model and editor support for GSN, built on ARM.  The core plugin contains the model definition and generator.  The edit plugin contains the extended editing framework support models.  The editor plugin is modified to use extended editing features for property specification.
* @net.certware.argument.gsn.help@ Help content for GSN models and related workbench contributions.  
* @net.certware.argument.gsz.*@ Argument diagram graphical model equivalent for GSN models.
* @net.certware.argument.sfp.*@ Semi-formal proof structured text argument models.  The core plugin contains the model definition and generator.  The edit plugin contains the extended editing framework support models.  The editor plugin is modified to use extended editing features for property specification.
* @net.certware.argument.transform.gsn2arm.*@ An Atlas transformation model for converting GSN arguments to ARM arguments.  
* @net.certware.branding@ Project branding plugin for feature definition.
* @net.certware.core@ Core project content.
* @net.certware.core.ui@ Core project UI content including extension bases.  Includes interface constants files applying across the project source base.  
* @net.certware.doc@ General project to contain various documentation files including the wiki.
* @net.certware.example@ Example wizard and host plugin for contributing fragments.
* @net.certware.export@ Exporting model resources to other formats.  
* @net.certware.help@ Project help files, cheat sheets and dynamic context support.
* @net.certware.history.*@ History contributions for version control analysis.
* @net.certware.launch@ Launch configuration shared files.
* @net.certware.libs.doc@ Plugin packaging of docx4J 2.5 libraries.
* @net.certware.libs.poi@ Plugin packaging of Apache POI 3.6 libraries.
* @net.certware.measurement.sco.*@ Software change order model and editor support.  Supports the SPM metrics.  Other collectors can be added for different metrics suites.
* @net.certware.measurement.smm.*@ Measurement model and editor support the OMG SMM.  The core plugin contains the model definition and generator.  The edit plugin contains the extended editing framework support models.  The editor plugin is modified to use extended editing features for property specification.
* @net.certware.measurement.spm.*@ Software product management metrics model and editor support for Royce SPM metrics.  Uses the SMM metamodel.
* @net.certware.planning.cpn.*@ A planning content DSL serving as a project management data overlay on argument models.
* @net.certware.planning.mspdi.*@ Planning content model using Microsoft project data schema. The Microsoft MSPDI schema was coerced into an Ecore model, then the EMF plugins generated from this model.    
* @net.certware.target@ CertWare project target definition.
* @net.certware.update@ Update site definition project (currently unused).
* @net.certware.verification.checklist.*@ Verification model and editor support for generic check lists. The core plugin contains the model definition and generator.  The edit plugin contains the extended editing framework support models.  The editor plugin is modified to use extended editing features for property specification.


h3. File Names and Extensions

* @*.aml@ AML model files
* @*.arm@ ARM model files
* @*.gsn@ GSN model files
* @*.gsz@ and @*.gsz_diagram@ are GSN diagram model and diagram files
* @*.cae@ CAE model files
* @*.caz@ and @*.caz_diagram@ are CAE diagram model and diagram files
* @*.eur@ EUROCONTROL model files
* @*.euz@ and @*.euz_diagram@ are EUROCONTROL diagram model and diagram files
* @*.mspdi@ and @*.mpx@ are Microsoft Project (MSPDI) model files.
* @*.sco@ SCO change order model files.
* @*.smm@ OMG Software Measurement Metamodel files.
* @*.spm@ Software Project Management metrics files. 
* @*.vcl@ Verification checklist model files

h3. Target Platform

* Eclipse Helios baseline
* EGit, requiring JGit as well
* Eclipse RCP delta pack for multi-platform exports.
* EasyMock 3.0 and JUnit 4.8.1 for testing

h3. Implementation Features

* EGit included in target platform and run configuration.  Provides Git distributed version control under the team menus.  
* Eclipse Extended Editing Framework (EEF) included for better property specification in EMF-generated editors.  
* Eclipse Graphical Modeling Framework (GEF) included for graphical editing of argument models, synthesized partly by using Eclipse Epsilon tools.
* Eclipse Textual Modeling Framework (TMF) Xtext tools used for domain-specific language models.  

<hr/>

h2. Implementation Notes

* Platform trace debugging features turned on but not yet used in any CertWare plugin.

<hr/>

h2. Packaging

The CertWare plug-ins and fragments 

h3. Delivery as a Feature

The several @net.certware.*@ plug-ins and fragments (not including the testing fragments) are combined into a feature and category definition in @net.certware.feature@.  Use the automated dependency calculation of the feature editor to identify the installation dependencies, then ensure there are no spurious plug-ins identified; if so, identify the source and repair the issue.  For complete feature deliveries, use the version tool in the feature editor to push the feature version identifier into the plugins and fragments.  Export to either a folder or archive file.  There are no platform-dependent requirements.  

To use the delivery, import the feature into an existing Eclipse workbench installation.  The feature will identify missing dependencies if any and prompt the user to install these prerequisites.  The feature and its contents are not digitally signed.  After installation, restart the workbench to update the commands and workbench parts.    

h3. Delivery as a Product

A stand-alone product definition has not yet been configured.

h3. Update Site Publishing

Not yet configured.  

<hr/>

h2. Testing

h3. Unit Tests

* @net.certware.argument.arm.test@ fragment contains tests for ARM models.  Includes two structural tests for examples provided in the OMG standard.
* @net.certware.argument.gsn.test@ fragment contains tests for GSN models.  Includes one structural test for example provided in the OMG standard.
* @net.certware.argument.cae.test@ fragment contains tests for CAE models.  Includes one structural test for example provided in the OMG standard.
* @net.certware.argument.transform.gsn2arm.text@ fragment contains tests for the ATL GSN to ARM translation models.
* @net.certware.measurement.sco.tests@ plugin contains tests for the SCO models.
* @net.certware.measurement.spm.tests@ plugin contains tests for the SPM models.  

h3. Automated Analysis

* Uses CodePro AnalytiX for manually-generated code with full rule set.  Follow the majority of rule recommendations including Javadoc.
* FindBugs used on all code including automatically-generated code with nearly full rule set.  Some style rules disabled.       



