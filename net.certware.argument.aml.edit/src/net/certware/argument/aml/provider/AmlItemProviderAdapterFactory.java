/**
 * Copyright © 2000-2005 SRI International.
 */
package net.certware.argument.aml.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.certware.argument.aml.util.AmlAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemColorProvider;
import org.eclipse.emf.edit.provider.IItemFontProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AmlItemProviderAdapterFactory extends AmlAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final String copyright = "Copyright © 2000-2005 SRI International."; //$NON-NLS-1$

	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AmlItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
		supportedTypes.add(IItemColorProvider.class);
		supportedTypes.add(IItemFontProvider.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.AggregationRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AggregationRuleItemProvider aggregationRuleItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.AggregationRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAggregationRuleAdapter() {
		if (aggregationRuleItemProvider == null) {
			aggregationRuleItemProvider = new AggregationRuleItemProvider(this);
		}

		return aggregationRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.AmlDocument} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AmlDocumentItemProvider amlDocumentItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.AmlDocument}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAmlDocumentAdapter() {
		if (amlDocumentItemProvider == null) {
			amlDocumentItemProvider = new AmlDocumentItemProvider(this);
		}

		return amlDocumentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.Annotation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnnotationItemProvider annotationItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.Annotation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnnotationAdapter() {
		if (annotationItemProvider == null) {
			annotationItemProvider = new AnnotationItemProvider(this);
		}

		return annotationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.Answer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnswerItemProvider answerItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.Answer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnswerAdapter() {
		if (answerItemProvider == null) {
			answerItemProvider = new AnswerItemProvider(this);
		}

		return answerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.ArgumentTemplate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArgumentTemplateItemProvider argumentTemplateItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.ArgumentTemplate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArgumentTemplateAdapter() {
		if (argumentTemplateItemProvider == null) {
			argumentTemplateItemProvider = new ArgumentTemplateItemProvider(this);
		}

		return argumentTemplateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.Argument} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArgumentItemProvider argumentItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.Argument}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArgumentAdapter() {
		if (argumentItemProvider == null) {
			argumentItemProvider = new ArgumentItemProvider(this);
		}

		return argumentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.Belief} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BeliefItemProvider beliefItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.Belief}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBeliefAdapter() {
		if (beliefItemProvider == null) {
			beliefItemProvider = new BeliefItemProvider(this);
		}

		return beliefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.Choice} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChoiceItemProvider choiceItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.Choice}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChoiceAdapter() {
		if (choiceItemProvider == null) {
			choiceItemProvider = new ChoiceItemProvider(this);
		}

		return choiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.CollectionItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CollectionItemItemProvider collectionItemItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.CollectionItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCollectionItemAdapter() {
		if (collectionItemItemProvider == null) {
			collectionItemItemProvider = new CollectionItemItemProvider(this);
		}

		return collectionItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.Collection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CollectionItemProvider collectionItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.Collection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCollectionAdapter() {
		if (collectionItemProvider == null) {
			collectionItemProvider = new CollectionItemProvider(this);
		}

		return collectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.Coverage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CoverageItemProvider coverageItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.Coverage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCoverageAdapter() {
		if (coverageItemProvider == null) {
			coverageItemProvider = new CoverageItemProvider(this);
		}

		return coverageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.CreatingTool} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreatingToolItemProvider creatingToolItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.CreatingTool}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreatingToolAdapter() {
		if (creatingToolItemProvider == null) {
			creatingToolItemProvider = new CreatingToolItemProvider(this);
		}

		return creatingToolItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.Creator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreatorItemProvider creatorItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.Creator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreatorAdapter() {
		if (creatorItemProvider == null) {
			creatorItemProvider = new CreatorItemProvider(this);
		}

		return creatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.Dependent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DependentItemProvider dependentItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.Dependent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDependentAdapter() {
		if (dependentItemProvider == null) {
			dependentItemProvider = new DependentItemProvider(this);
		}

		return dependentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.DiscoveryMethod} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiscoveryMethodItemProvider discoveryMethodItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.DiscoveryMethod}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiscoveryMethodAdapter() {
		if (discoveryMethodItemProvider == null) {
			discoveryMethodItemProvider = new DiscoveryMethodItemProvider(this);
		}

		return discoveryMethodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.End} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EndItemProvider endItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.End}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEndAdapter() {
		if (endItemProvider == null) {
			endItemProvider = new EndItemProvider(this);
		}

		return endItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.EvidenceExhibit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EvidenceExhibitItemProvider evidenceExhibitItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.EvidenceExhibit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEvidenceExhibitAdapter() {
		if (evidenceExhibitItemProvider == null) {
			evidenceExhibitItemProvider = new EvidenceExhibitItemProvider(this);
		}

		return evidenceExhibitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.Evidence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EvidenceItemProvider evidenceItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.Evidence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEvidenceAdapter() {
		if (evidenceItemProvider == null) {
			evidenceItemProvider = new EvidenceItemProvider(this);
		}

		return evidenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.Exhibit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExhibitItemProvider exhibitItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.Exhibit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExhibitAdapter() {
		if (exhibitItemProvider == null) {
			exhibitItemProvider = new ExhibitItemProvider(this);
		}

		return exhibitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.Flag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlagItemProvider flagItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.Flag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlagAdapter() {
		if (flagItemProvider == null) {
			flagItemProvider = new FlagItemProvider(this);
		}

		return flagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.Interval} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntervalItemProvider intervalItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.Interval}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntervalAdapter() {
		if (intervalItemProvider == null) {
			intervalItemProvider = new IntervalItemProvider(this);
		}

		return intervalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.List} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ListItemProvider listItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.List}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createListAdapter() {
		if (listItemProvider == null) {
			listItemProvider = new ListItemProvider(this);
		}

		return listItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.Memo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MemoItemProvider memoItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.Memo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMemoAdapter() {
		if (memoItemProvider == null) {
			memoItemProvider = new MemoItemProvider(this);
		}

		return memoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.MetaData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetaDataItemProvider metaDataItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.MetaData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMetaDataAdapter() {
		if (metaDataItemProvider == null) {
			metaDataItemProvider = new MetaDataItemProvider(this);
		}

		return metaDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.NationState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NationStateItemProvider nationStateItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.NationState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNationStateAdapter() {
		if (nationStateItemProvider == null) {
			nationStateItemProvider = new NationStateItemProvider(this);
		}

		return nationStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.Period} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PeriodItemProvider periodItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.Period}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPeriodAdapter() {
		if (periodItemProvider == null) {
			periodItemProvider = new PeriodItemProvider(this);
		}

		return periodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.Person} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PersonItemProvider personItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.Person}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPersonAdapter() {
		if (personItemProvider == null) {
			personItemProvider = new PersonItemProvider(this);
		}

		return personItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.Publisher} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PublisherItemProvider publisherItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.Publisher}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPublisherAdapter() {
		if (publisherItemProvider == null) {
			publisherItemProvider = new PublisherItemProvider(this);
		}

		return publisherItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.QuestionRelationships} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuestionRelationshipsItemProvider questionRelationshipsItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.QuestionRelationships}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuestionRelationshipsAdapter() {
		if (questionRelationshipsItemProvider == null) {
			questionRelationshipsItemProvider = new QuestionRelationshipsItemProvider(this);
		}

		return questionRelationshipsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.Question} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuestionItemProvider questionItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.Question}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuestionAdapter() {
		if (questionItemProvider == null) {
			questionItemProvider = new QuestionItemProvider(this);
		}

		return questionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.Reader} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReaderItemProvider readerItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.Reader}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReaderAdapter() {
		if (readerItemProvider == null) {
			readerItemProvider = new ReaderItemProvider(this);
		}

		return readerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.Relevance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelevanceItemProvider relevanceItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.Relevance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelevanceAdapter() {
		if (relevanceItemProvider == null) {
			relevanceItemProvider = new RelevanceItemProvider(this);
		}

		return relevanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.Reliability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReliabilityItemProvider reliabilityItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.Reliability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReliabilityAdapter() {
		if (reliabilityItemProvider == null) {
			reliabilityItemProvider = new ReliabilityItemProvider(this);
		}

		return reliabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.Start} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StartItemProvider startItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.Start}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStartAdapter() {
		if (startItemProvider == null) {
			startItemProvider = new StartItemProvider(this);
		}

		return startItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.Template} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateItemProvider templateItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.Template}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateAdapter() {
		if (templateItemProvider == null) {
			templateItemProvider = new TemplateItemProvider(this);
		}

		return templateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.Value} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueItemProvider valueItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.Value}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueAdapter() {
		if (valueItemProvider == null) {
			valueItemProvider = new ValueItemProvider(this);
		}

		return valueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.certware.argument.aml.Witness} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WitnessItemProvider witnessItemProvider;

	/**
	 * This creates an adapter for a {@link net.certware.argument.aml.Witness}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWitnessAdapter() {
		if (witnessItemProvider == null) {
			witnessItemProvider = new WitnessItemProvider(this);
		}

		return witnessItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (aggregationRuleItemProvider != null) aggregationRuleItemProvider.dispose();
		if (amlDocumentItemProvider != null) amlDocumentItemProvider.dispose();
		if (annotationItemProvider != null) annotationItemProvider.dispose();
		if (answerItemProvider != null) answerItemProvider.dispose();
		if (argumentTemplateItemProvider != null) argumentTemplateItemProvider.dispose();
		if (argumentItemProvider != null) argumentItemProvider.dispose();
		if (beliefItemProvider != null) beliefItemProvider.dispose();
		if (choiceItemProvider != null) choiceItemProvider.dispose();
		if (collectionItemItemProvider != null) collectionItemItemProvider.dispose();
		if (collectionItemProvider != null) collectionItemProvider.dispose();
		if (coverageItemProvider != null) coverageItemProvider.dispose();
		if (creatingToolItemProvider != null) creatingToolItemProvider.dispose();
		if (creatorItemProvider != null) creatorItemProvider.dispose();
		if (dependentItemProvider != null) dependentItemProvider.dispose();
		if (discoveryMethodItemProvider != null) discoveryMethodItemProvider.dispose();
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (endItemProvider != null) endItemProvider.dispose();
		if (evidenceExhibitItemProvider != null) evidenceExhibitItemProvider.dispose();
		if (evidenceItemProvider != null) evidenceItemProvider.dispose();
		if (exhibitItemProvider != null) exhibitItemProvider.dispose();
		if (flagItemProvider != null) flagItemProvider.dispose();
		if (intervalItemProvider != null) intervalItemProvider.dispose();
		if (listItemProvider != null) listItemProvider.dispose();
		if (memoItemProvider != null) memoItemProvider.dispose();
		if (metaDataItemProvider != null) metaDataItemProvider.dispose();
		if (nationStateItemProvider != null) nationStateItemProvider.dispose();
		if (parameterItemProvider != null) parameterItemProvider.dispose();
		if (periodItemProvider != null) periodItemProvider.dispose();
		if (personItemProvider != null) personItemProvider.dispose();
		if (publisherItemProvider != null) publisherItemProvider.dispose();
		if (questionRelationshipsItemProvider != null) questionRelationshipsItemProvider.dispose();
		if (questionItemProvider != null) questionItemProvider.dispose();
		if (readerItemProvider != null) readerItemProvider.dispose();
		if (relevanceItemProvider != null) relevanceItemProvider.dispose();
		if (reliabilityItemProvider != null) reliabilityItemProvider.dispose();
		if (startItemProvider != null) startItemProvider.dispose();
		if (templateItemProvider != null) templateItemProvider.dispose();
		if (valueItemProvider != null) valueItemProvider.dispose();
		if (witnessItemProvider != null) witnessItemProvider.dispose();
	}

}
