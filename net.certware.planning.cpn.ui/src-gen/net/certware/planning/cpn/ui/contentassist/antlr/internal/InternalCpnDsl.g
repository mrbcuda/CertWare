/*
* generated by Xtext
*/
grammar InternalCpnDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package net.certware.planning.cpn.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package net.certware.planning.cpn.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import net.certware.planning.cpn.services.CpnDslGrammarAccess;

}

@parser::members {
 
 	private CpnDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(CpnDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRulePlans
entryRulePlans 
:
{ before(grammarAccess.getPlansRule()); }
	 rulePlans
{ after(grammarAccess.getPlansRule()); } 
	 EOF 
;

// Rule Plans
rulePlans
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPlansAccess().getGroup()); }
(rule__Plans__Group__0)
{ after(grammarAccess.getPlansAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArgumentModels
entryRuleArgumentModels 
:
{ before(grammarAccess.getArgumentModelsRule()); }
	 ruleArgumentModels
{ after(grammarAccess.getArgumentModelsRule()); } 
	 EOF 
;

// Rule ArgumentModels
ruleArgumentModels
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArgumentModelsAccess().getGroup()); }
(rule__ArgumentModels__Group__0)
{ after(grammarAccess.getArgumentModelsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAllocation
entryRuleAllocation 
:
{ before(grammarAccess.getAllocationRule()); }
	 ruleAllocation
{ after(grammarAccess.getAllocationRule()); } 
	 EOF 
;

// Rule Allocation
ruleAllocation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAllocationAccess().getGroup()); }
(rule__Allocation__Group__0)
{ after(grammarAccess.getAllocationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePlan
entryRulePlan 
:
{ before(grammarAccess.getPlanRule()); }
	 rulePlan
{ after(grammarAccess.getPlanRule()); } 
	 EOF 
;

// Rule Plan
rulePlan
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPlanAccess().getGroup()); }
(rule__Plan__Group__0)
{ after(grammarAccess.getPlanAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Plans__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Plans__Group__0__Impl
	rule__Plans__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Plans__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlansAccess().getArgumentmodelsAssignment_0()); }
(rule__Plans__ArgumentmodelsAssignment_0)*
{ after(grammarAccess.getPlansAccess().getArgumentmodelsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Plans__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Plans__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Plans__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlansAccess().getPlansAssignment_1()); }
(rule__Plans__PlansAssignment_1)*
{ after(grammarAccess.getPlansAccess().getPlansAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ArgumentModels__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentModels__Group__0__Impl
	rule__ArgumentModels__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentModels__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentModelsAccess().getArgumentmodelKeyword_0()); }

	'argumentmodel' 

{ after(grammarAccess.getArgumentModelsAccess().getArgumentmodelKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArgumentModels__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArgumentModels__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentModels__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentModelsAccess().getImportURIAssignment_1()); }
(rule__ArgumentModels__ImportURIAssignment_1)
{ after(grammarAccess.getArgumentModelsAccess().getImportURIAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Allocation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Allocation__Group__0__Impl
	rule__Allocation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Allocation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllocationAccess().getAllocationAction_0()); }
(

)
{ after(grammarAccess.getAllocationAccess().getAllocationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Allocation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Allocation__Group__1__Impl
	rule__Allocation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Allocation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllocationAccess().getGroup_1()); }
(rule__Allocation__Group_1__0)?
{ after(grammarAccess.getAllocationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Allocation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Allocation__Group__2__Impl
	rule__Allocation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Allocation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllocationAccess().getGroup_2()); }
(rule__Allocation__Group_2__0)?
{ after(grammarAccess.getAllocationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Allocation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Allocation__Group__3__Impl
	rule__Allocation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Allocation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllocationAccess().getGroup_3()); }
(rule__Allocation__Group_3__0)?
{ after(grammarAccess.getAllocationAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Allocation__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Allocation__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Allocation__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllocationAccess().getGroup_4()); }
(rule__Allocation__Group_4__0)?
{ after(grammarAccess.getAllocationAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Allocation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Allocation__Group_1__0__Impl
	rule__Allocation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Allocation__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllocationAccess().getCostKeyword_1_0()); }

	'cost' 

{ after(grammarAccess.getAllocationAccess().getCostKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Allocation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Allocation__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Allocation__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllocationAccess().getCostAssignment_1_1()); }
(rule__Allocation__CostAssignment_1_1)
{ after(grammarAccess.getAllocationAccess().getCostAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Allocation__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Allocation__Group_2__0__Impl
	rule__Allocation__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Allocation__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllocationAccess().getDurationKeyword_2_0()); }

	'duration' 

{ after(grammarAccess.getAllocationAccess().getDurationKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Allocation__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Allocation__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Allocation__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllocationAccess().getDurationAssignment_2_1()); }
(rule__Allocation__DurationAssignment_2_1)
{ after(grammarAccess.getAllocationAccess().getDurationAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Allocation__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Allocation__Group_3__0__Impl
	rule__Allocation__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Allocation__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllocationAccess().getTeamKeyword_3_0()); }

	'team' 

{ after(grammarAccess.getAllocationAccess().getTeamKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Allocation__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Allocation__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Allocation__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllocationAccess().getTeamAssignment_3_1()); }
(rule__Allocation__TeamAssignment_3_1)
{ after(grammarAccess.getAllocationAccess().getTeamAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Allocation__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Allocation__Group_4__0__Impl
	rule__Allocation__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Allocation__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllocationAccess().getFacilityKeyword_4_0()); }

	'facility' 

{ after(grammarAccess.getAllocationAccess().getFacilityKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Allocation__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Allocation__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Allocation__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllocationAccess().getFacilityAssignment_4_1()); }
(rule__Allocation__FacilityAssignment_4_1)
{ after(grammarAccess.getAllocationAccess().getFacilityAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Plan__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Plan__Group__0__Impl
	rule__Plan__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Plan__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlanAccess().getPlanKeyword_0()); }

	'plan' 

{ after(grammarAccess.getPlanAccess().getPlanKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Plan__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Plan__Group__1__Impl
	rule__Plan__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Plan__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlanAccess().getIdAssignment_1()); }
(rule__Plan__IdAssignment_1)
{ after(grammarAccess.getPlanAccess().getIdAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Plan__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Plan__Group__2__Impl
	rule__Plan__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Plan__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlanAccess().getElementKeyword_2()); }

	'element' 

{ after(grammarAccess.getPlanAccess().getElementKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Plan__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Plan__Group__3__Impl
	rule__Plan__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Plan__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlanAccess().getElementAssignment_3()); }
(rule__Plan__ElementAssignment_3)
{ after(grammarAccess.getPlanAccess().getElementAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Plan__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Plan__Group__4__Impl
	rule__Plan__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Plan__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlanAccess().getGroup_4()); }
(rule__Plan__Group_4__0)?
{ after(grammarAccess.getPlanAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Plan__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Plan__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Plan__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlanAccess().getGroup_5()); }
(rule__Plan__Group_5__0)?
{ after(grammarAccess.getPlanAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Plan__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Plan__Group_4__0__Impl
	rule__Plan__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Plan__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlanAccess().getEstimatedKeyword_4_0()); }

	'estimated' 

{ after(grammarAccess.getPlanAccess().getEstimatedKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Plan__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Plan__Group_4__1__Impl
	rule__Plan__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Plan__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlanAccess().getLeftParenthesisKeyword_4_1()); }

	'(' 

{ after(grammarAccess.getPlanAccess().getLeftParenthesisKeyword_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Plan__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Plan__Group_4__2__Impl
	rule__Plan__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Plan__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlanAccess().getEstimatedAssignment_4_2()); }
(rule__Plan__EstimatedAssignment_4_2)
{ after(grammarAccess.getPlanAccess().getEstimatedAssignment_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Plan__Group_4__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Plan__Group_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Plan__Group_4__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlanAccess().getRightParenthesisKeyword_4_3()); }

	')' 

{ after(grammarAccess.getPlanAccess().getRightParenthesisKeyword_4_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Plan__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Plan__Group_5__0__Impl
	rule__Plan__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Plan__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlanAccess().getActualKeyword_5_0()); }

	'actual' 

{ after(grammarAccess.getPlanAccess().getActualKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Plan__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Plan__Group_5__1__Impl
	rule__Plan__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Plan__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlanAccess().getLeftParenthesisKeyword_5_1()); }

	'(' 

{ after(grammarAccess.getPlanAccess().getLeftParenthesisKeyword_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Plan__Group_5__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Plan__Group_5__2__Impl
	rule__Plan__Group_5__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Plan__Group_5__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlanAccess().getActualAssignment_5_2()); }
(rule__Plan__ActualAssignment_5_2)
{ after(grammarAccess.getPlanAccess().getActualAssignment_5_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Plan__Group_5__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Plan__Group_5__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Plan__Group_5__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlanAccess().getRightParenthesisKeyword_5_3()); }

	')' 

{ after(grammarAccess.getPlanAccess().getRightParenthesisKeyword_5_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__Plans__ArgumentmodelsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlansAccess().getArgumentmodelsArgumentModelsParserRuleCall_0_0()); }
	ruleArgumentModels{ after(grammarAccess.getPlansAccess().getArgumentmodelsArgumentModelsParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Plans__PlansAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlansAccess().getPlansPlanParserRuleCall_1_0()); }
	rulePlan{ after(grammarAccess.getPlansAccess().getPlansPlanParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArgumentModels__ImportURIAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentModelsAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getArgumentModelsAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Allocation__CostAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllocationAccess().getCostINTTerminalRuleCall_1_1_0()); }
	RULE_INT{ after(grammarAccess.getAllocationAccess().getCostINTTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Allocation__DurationAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllocationAccess().getDurationINTTerminalRuleCall_2_1_0()); }
	RULE_INT{ after(grammarAccess.getAllocationAccess().getDurationINTTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Allocation__TeamAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllocationAccess().getTeamSTRINGTerminalRuleCall_3_1_0()); }
	RULE_STRING{ after(grammarAccess.getAllocationAccess().getTeamSTRINGTerminalRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Allocation__FacilityAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAllocationAccess().getFacilitySTRINGTerminalRuleCall_4_1_0()); }
	RULE_STRING{ after(grammarAccess.getAllocationAccess().getFacilitySTRINGTerminalRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Plan__IdAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlanAccess().getIdSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getPlanAccess().getIdSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Plan__ElementAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlanAccess().getElementModelElementCrossReference_3_0()); }
(
{ before(grammarAccess.getPlanAccess().getElementModelElementIDTerminalRuleCall_3_0_1()); }
	RULE_ID{ after(grammarAccess.getPlanAccess().getElementModelElementIDTerminalRuleCall_3_0_1()); }
)
{ after(grammarAccess.getPlanAccess().getElementModelElementCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Plan__EstimatedAssignment_4_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlanAccess().getEstimatedAllocationParserRuleCall_4_2_0()); }
	ruleAllocation{ after(grammarAccess.getPlanAccess().getEstimatedAllocationParserRuleCall_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Plan__ActualAssignment_5_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlanAccess().getActualAllocationParserRuleCall_5_2_0()); }
	ruleAllocation{ after(grammarAccess.getPlanAccess().getActualAllocationParserRuleCall_5_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


