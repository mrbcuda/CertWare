/*
* generated by Xtext
*/
grammar InternalCpnDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package net.certware.planning.cpn.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package net.certware.planning.cpn.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import net.certware.planning.cpn.services.CpnDslGrammarAccess;

}

@parser::members {

 	private CpnDslGrammarAccess grammarAccess;
 	
    public InternalCpnDslParser(TokenStream input, CpnDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Plans";	
   	}
   	
   	@Override
   	protected CpnDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRulePlans
entryRulePlans returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPlansRule()); }
	 iv_rulePlans=rulePlans 
	 { $current=$iv_rulePlans.current; } 
	 EOF 
;

// Rule Plans
rulePlans returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPlansAccess().getArgumentmodelsArgumentModelsParserRuleCall_0_0()); 
	    }
		lv_argumentmodels_0_0=ruleArgumentModels		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlansRule());
	        }
       		add(
       			$current, 
       			"argumentmodels",
        		lv_argumentmodels_0_0, 
        		"ArgumentModels");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getPlansAccess().getPlansPlanParserRuleCall_1_0()); 
	    }
		lv_plans_1_0=rulePlan		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlansRule());
	        }
       		add(
       			$current, 
       			"plans",
        		lv_plans_1_0, 
        		"Plan");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleArgumentModels
entryRuleArgumentModels returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentModelsRule()); }
	 iv_ruleArgumentModels=ruleArgumentModels 
	 { $current=$iv_ruleArgumentModels.current; } 
	 EOF 
;

// Rule ArgumentModels
ruleArgumentModels returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='argumentmodel' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArgumentModelsAccess().getArgumentmodelKeyword_0());
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			newLeafNode(lv_importURI_1_0, grammarAccess.getArgumentModelsAccess().getImportURISTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgumentModelsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleAllocation
entryRuleAllocation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAllocationRule()); }
	 iv_ruleAllocation=ruleAllocation 
	 { $current=$iv_ruleAllocation.current; } 
	 EOF 
;

// Rule Allocation
ruleAllocation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAllocationAccess().getAllocationAction_0(),
            $current);
    }
)(	otherlv_1='cost' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAllocationAccess().getCostKeyword_1_0());
    }
(
(
		lv_cost_2_0=RULE_INT
		{
			newLeafNode(lv_cost_2_0, grammarAccess.getAllocationAccess().getCostINTTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAllocationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"cost",
        		lv_cost_2_0, 
        		"INT");
	    }

)
))?(	otherlv_3='duration' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAllocationAccess().getDurationKeyword_2_0());
    }
(
(
		lv_duration_4_0=RULE_INT
		{
			newLeafNode(lv_duration_4_0, grammarAccess.getAllocationAccess().getDurationINTTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAllocationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"duration",
        		lv_duration_4_0, 
        		"INT");
	    }

)
))?(	otherlv_5='team' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAllocationAccess().getTeamKeyword_3_0());
    }
(
(
		lv_team_6_0=RULE_STRING
		{
			newLeafNode(lv_team_6_0, grammarAccess.getAllocationAccess().getTeamSTRINGTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAllocationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"team",
        		lv_team_6_0, 
        		"STRING");
	    }

)
))?(	otherlv_7='facility' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getAllocationAccess().getFacilityKeyword_4_0());
    }
(
(
		lv_facility_8_0=RULE_STRING
		{
			newLeafNode(lv_facility_8_0, grammarAccess.getAllocationAccess().getFacilitySTRINGTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAllocationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"facility",
        		lv_facility_8_0, 
        		"STRING");
	    }

)
))?)
;





// Entry rule entryRulePlan
entryRulePlan returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPlanRule()); }
	 iv_rulePlan=rulePlan 
	 { $current=$iv_rulePlan.current; } 
	 EOF 
;

// Rule Plan
rulePlan returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='plan' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPlanAccess().getPlanKeyword_0());
    }
(
(
		lv_id_1_0=RULE_STRING
		{
			newLeafNode(lv_id_1_0, grammarAccess.getPlanAccess().getIdSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPlanRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_1_0, 
        		"STRING");
	    }

)
)	otherlv_2='element' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPlanAccess().getElementKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPlanRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getPlanAccess().getElementModelElementCrossReference_3_0()); 
	}

)
)(	otherlv_4='estimated' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPlanAccess().getEstimatedKeyword_4_0());
    }
	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPlanAccess().getLeftParenthesisKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPlanAccess().getEstimatedAllocationParserRuleCall_4_2_0()); 
	    }
		lv_estimated_6_0=ruleAllocation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlanRule());
	        }
       		set(
       			$current, 
       			"estimated",
        		lv_estimated_6_0, 
        		"Allocation");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPlanAccess().getRightParenthesisKeyword_4_3());
    }
)?(	otherlv_8='actual' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getPlanAccess().getActualKeyword_5_0());
    }
	otherlv_9='(' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getPlanAccess().getLeftParenthesisKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPlanAccess().getActualAllocationParserRuleCall_5_2_0()); 
	    }
		lv_actual_10_0=ruleAllocation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlanRule());
	        }
       		set(
       			$current, 
       			"actual",
        		lv_actual_10_0, 
        		"Allocation");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11=')' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getPlanAccess().getRightParenthesisKeyword_5_3());
    }
)?)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


