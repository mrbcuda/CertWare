/*
* generated by Xtext
*/
grammar InternalCpnDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package net.certware.planning.cpn.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package net.certware.planning.cpn.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import net.certware.planning.cpn.services.CpnDslGrammarAccess;

}

@parser::members {

 	private CpnDslGrammarAccess grammarAccess;
 	
    public InternalCpnDslParser(TokenStream input, IAstFactory factory, CpnDslGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("net/certware/planning/cpn/parser/antlr/internal/InternalCpnDsl.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Plans";	
   	}
   	
   	@Override
   	protected CpnDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRulePlans
entryRulePlans returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPlansRule(), currentNode); }
	 iv_rulePlans=rulePlans 
	 { $current=$iv_rulePlans.current; } 
	 EOF 
;

// Rule Plans
rulePlans returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPlansAccess().getArgumentmodelsArgumentModelsParserRuleCall_0_0(), currentNode); 
	    }
		lv_argumentmodels_0_0=ruleArgumentModels		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPlansRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"argumentmodels",
	        		lv_argumentmodels_0_0, 
	        		"ArgumentModels", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPlansAccess().getPlansPlanParserRuleCall_1_0(), currentNode); 
	    }
		lv_plans_1_0=rulePlan		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPlansRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"plans",
	        		lv_plans_1_0, 
	        		"Plan", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleArgumentModels
entryRuleArgumentModels returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getArgumentModelsRule(), currentNode); }
	 iv_ruleArgumentModels=ruleArgumentModels 
	 { $current=$iv_ruleArgumentModels.current; } 
	 EOF 
;

// Rule ArgumentModels
ruleArgumentModels returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'argumentmodel' 
    {
        createLeafNode(grammarAccess.getArgumentModelsAccess().getArgumentmodelKeyword_0(), null); 
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getArgumentModelsAccess().getImportURISTRINGTerminalRuleCall_1_0(), "importURI"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getArgumentModelsRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"importURI",
	        		lv_importURI_1_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleAllocation
entryRuleAllocation returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getAllocationRule(), currentNode); }
	 iv_ruleAllocation=ruleAllocation 
	 { $current=$iv_ruleAllocation.current; } 
	 EOF 
;

// Rule Allocation
ruleAllocation returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        temp=factory.create(grammarAccess.getAllocationAccess().getAllocationAction_0().getType().getClassifier());
        $current = temp; 
        temp = null;
        CompositeNode newNode = createCompositeNode(grammarAccess.getAllocationAccess().getAllocationAction_0(), currentNode.getParent());
    newNode.getChildren().add(currentNode);
    moveLookaheadInfo(currentNode, newNode);
    currentNode = newNode; 
        associateNodeWithAstElement(currentNode, $current); 
    }
)(	'cost' 
    {
        createLeafNode(grammarAccess.getAllocationAccess().getCostKeyword_1_0(), null); 
    }
(
(
		lv_cost_2_0=RULE_INT
		{
			createLeafNode(grammarAccess.getAllocationAccess().getCostINTTerminalRuleCall_1_1_0(), "cost"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAllocationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"cost",
	        		lv_cost_2_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(	'duration' 
    {
        createLeafNode(grammarAccess.getAllocationAccess().getDurationKeyword_2_0(), null); 
    }
(
(
		lv_duration_4_0=RULE_INT
		{
			createLeafNode(grammarAccess.getAllocationAccess().getDurationINTTerminalRuleCall_2_1_0(), "duration"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAllocationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"duration",
	        		lv_duration_4_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(	'team' 
    {
        createLeafNode(grammarAccess.getAllocationAccess().getTeamKeyword_3_0(), null); 
    }
(
(
		lv_team_6_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getAllocationAccess().getTeamSTRINGTerminalRuleCall_3_1_0(), "team"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAllocationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"team",
	        		lv_team_6_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?(	'facility' 
    {
        createLeafNode(grammarAccess.getAllocationAccess().getFacilityKeyword_4_0(), null); 
    }
(
(
		lv_facility_8_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getAllocationAccess().getFacilitySTRINGTerminalRuleCall_4_1_0(), "facility"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getAllocationRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"facility",
	        		lv_facility_8_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?)
;





// Entry rule entryRulePlan
entryRulePlan returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getPlanRule(), currentNode); }
	 iv_rulePlan=rulePlan 
	 { $current=$iv_rulePlan.current; } 
	 EOF 
;

// Rule Plan
rulePlan returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'plan' 
    {
        createLeafNode(grammarAccess.getPlanAccess().getPlanKeyword_0(), null); 
    }
(
(
		lv_id_1_0=RULE_STRING
		{
			createLeafNode(grammarAccess.getPlanAccess().getIdSTRINGTerminalRuleCall_1_0(), "id"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPlanRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"id",
	        		lv_id_1_0, 
	        		"STRING", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'element' 
    {
        createLeafNode(grammarAccess.getPlanAccess().getElementKeyword_2(), null); 
    }
(
(
		{
			if ($current==null) {
	            $current = factory.create(grammarAccess.getPlanRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
        }
	RULE_ID
	{
		createLeafNode(grammarAccess.getPlanAccess().getElementModelElementCrossReference_3_0(), "element"); 
	}

)
)(	'estimated' 
    {
        createLeafNode(grammarAccess.getPlanAccess().getEstimatedKeyword_4_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getPlanAccess().getLeftParenthesisKeyword_4_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPlanAccess().getEstimatedAllocationParserRuleCall_4_2_0(), currentNode); 
	    }
		lv_estimated_6_0=ruleAllocation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPlanRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"estimated",
	        		lv_estimated_6_0, 
	        		"Allocation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getPlanAccess().getRightParenthesisKeyword_4_3(), null); 
    }
)?(	'actual' 
    {
        createLeafNode(grammarAccess.getPlanAccess().getActualKeyword_5_0(), null); 
    }
	'(' 
    {
        createLeafNode(grammarAccess.getPlanAccess().getLeftParenthesisKeyword_5_1(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getPlanAccess().getActualAllocationParserRuleCall_5_2_0(), currentNode); 
	    }
		lv_actual_10_0=ruleAllocation		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getPlanRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"actual",
	        		lv_actual_10_0, 
	        		"Allocation", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	')' 
    {
        createLeafNode(grammarAccess.getPlanAccess().getRightParenthesisKeyword_5_3(), null); 
    }
)?)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


